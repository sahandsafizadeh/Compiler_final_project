
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.access.*;
import ast.block.Block;
import ast.block.BlockContent;
import ast.block.Blocks;
import ast.block.stmt.Statement;
import ast.block.stmt.assignment.*;
import ast.block.stmt.conditional.casestmt.Cases;
import ast.block.stmt.conditional.casestmt.Switch;
import ast.block.stmt.conditional.ifstmt.If;
import ast.block.stmt.function.FunctionCall;
import ast.block.stmt.function.Return;
import ast.block.stmt.loop.*;
import ast.dcl.CompleteDCL;
import ast.dcl.DCL;
import ast.dcl.array.ArrayDCL;
import ast.dcl.variable.VariableDCL;
import ast.dcl.variable.Variables;
import ast.expr.Expression;
import ast.expr.binary.arithmatic.*;
import ast.expr.binary.logical.*;
import ast.expr.constant.*;
import ast.expr.other.Casting;
import ast.expr.other.SizeOf;
import ast.expr.other.Variable;
import ast.expr.unary.arithmatic.BinaryNot;
import ast.expr.unary.arithmatic.Uminus;
import ast.expr.unary.arithmatic.dual.PostfixMinus2;
import ast.expr.unary.arithmatic.dual.PostfixPlus2;
import ast.expr.unary.arithmatic.dual.PrefixMinus2;
import ast.expr.unary.arithmatic.dual.PrefixPlus2;
import ast.expr.unary.logical.Not;
import ast.program.Program;
import ast.program.ProgramContent;
import ast.program.function.FunctionArguments;
import ast.program.function.FunctionDCL;
import ast.program.global.GlobalVarDCL;
import ast.program.structure.StructVarDCL;
import ast.program.structure.Structures;
import ast.type.Type;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return Symbol.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\250\000\002\002\004\000\002\002\004\000\002\002" +
                            "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
                            "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
                            "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
                            "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
                            "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
                            "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
                            "\002\007\006\000\002\007\011\000\002\010\003\000\002" +
                            "\010\003\000\002\065\002\000\002\011\007\000\002\011" +
                            "\002\000\002\012\004\000\002\012\002\000\002\013\005" +
                            "\000\002\013\002\000\002\014\003\000\002\014\003\000" +
                            "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
                            "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
                            "\003\000\002\066\002\000\002\067\002\000\002\016\014" +
                            "\000\002\070\002\000\002\020\005\000\002\020\002\000" +
                            "\002\017\005\000\002\017\004\000\002\021\005\000\002" +
                            "\022\004\000\002\022\002\000\002\023\003\000\002\023" +
                            "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
                            "\000\002\023\003\000\002\071\002\000\002\024\006\000" +
                            "\002\025\004\000\002\025\004\000\002\025\002\000\002" +
                            "\026\005\000\002\027\004\000\002\027\004\000\002\027" +
                            "\002\000\002\072\002\000\002\030\006\000\002\030\004" +
                            "\000\002\073\002\000\002\074\002\000\002\031\007\000" +
                            "\002\032\004\000\002\033\004\000\002\033\002\000\002" +
                            "\075\002\000\002\034\006\000\002\034\002\000\002\035" +
                            "\004\000\002\036\006\000\002\036\002\000\002\037\003" +
                            "\000\002\037\003\000\002\037\004\000\002\037\004\000" +
                            "\002\037\005\000\002\040\003\000\002\040\004\000\002" +
                            "\040\004\000\002\041\010\000\002\076\002\000\002\041" +
                            "\017\000\002\042\004\000\002\042\002\000\002\077\002" +
                            "\000\002\100\002\000\002\043\011\000\002\043\002\000" +
                            "\002\044\013\000\002\044\011\000\002\044\011\000\002" +
                            "\045\003\000\002\045\002\000\002\046\003\000\002\046" +
                            "\002\000\002\047\003\000\002\047\002\000\002\050\005" +
                            "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
                            "\002\050\005\000\002\051\003\000\002\051\005\000\002" +
                            "\052\004\000\002\053\006\000\002\053\002\000\002\054" +
                            "\003\000\002\054\005\000\002\054\004\000\002\054\004" +
                            "\000\002\054\004\000\002\054\004\000\002\054\004\000" +
                            "\002\054\004\000\002\054\004\000\002\054\006\000\002" +
                            "\054\006\000\002\054\003\000\002\054\003\000\002\054" +
                            "\003\000\002\054\003\000\002\055\003\000\002\055\003" +
                            "\000\002\055\003\000\002\055\003\000\002\056\005\000" +
                            "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
                            "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
                            "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
                            "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
                            "\002\057\005\000\002\057\005\000\002\060\003\000\002" +
                            "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
                            "\003\000\002\060\003\000\002\101\002\000\002\061\007" +
                            "\000\002\102\002\000\002\062\005\000\002\062\002\000" +
                            "\002\063\004\000\002\063\002\000\002\064\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u0128\000\026\002\uffff\005\011\006\007\007\022\010" +
                            "\004\011\006\012\021\013\013\020\012\022\016\001\002" +
                            "\000\004\116\ufff8\001\002\000\026\002\ufffd\005\ufffd\006" +
                            "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\020\ufffd" +
                            "\022\ufffd\001\002\000\004\116\ufff7\001\002\000\004\116" +
                            "\ufffa\001\002\000\004\002\u012a\001\002\000\004\116\uffd7" +
                            "\001\002\000\022\006\027\007\035\010\025\011\026\012" +
                            "\034\013\032\014\031\015\030\001\002\000\004\116\ufff5" +
                            "\001\002\000\004\116\036\001\002\000\026\002\ufffc\005" +
                            "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
                            "\020\ufffc\022\ufffc\001\002\000\022\006\027\007\035\010" +
                            "\025\011\026\012\034\013\032\014\031\015\030\001\002" +
                            "\000\026\002\uffff\005\011\006\007\007\022\010\004\011" +
                            "\006\012\021\013\013\020\012\022\016\001\002\000\026" +
                            "\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
                            "\ufffe\013\ufffe\020\ufffe\022\ufffe\001\002\000\004\116\ufff6" +
                            "\001\002\000\004\116\ufff9\001\002\000\004\002\000\001" +
                            "\002\000\004\116\uffe0\001\002\000\004\116\uffdc\001\002" +
                            "\000\004\116\uffdb\001\002\000\004\116\uffde\001\002\000" +
                            "\004\116\uffdf\001\002\000\004\116\uffd8\001\002\000\004" +
                            "\116\uffd9\001\002\000\004\116\036\001\002\000\004\116" +
                            "\uffda\001\002\000\004\116\uffdd\001\002\000\104\023\uff5a" +
                            "\035\uff5a\044\uff5a\046\uff5a\047\uff5a\051\uff5a\052\uff5a\054" +
                            "\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a" +
                            "\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072" +
                            "\uff5a\073\uff5a\076\uff5a\077\uff5a\102\uff5a\103\uff5a\104\uff5a" +
                            "\105\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a\116\uff5a\001" +
                            "\002\000\004\072\040\001\002\000\026\006\045\007\053" +
                            "\010\041\011\044\012\052\013\047\014\046\021\051\073" +
                            "\uffe5\116\036\001\002\000\006\073\ufff2\116\ufff2\001\002" +
                            "\000\004\073\065\001\002\000\006\073\uffec\116\uffec\001" +
                            "\002\000\006\073\ufff1\116\ufff1\001\002\000\006\073\ufff4" +
                            "\116\ufff4\001\002\000\006\073\uffee\116\uffee\001\002\000" +
                            "\006\073\uffef\116\uffef\001\002\000\004\116\036\001\002" +
                            "\000\006\073\uffed\116\uffed\001\002\000\006\073\ufff0\116" +
                            "\ufff0\001\002\000\006\073\ufff3\116\ufff3\001\002\000\010" +
                            "\046\uffe1\070\056\073\uffe1\001\002\000\006\046\uffe7\073" +
                            "\uffe7\001\002\000\004\071\057\001\002\000\010\046\uffe1" +
                            "\070\056\073\uffe1\001\002\000\006\046\uffe2\073\uffe2\001" +
                            "\002\000\006\046\062\073\uffe3\001\002\000\026\006\045" +
                            "\007\053\010\041\011\044\012\052\013\047\014\046\021" +
                            "\051\073\uffe5\116\036\001\002\000\004\073\uffe6\001\002" +
                            "\000\004\073\uffe4\001\002\000\006\023\067\044\070\001" +
                            "\002\000\026\002\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
                            "\011\uffea\012\uffea\013\uffea\020\uffea\022\uffea\001\002\000" +
                            "\044\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
                            "\013\uffc6\014\uffc6\021\uffc6\024\uffc6\025\uffc6\027\uffc6\033" +
                            "\uffc6\034\uffc6\036\uffc6\042\uffc6\116\uffc6\001\002\000\026" +
                            "\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
                            "\uffe9\013\uffe9\020\uffe9\022\uffe9\001\002\000\026\002\uffe8" +
                            "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
                            "\uffe8\020\uffe8\022\uffe8\001\002\000\044\004\105\006\045" +
                            "\007\053\010\041\011\044\012\052\013\047\014\046\021" +
                            "\051\024\uffc2\025\077\027\076\033\112\034\103\036\114" +
                            "\042\074\116\036\001\002\000\044\004\105\006\045\007" +
                            "\053\010\041\011\044\012\052\013\047\014\046\021\051" +
                            "\024\uffc2\025\077\027\076\033\112\034\103\036\114\042" +
                            "\074\116\036\001\002\000\036\016\126\017\133\043\122" +
                            "\050\142\052\134\063\124\072\131\076\137\077\140\112" +
                            "\144\113\132\114\136\115\143\116\036\001\002\000\004" +
                            "\044\u0105\001\002\000\004\072\362\001\002\000\004\072" +
                            "\353\001\002\000\004\024\352\001\002\000\050\004\uffad" +
                            "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
                            "\uffad\021\uffad\024\uffad\025\uffad\027\uffad\033\uffad\034\uffad" +
                            "\036\uffad\040\uffad\041\uffad\042\uffad\116\uffad\001\002\000" +
                            "\024\047\uff8b\057\uff8b\070\212\072\uff61\102\uff8b\103\uff8b" +
                            "\104\uff8b\105\uff8b\116\uffec\001\002\000\004\072\344\001" +
                            "\002\000\004\044\343\001\002\000\024\006\uffbd\007\uffbd" +
                            "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\021\uffbd\116" +
                            "\uffbd\001\002\000\004\116\uffba\001\002\000\016\047\222" +
                            "\057\314\102\313\103\310\104\312\105\311\001\002\000" +
                            "\050\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
                            "\013\uffae\014\uffae\021\uffae\024\uffae\025\uffae\027\uffae\033" +
                            "\uffae\034\uffae\036\uffae\040\uffae\041\uffae\042\uffae\116\uffae" +
                            "\001\002\000\004\044\307\001\002\000\004\072\274\001" +
                            "\002\000\044\004\105\006\045\007\053\010\041\011\044" +
                            "\012\052\013\047\014\046\021\051\024\uffc2\025\077\027" +
                            "\076\033\112\034\103\036\114\042\074\116\036\001\002" +
                            "\000\004\023\116\001\002\000\072\044\uff8f\046\uff8f\047" +
                            "\uff8f\051\uff8f\052\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f" +
                            "\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
                            "\uff8f\071\uff8f\073\uff8f\076\uff8f\077\uff8f\102\uff8f\103\uff8f" +
                            "\104\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f\001" +
                            "\002\000\050\004\105\006\045\007\053\010\041\011\044" +
                            "\012\052\013\047\014\046\021\051\024\uffbe\025\077\027" +
                            "\076\033\112\034\103\036\114\040\264\041\260\042\074" +
                            "\116\036\001\002\000\004\037\120\001\002\000\004\072" +
                            "\121\001\002\000\036\016\126\017\133\043\122\050\142" +
                            "\052\134\063\124\072\131\076\137\077\140\112\144\113" +
                            "\132\114\136\115\143\116\036\001\002\000\004\072\255" +
                            "\001\002\000\044\051\160\052\147\054\155\055\152\056" +
                            "\156\060\154\061\161\062\163\064\150\065\166\066\165" +
                            "\067\162\073\253\106\157\107\151\110\164\111\153\001" +
                            "\002\000\036\016\126\017\133\043\122\050\142\052\134" +
                            "\063\124\072\131\076\137\077\140\112\144\113\132\114" +
                            "\136\115\143\116\036\001\002\000\052\044\uff7c\046\uff7c" +
                            "\051\uff7c\052\uff7c\054\uff7c\055\uff7c\056\uff7c\060\uff7c\061" +
                            "\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\071\uff7c" +
                            "\073\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c\001\002\000" +
                            "\052\044\uff67\046\uff67\051\uff67\052\uff67\054\uff67\055\uff67" +
                            "\056\uff67\060\uff67\061\uff67\062\uff67\064\uff67\065\uff67\066" +
                            "\uff67\067\uff67\071\uff67\073\uff67\106\uff67\107\uff67\110\uff67" +
                            "\111\uff67\001\002\000\052\044\uff7f\046\uff7f\051\uff7f\052" +
                            "\uff7f\054\uff7f\055\uff7f\056\uff7f\060\uff7f\061\uff7f\062\uff7f" +
                            "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\071\uff7f\073\uff7f\106" +
                            "\uff7f\107\uff7f\110\uff7f\111\uff7f\001\002\000\064\044\uff8b" +
                            "\046\uff8b\047\uff8b\051\uff8b\052\uff8b\054\uff8b\055\uff8b\056" +
                            "\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b\066\uff8b" +
                            "\067\uff8b\070\212\071\uff8b\072\uff61\073\uff8b\076\uff8b\077" +
                            "\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b\001\002\000\046" +
                            "\007\232\010\231\012\234\013\235\016\126\017\133\043" +
                            "\122\050\142\052\134\063\124\072\131\076\137\077\140" +
                            "\112\144\113\132\114\136\115\143\116\036\001\002\000" +
                            "\052\044\uff62\046\uff62\051\uff62\052\uff62\054\uff62\055\uff62" +
                            "\056\uff62\060\uff62\061\uff62\062\uff62\064\uff62\065\uff62\066" +
                            "\uff62\067\uff62\071\uff62\073\uff62\106\uff62\107\uff62\110\uff62" +
                            "\111\uff62\001\002\000\052\044\uff66\046\uff66\051\uff66\052" +
                            "\uff66\054\uff66\055\uff66\056\uff66\060\uff66\061\uff66\062\uff66" +
                            "\064\uff66\065\uff66\066\uff66\067\uff66\071\uff66\073\uff66\106" +
                            "\uff66\107\uff66\110\uff66\111\uff66\001\002\000\036\016\126" +
                            "\017\133\043\122\050\142\052\134\063\124\072\131\076" +
                            "\137\077\140\112\144\113\132\114\136\115\143\116\036" +
                            "\001\002\000\060\044\uff7d\046\uff7d\047\222\051\uff7d\052" +
                            "\uff7d\054\uff7d\055\uff7d\056\uff7d\060\uff7d\061\uff7d\062\uff7d" +
                            "\064\uff7d\065\uff7d\066\uff7d\067\uff7d\071\uff7d\073\uff7d\076" +
                            "\225\077\226\106\uff7d\107\uff7d\110\uff7d\111\uff7d\001\002" +
                            "\000\052\044\uff64\046\uff64\051\uff64\052\uff64\054\uff64\055" +
                            "\uff64\056\uff64\060\uff64\061\uff64\062\uff64\064\uff64\065\uff64" +
                            "\066\uff64\067\uff64\071\uff64\073\uff64\106\uff64\107\uff64\110" +
                            "\uff64\111\uff64\001\002\000\004\116\036\001\002\000\004" +
                            "\116\036\001\002\000\052\044\uff8a\046\uff8a\051\uff8a\052" +
                            "\uff8a\054\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\062\uff8a" +
                            "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\071\uff8a\073\uff8a\106" +
                            "\uff8a\107\uff8a\110\uff8a\111\uff8a\001\002\000\036\016\126" +
                            "\017\133\043\122\050\142\052\134\063\124\072\131\076" +
                            "\137\077\140\112\144\113\132\114\136\115\143\116\036" +
                            "\001\002\000\052\044\uff63\046\uff63\051\uff63\052\uff63\054" +
                            "\uff63\055\uff63\056\uff63\060\uff63\061\uff63\062\uff63\064\uff63" +
                            "\065\uff63\066\uff63\067\uff63\071\uff63\073\uff63\106\uff63\107" +
                            "\uff63\110\uff63\111\uff63\001\002\000\052\044\uff65\046\uff65" +
                            "\051\uff65\052\uff65\054\uff65\055\uff65\056\uff65\060\uff65\061" +
                            "\uff65\062\uff65\064\uff65\065\uff65\066\uff65\067\uff65\071\uff65" +
                            "\073\uff65\106\uff65\107\uff65\110\uff65\111\uff65\001\002\000" +
                            "\052\044\uff7e\046\uff7e\051\uff7e\052\uff7e\054\uff7e\055\uff7e" +
                            "\056\uff7e\060\uff7e\061\uff7e\062\uff7e\064\uff7e\065\uff7e\066" +
                            "\uff7e\067\uff7e\071\uff7e\073\uff7e\106\uff7e\107\uff7e\110\uff7e" +
                            "\111\uff7e\001\002\000\052\044\uff87\046\uff87\051\uff87\052" +
                            "\uff87\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87\062\uff87" +
                            "\064\uff87\065\uff87\066\uff87\067\uff87\071\uff87\073\uff87\106" +
                            "\uff87\107\uff87\110\uff87\111\uff87\001\002\000\036\016\126" +
                            "\017\133\043\122\050\142\052\134\063\124\072\131\076" +
                            "\137\077\140\112\144\113\132\114\136\115\143\116\036" +
                            "\001\002\000\036\016\126\017\133\043\122\050\142\052" +
                            "\134\063\124\072\131\076\137\077\140\112\144\113\132" +
                            "\114\136\115\143\116\036\001\002\000\036\016\126\017" +
                            "\133\043\122\050\142\052\134\063\124\072\131\076\137" +
                            "\077\140\112\144\113\132\114\136\115\143\116\036\001" +
                            "\002\000\036\016\126\017\133\043\122\050\142\052\134" +
                            "\063\124\072\131\076\137\077\140\112\144\113\132\114" +
                            "\136\115\143\116\036\001\002\000\036\016\126\017\133" +
                            "\043\122\050\142\052\134\063\124\072\131\076\137\077" +
                            "\140\112\144\113\132\114\136\115\143\116\036\001\002" +
                            "\000\036\016\126\017\133\043\122\050\142\052\134\063" +
                            "\124\072\131\076\137\077\140\112\144\113\132\114\136" +
                            "\115\143\116\036\001\002\000\036\016\126\017\133\043" +
                            "\122\050\142\052\134\063\124\072\131\076\137\077\140" +
                            "\112\144\113\132\114\136\115\143\116\036\001\002\000" +
                            "\036\016\126\017\133\043\122\050\142\052\134\063\124" +
                            "\072\131\076\137\077\140\112\144\113\132\114\136\115" +
                            "\143\116\036\001\002\000\036\016\126\017\133\043\122" +
                            "\050\142\052\134\063\124\072\131\076\137\077\140\112" +
                            "\144\113\132\114\136\115\143\116\036\001\002\000\036" +
                            "\016\126\017\133\043\122\050\142\052\134\063\124\072" +
                            "\131\076\137\077\140\112\144\113\132\114\136\115\143" +
                            "\116\036\001\002\000\036\016\126\017\133\043\122\050" +
                            "\142\052\134\063\124\072\131\076\137\077\140\112\144" +
                            "\113\132\114\136\115\143\116\036\001\002\000\036\016" +
                            "\126\017\133\043\122\050\142\052\134\063\124\072\131" +
                            "\076\137\077\140\112\144\113\132\114\136\115\143\116" +
                            "\036\001\002\000\036\016\126\017\133\043\122\050\142" +
                            "\052\134\063\124\072\131\076\137\077\140\112\144\113" +
                            "\132\114\136\115\143\116\036\001\002\000\036\016\126" +
                            "\017\133\043\122\050\142\052\134\063\124\072\131\076" +
                            "\137\077\140\112\144\113\132\114\136\115\143\116\036" +
                            "\001\002\000\036\016\126\017\133\043\122\050\142\052" +
                            "\134\063\124\072\131\076\137\077\140\112\144\113\132" +
                            "\114\136\115\143\116\036\001\002\000\036\016\126\017" +
                            "\133\043\122\050\142\052\134\063\124\072\131\076\137" +
                            "\077\140\112\144\113\132\114\136\115\143\116\036\001" +
                            "\002\000\052\044\uff68\046\uff68\051\160\052\147\054\155" +
                            "\055\152\056\156\060\154\061\161\062\163\064\150\065" +
                            "\uff68\066\165\067\162\071\uff68\073\uff68\106\157\107\151" +
                            "\110\164\111\153\001\002\000\052\044\uff6f\046\uff6f\051" +
                            "\160\052\147\054\155\055\152\056\156\060\uff6f\061\uff6f" +
                            "\062\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\071\uff6f\073" +
                            "\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f\001\002\000\052" +
                            "\044\uff6e\046\uff6e\051\160\052\147\054\155\055\152\056" +
                            "\156\060\uff6e\061\uff6e\062\uff6e\064\uff6e\065\uff6e\066\uff6e" +
                            "\067\uff6e\071\uff6e\073\uff6e\106\uff6e\107\uff6e\110\uff6e\111" +
                            "\uff6e\001\002\000\052\044\uff70\046\uff70\051\160\052\147" +
                            "\054\155\055\152\056\156\060\154\061\uff70\062\uff70\064" +
                            "\uff70\065\uff70\066\165\067\162\071\uff70\073\uff70\106\157" +
                            "\107\151\110\164\111\153\001\002\000\052\044\uff6d\046" +
                            "\uff6d\051\160\052\147\054\155\055\152\056\156\060\uff6d" +
                            "\061\uff6d\062\uff6d\064\uff6d\065\uff6d\066\165\067\uff6d\071" +
                            "\uff6d\073\uff6d\106\uff6d\107\uff6d\110\164\111\uff6d\001\002" +
                            "\000\052\044\uff71\046\uff71\051\160\052\147\054\155\055" +
                            "\152\056\156\060\154\061\uff71\062\163\064\uff71\065\uff71" +
                            "\066\165\067\162\071\uff71\073\uff71\106\157\107\151\110" +
                            "\164\111\153\001\002\000\052\044\uff74\046\uff74\051\uff74" +
                            "\052\uff74\054\155\055\152\056\156\060\uff74\061\uff74\062" +
                            "\uff74\064\uff74\065\uff74\066\uff74\067\uff74\071\uff74\073\uff74" +
                            "\106\uff74\107\uff74\110\uff74\111\uff74\001\002\000\052\044" +
                            "\uff6a\046\uff6a\051\160\052\147\054\155\055\152\056\156" +
                            "\060\uff6a\061\uff6a\062\uff6a\064\uff6a\065\uff6a\066\165\067" +
                            "\162\071\uff6a\073\uff6a\106\uff6a\107\uff6a\110\164\111\153" +
                            "\001\002\000\052\044\uff75\046\uff75\051\uff75\052\uff75\054" +
                            "\uff75\055\uff75\056\uff75\060\uff75\061\uff75\062\uff75\064\uff75" +
                            "\065\uff75\066\uff75\067\uff75\071\uff75\073\uff75\106\uff75\107" +
                            "\uff75\110\uff75\111\uff75\001\002\000\052\044\uff77\046\uff77" +
                            "\051\uff77\052\uff77\054\uff77\055\uff77\056\uff77\060\uff77\061" +
                            "\uff77\062\uff77\064\uff77\065\uff77\066\uff77\067\uff77\071\uff77" +
                            "\073\uff77\106\uff77\107\uff77\110\uff77\111\uff77\001\002\000" +
                            "\052\044\uff72\046\uff72\051\160\052\147\054\155\055\152" +
                            "\056\156\060\uff72\061\uff72\062\uff72\064\uff72\065\uff72\066" +
                            "\165\067\162\071\uff72\073\uff72\106\157\107\151\110\164" +
                            "\111\153\001\002\000\052\044\uff6c\046\uff6c\051\160\052" +
                            "\147\054\155\055\152\056\156\060\uff6c\061\uff6c\062\uff6c" +
                            "\064\uff6c\065\uff6c\066\165\067\uff6c\071\uff6c\073\uff6c\106" +
                            "\uff6c\107\uff6c\110\164\111\uff6c\001\002\000\052\044\uff76" +
                            "\046\uff76\051\uff76\052\uff76\054\uff76\055\uff76\056\uff76\060" +
                            "\uff76\061\uff76\062\uff76\064\uff76\065\uff76\066\uff76\067\uff76" +
                            "\071\uff76\073\uff76\106\uff76\107\uff76\110\uff76\111\uff76\001" +
                            "\002\000\052\044\uff6b\046\uff6b\051\160\052\147\054\155" +
                            "\055\152\056\156\060\uff6b\061\uff6b\062\uff6b\064\uff6b\065" +
                            "\uff6b\066\165\067\162\071\uff6b\073\uff6b\106\uff6b\107\uff6b" +
                            "\110\164\111\153\001\002\000\052\044\uff69\046\uff69\051" +
                            "\160\052\147\054\155\055\152\056\156\060\154\061\161" +
                            "\062\163\064\uff69\065\uff69\066\165\067\162\071\uff69\073" +
                            "\uff69\106\157\107\151\110\164\111\153\001\002\000\052" +
                            "\044\uff73\046\uff73\051\uff73\052\uff73\054\155\055\152\056" +
                            "\156\060\uff73\061\uff73\062\uff73\064\uff73\065\uff73\066\uff73" +
                            "\067\uff73\071\uff73\073\uff73\106\uff73\107\uff73\110\uff73\111" +
                            "\uff73\001\002\000\054\044\uff85\046\uff85\047\222\051\uff85" +
                            "\052\uff85\054\uff85\055\uff85\056\uff85\060\uff85\061\uff85\062" +
                            "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\071\uff85\073\uff85" +
                            "\106\uff85\107\uff85\110\uff85\111\uff85\001\002\000\070\044" +
                            "\uff8b\046\uff8b\047\uff8b\051\uff8b\052\uff8b\054\uff8b\055\uff8b" +
                            "\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065" +
                            "\uff8b\066\uff8b\067\uff8b\070\212\071\uff8b\073\uff8b\102\uff8b" +
                            "\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\110\uff8b\111" +
                            "\uff8b\001\002\000\072\044\uff8d\046\uff8d\047\uff8d\051\uff8d" +
                            "\052\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
                            "\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\071\uff8d" +
                            "\073\uff8d\076\uff8d\077\uff8d\102\uff8d\103\uff8d\104\uff8d\105" +
                            "\uff8d\106\uff8d\107\uff8d\110\uff8d\111\uff8d\001\002\000\036" +
                            "\016\126\017\133\043\122\050\142\052\134\063\124\072" +
                            "\131\076\137\077\140\112\144\113\132\114\136\115\143" +
                            "\116\036\001\002\000\044\051\160\052\147\054\155\055" +
                            "\152\056\156\060\154\061\161\062\163\064\150\065\166" +
                            "\066\165\067\162\071\214\106\157\107\151\110\164\111" +
                            "\153\001\002\000\074\044\uffaf\046\uffaf\047\uffaf\051\uffaf" +
                            "\052\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
                            "\uffaf\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\216" +
                            "\071\uffaf\073\uffaf\076\uffaf\077\uffaf\102\uffaf\103\uffaf\104" +
                            "\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\001\002" +
                            "\000\072\044\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c\054" +
                            "\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
                            "\064\uff8c\065\uff8c\066\uff8c\067\uff8c\071\uff8c\073\uff8c\076" +
                            "\uff8c\077\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c" +
                            "\107\uff8c\110\uff8c\111\uff8c\001\002\000\036\016\126\017" +
                            "\133\043\122\050\142\052\134\063\124\072\131\076\137" +
                            "\077\140\112\144\113\132\114\136\115\143\116\036\001" +
                            "\002\000\044\051\160\052\147\054\155\055\152\056\156" +
                            "\060\154\061\161\062\163\064\150\065\166\066\165\067" +
                            "\162\071\220\106\157\107\151\110\164\111\153\001\002" +
                            "\000\074\044\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\054" +
                            "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
                            "\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\216\071\uffaf\073" +
                            "\uffaf\076\uffaf\077\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf" +
                            "\106\uffaf\107\uffaf\110\uffaf\111\uffaf\001\002\000\072\044" +
                            "\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0" +
                            "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065" +
                            "\uffb0\066\uffb0\067\uffb0\071\uffb0\073\uffb0\076\uffb0\077\uffb0" +
                            "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
                            "\uffb0\111\uffb0\001\002\000\004\116\036\001\002\000\072" +
                            "\044\uff8e\046\uff8e\047\uff8e\051\uff8e\052\uff8e\054\uff8e\055" +
                            "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\064\uff8e" +
                            "\065\uff8e\066\uff8e\067\uff8e\071\uff8e\073\uff8e\076\uff8e\077" +
                            "\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e" +
                            "\110\uff8e\111\uff8e\001\002\000\054\044\uff84\046\uff84\047" +
                            "\222\051\uff84\052\uff84\054\uff84\055\uff84\056\uff84\060\uff84" +
                            "\061\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067\uff84\071" +
                            "\uff84\073\uff84\106\uff84\107\uff84\110\uff84\111\uff84\001\002" +
                            "\000\052\044\uff82\046\uff82\051\uff82\052\uff82\054\uff82\055" +
                            "\uff82\056\uff82\060\uff82\061\uff82\062\uff82\064\uff82\065\uff82" +
                            "\066\uff82\067\uff82\071\uff82\073\uff82\106\uff82\107\uff82\110" +
                            "\uff82\111\uff82\001\002\000\052\044\uff83\046\uff83\051\uff83" +
                            "\052\uff83\054\uff83\055\uff83\056\uff83\060\uff83\061\uff83\062" +
                            "\uff83\064\uff83\065\uff83\066\uff83\067\uff83\071\uff83\073\uff83" +
                            "\106\uff83\107\uff83\110\uff83\111\uff83\001\002\000\052\044" +
                            "\uff86\046\uff86\051\uff86\052\uff86\054\uff86\055\uff86\056\uff86" +
                            "\060\uff86\061\uff86\062\uff86\064\uff86\065\uff86\066\uff86\067" +
                            "\uff86\071\uff86\073\uff86\106\uff86\107\uff86\110\uff86\111\uff86" +
                            "\001\002\000\044\051\160\052\147\054\155\055\152\056" +
                            "\156\060\154\061\161\062\163\064\150\065\166\066\165" +
                            "\067\162\073\240\106\157\107\151\110\164\111\153\001" +
                            "\002\000\004\073\uff7a\001\002\000\004\073\uff7b\001\002" +
                            "\000\004\073\236\001\002\000\004\073\uff79\001\002\000" +
                            "\004\073\uff78\001\002\000\036\016\126\017\133\043\122" +
                            "\050\142\052\134\063\124\072\131\076\137\077\140\112" +
                            "\144\113\132\114\136\115\143\116\036\001\002\000\052" +
                            "\044\uff81\046\uff81\051\uff81\052\uff81\054\uff81\055\uff81\056" +
                            "\uff81\060\uff81\061\uff81\062\uff81\064\uff81\065\uff81\066\uff81" +
                            "\067\uff81\071\uff81\073\uff81\106\uff81\107\uff81\110\uff81\111" +
                            "\uff81\001\002\000\052\044\uff89\046\uff89\051\uff89\052\uff89" +
                            "\054\uff89\055\uff89\056\uff89\060\uff89\061\uff89\062\uff89\064" +
                            "\uff89\065\uff89\066\uff89\067\uff89\071\uff89\073\uff89\106\uff89" +
                            "\107\uff89\110\uff89\111\uff89\001\002\000\004\072\242\001" +
                            "\002\000\040\016\126\017\133\043\122\050\142\052\134" +
                            "\063\124\072\131\073\uff5d\076\137\077\140\112\144\113" +
                            "\132\114\136\115\143\116\036\001\002\000\046\046\uff5f" +
                            "\051\160\052\147\054\155\055\152\056\156\060\154\061" +
                            "\161\062\163\064\150\065\166\066\165\067\162\073\uff5f" +
                            "\106\157\107\151\110\164\111\153\001\002\000\004\073" +
                            "\245\001\002\000\052\044\uff60\046\uff60\051\uff60\052\uff60" +
                            "\054\uff60\055\uff60\056\uff60\060\uff60\061\uff60\062\uff60\064" +
                            "\uff60\065\uff60\066\uff60\067\uff60\071\uff60\073\uff60\106\uff60" +
                            "\107\uff60\110\uff60\111\uff60\001\002\000\006\046\247\073" +
                            "\uff5b\001\002\000\040\016\126\017\133\043\122\050\142" +
                            "\052\134\063\124\072\131\073\uff5d\076\137\077\140\112" +
                            "\144\113\132\114\136\115\143\116\036\001\002\000\004" +
                            "\073\uff5e\001\002\000\004\073\uff5c\001\002\000\052\044" +
                            "\uff88\046\uff88\051\uff88\052\uff88\054\uff88\055\uff88\056\uff88" +
                            "\060\uff88\061\uff88\062\uff88\064\uff88\065\uff88\066\uff88\067" +
                            "\uff88\071\uff88\073\uff88\106\uff88\107\uff88\110\uff88\111\uff88" +
                            "\001\002\000\004\044\254\001\002\000\050\004\uff9c\006" +
                            "\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
                            "\021\uff9c\024\uff9c\025\uff9c\027\uff9c\033\uff9c\034\uff9c\036" +
                            "\uff9c\040\uff9c\041\uff9c\042\uff9c\116\uff9c\001\002\000\024" +
                            "\006\045\007\053\010\041\011\044\012\052\013\047\014" +
                            "\046\021\051\116\036\001\002\000\004\073\257\001\002" +
                            "\000\052\044\uff80\046\uff80\051\uff80\052\uff80\054\uff80\055" +
                            "\uff80\056\uff80\060\uff80\061\uff80\062\uff80\064\uff80\065\uff80" +
                            "\066\uff80\067\uff80\071\uff80\073\uff80\106\uff80\107\uff80\110" +
                            "\uff80\111\uff80\001\002\000\004\044\272\001\002\000\050" +
                            "\004\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
                            "\uffa9\014\uffa9\021\uffa9\024\uffa9\025\uffa9\027\uffa9\033\uffa9" +
                            "\034\uffa9\036\uffa9\040\uffa9\041\uffa9\042\uffa9\116\uffa9\001" +
                            "\002\000\050\004\105\006\045\007\053\010\041\011\044" +
                            "\012\052\013\047\014\046\021\051\024\uffbe\025\077\027" +
                            "\076\033\112\034\103\036\114\040\264\041\260\042\074" +
                            "\116\036\001\002\000\004\024\270\001\002\000\004\044" +
                            "\267\001\002\000\050\004\105\006\045\007\053\010\041" +
                            "\011\044\012\052\013\047\014\046\021\051\024\uffbe\025" +
                            "\077\027\076\033\112\034\103\036\114\040\264\041\260" +
                            "\042\074\116\036\001\002\000\004\024\uffc0\001\002\000" +
                            "\050\004\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
                            "\013\uffa8\014\uffa8\021\uffa8\024\uffa8\025\uffa8\027\uffa8\033" +
                            "\uffa8\034\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\116\uffa8" +
                            "\001\002\000\052\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
                            "\uffc1\012\uffc1\013\uffc1\014\uffc1\021\uffc1\024\uffc1\025\uffc1" +
                            "\027\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
                            "\uffc1\042\uffc1\116\uffc1\001\002\000\004\024\uffbf\001\002" +
                            "\000\050\004\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
                            "\uffa7\013\uffa7\014\uffa7\021\uffa7\024\uffa7\025\uffa7\027\uffa7" +
                            "\033\uffa7\034\uffa7\036\uffa7\040\uffa7\041\uffa7\042\uffa7\116" +
                            "\uffa7\001\002\000\004\024\uffc4\001\002\000\006\044\uff99" +
                            "\116\036\001\002\000\004\044\277\001\002\000\004\044" +
                            "\uff9a\001\002\000\040\016\126\017\133\043\122\044\uff97" +
                            "\050\142\052\134\063\124\072\131\076\137\077\140\112" +
                            "\144\113\132\114\136\115\143\116\036\001\002\000\044" +
                            "\044\uff98\051\160\052\147\054\155\055\152\056\156\060" +
                            "\154\061\161\062\163\064\150\065\166\066\165\067\162" +
                            "\106\157\107\151\110\164\111\153\001\002\000\004\044" +
                            "\302\001\002\000\006\073\uff95\116\036\001\002\000\004" +
                            "\073\305\001\002\000\004\073\uff96\001\002\000\004\023" +
                            "\116\001\002\000\050\004\uff9d\006\uff9d\007\uff9d\010\uff9d" +
                            "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\021\uff9d\024\uff9d\025" +
                            "\uff9d\027\uff9d\033\uff9d\034\uff9d\036\uff9d\040\uff9d\041\uff9d" +
                            "\042\uff9d\116\uff9d\001\002\000\050\004\uffbb\006\uffbb\007" +
                            "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\021\uffbb" +
                            "\024\uffbb\025\uffbb\027\uffbb\033\uffbb\034\uffbb\036\uffbb\040" +
                            "\uffbb\041\uffbb\042\uffbb\116\uffbb\001\002\000\036\016\126" +
                            "\017\133\043\122\050\142\052\134\063\124\072\131\076" +
                            "\137\077\140\112\144\113\132\114\136\115\143\116\036" +
                            "\001\002\000\036\016\126\017\133\043\122\050\142\052" +
                            "\134\063\124\072\131\076\137\077\140\112\144\113\132" +
                            "\114\136\115\143\116\036\001\002\000\036\016\126\017" +
                            "\133\043\122\050\142\052\134\063\124\072\131\076\137" +
                            "\077\140\112\144\113\132\114\136\115\143\116\036\001" +
                            "\002\000\036\016\126\017\133\043\122\050\142\052\134" +
                            "\063\124\072\131\076\137\077\140\112\144\113\132\114" +
                            "\136\115\143\116\036\001\002\000\036\016\126\017\133" +
                            "\043\122\050\142\052\134\063\124\072\131\076\137\077" +
                            "\140\112\144\113\132\114\136\115\143\116\036\001\002" +
                            "\000\046\044\uff94\051\160\052\147\054\155\055\152\056" +
                            "\156\060\154\061\161\062\163\064\150\065\166\066\165" +
                            "\067\162\073\uff94\106\157\107\151\110\164\111\153\001" +
                            "\002\000\046\044\uff93\051\160\052\147\054\155\055\152" +
                            "\056\156\060\154\061\161\062\163\064\150\065\166\066" +
                            "\165\067\162\073\uff93\106\157\107\151\110\164\111\153" +
                            "\001\002\000\046\044\uff91\051\160\052\147\054\155\055" +
                            "\152\056\156\060\154\061\161\062\163\064\150\065\166" +
                            "\066\165\067\162\073\uff91\106\157\107\151\110\164\111" +
                            "\153\001\002\000\046\044\uff90\051\160\052\147\054\155" +
                            "\055\152\056\156\060\154\061\161\062\163\064\150\065" +
                            "\166\066\165\067\162\073\uff90\106\157\107\151\110\164" +
                            "\111\153\001\002\000\046\044\uff92\051\160\052\147\054" +
                            "\155\055\152\056\156\060\154\061\161\062\163\064\150" +
                            "\065\166\066\165\067\162\073\uff92\106\157\107\151\110" +
                            "\164\111\153\001\002\000\004\116\036\001\002\000\010" +
                            "\044\uffb5\046\uffb5\057\336\001\002\000\006\044\uffb9\046" +
                            "\uffb9\001\002\000\012\044\uffaf\046\uffaf\057\uffaf\070\216" +
                            "\001\002\000\010\044\uffb1\046\uffb1\057\uffb1\001\002\000" +
                            "\006\044\uffb2\046\330\001\002\000\004\116\036\001\002" +
                            "\000\004\044\uffb8\001\002\000\006\044\uffb4\046\uffb4\001" +
                            "\002\000\006\044\uffb2\046\330\001\002\000\004\044\uffb3" +
                            "\001\002\000\006\044\uffb7\046\uffb7\001\002\000\036\016" +
                            "\126\017\133\043\122\050\142\052\134\063\124\072\131" +
                            "\076\137\077\140\112\144\113\132\114\136\115\143\116" +
                            "\036\001\002\000\046\044\uffb6\046\uffb6\051\160\052\147" +
                            "\054\155\055\152\056\156\060\154\061\161\062\163\064" +
                            "\150\065\166\066\165\067\162\106\157\107\151\110\164" +
                            "\111\153\001\002\000\024\006\045\007\053\010\041\011" +
                            "\044\012\052\013\047\014\046\021\051\116\036\001\002" +
                            "\000\004\044\342\001\002\000\050\004\uffbc\006\uffbc\007" +
                            "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\021\uffbc" +
                            "\024\uffbc\025\uffbc\027\uffbc\033\uffbc\034\uffbc\036\uffbc\040" +
                            "\uffbc\041\uffbc\042\uffbc\116\uffbc\001\002\000\050\004\uffac" +
                            "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
                            "\uffac\021\uffac\024\uffac\025\uffac\027\uffac\033\uffac\034\uffac" +
                            "\036\uffac\040\uffac\041\uffac\042\uffac\116\uffac\001\002\000" +
                            "\004\116\036\001\002\000\004\035\346\001\002\000\004" +
                            "\116\036\001\002\000\004\073\350\001\002\000\004\023" +
                            "\116\001\002\000\050\004\uff9b\006\uff9b\007\uff9b\010\uff9b" +
                            "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\021\uff9b\024\uff9b\025" +
                            "\uff9b\027\uff9b\033\uff9b\034\uff9b\036\uff9b\040\uff9b\041\uff9b" +
                            "\042\uff9b\116\uff9b\001\002\000\066\002\uffc5\004\uffc5\005" +
                            "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
                            "\014\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026" +
                            "\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5" +
                            "\040\uffc5\041\uffc5\042\uffc5\116\uffc5\001\002\000\036\016" +
                            "\126\017\133\043\122\050\142\052\134\063\124\072\131" +
                            "\076\137\077\140\112\144\113\132\114\136\115\143\116" +
                            "\036\001\002\000\044\051\160\052\147\054\155\055\152" +
                            "\056\156\060\154\061\161\062\163\064\150\065\166\066" +
                            "\165\067\162\073\355\106\157\107\151\110\164\111\153" +
                            "\001\002\000\004\023\067\001\002\000\052\004\uffa2\006" +
                            "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
                            "\021\uffa2\024\uffa2\025\uffa2\026\357\027\uffa2\033\uffa2\034" +
                            "\uffa2\036\uffa2\040\uffa2\041\uffa2\042\uffa2\116\uffa2\001\002" +
                            "\000\004\023\067\001\002\000\050\004\uffa6\006\uffa6\007" +
                            "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\021\uffa6" +
                            "\024\uffa6\025\uffa6\027\uffa6\033\uffa6\034\uffa6\036\uffa6\040" +
                            "\uffa6\041\uffa6\042\uffa6\116\uffa6\001\002\000\050\004\uffa3" +
                            "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
                            "\uffa3\021\uffa3\024\uffa3\025\uffa3\027\uffa3\033\uffa3\034\uffa3" +
                            "\036\uffa3\040\uffa3\041\uffa3\042\uffa3\116\uffa3\001\002\000" +
                            "\004\116\036\001\002\000\006\047\222\073\uffa5\001\002" +
                            "\000\004\073\365\001\002\000\004\030\366\001\002\000" +
                            "\004\045\367\001\002\000\004\023\370\001\002\000\006" +
                            "\031\372\032\uff9e\001\002\000\004\032\u0101\001\002\000" +
                            "\004\114\373\001\002\000\004\045\uffa1\001\002\000\004" +
                            "\045\375\001\002\000\004\023\067\001\002\000\006\031" +
                            "\uffa0\032\uffa0\001\002\000\006\031\372\032\uff9e\001\002" +
                            "\000\004\032\uff9f\001\002\000\004\045\u0102\001\002\000" +
                            "\004\023\067\001\002\000\004\024\u0104\001\002\000\050" +
                            "\004\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
                            "\uffa4\014\uffa4\021\uffa4\024\uffa4\025\uffa4\027\uffa4\033\uffa4" +
                            "\034\uffa4\036\uffa4\040\uffa4\041\uffa4\042\uffa4\116\uffa4\001" +
                            "\002\000\050\004\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
                            "\012\uffab\013\uffab\014\uffab\021\uffab\024\uffab\025\uffab\027" +
                            "\uffab\033\uffab\034\uffab\036\uffab\040\uffab\041\uffab\042\uffab" +
                            "\116\uffab\001\002\000\044\044\u0107\051\160\052\147\054" +
                            "\155\055\152\056\156\060\154\061\161\062\163\064\150" +
                            "\065\166\066\165\067\162\106\157\107\151\110\164\111" +
                            "\153\001\002\000\050\004\uffaa\006\uffaa\007\uffaa\010\uffaa" +
                            "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\021\uffaa\024\uffaa\025" +
                            "\uffaa\027\uffaa\033\uffaa\034\uffaa\036\uffaa\040\uffaa\041\uffaa" +
                            "\042\uffaa\116\uffaa\001\002\000\004\024\uffc3\001\002\000" +
                            "\004\044\u010a\001\002\000\026\002\ufffb\005\ufffb\006\ufffb" +
                            "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\020\ufffb\022" +
                            "\ufffb\001\002\000\004\116\036\001\002\000\004\044\u010d" +
                            "\001\002\000\026\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
                            "\uffeb\011\uffeb\012\uffeb\013\uffeb\020\uffeb\022\uffeb\001\002" +
                            "\000\004\116\036\001\002\000\004\023\u0110\001\002\000" +
                            "\020\004\u011a\006\u0114\007\u0119\010\u0112\011\u0113\012\u0118" +
                            "\013\u0116\001\002\000\022\004\uffd6\006\uffd6\007\uffd6\010" +
                            "\uffd6\011\uffd6\012\uffd6\013\uffd6\024\uffd6\001\002\000\004" +
                            "\116\uffca\001\002\000\004\116\uffc9\001\002\000\004\116" +
                            "\uffcc\001\002\000\004\116\036\001\002\000\004\116\uffc7" +
                            "\001\002\000\004\044\u011d\001\002\000\004\116\uffc8\001" +
                            "\002\000\004\116\uffcb\001\002\000\016\006\u0114\007\u0119" +
                            "\010\u0112\011\u0113\012\u0118\013\u0116\001\002\000\004\044" +
                            "\u011c\001\002\000\022\004\uffd1\006\uffd1\007\uffd1\010\uffd1" +
                            "\011\uffd1\012\uffd1\013\uffd1\024\uffd1\001\002\000\022\004" +
                            "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
                            "\024\uffd0\001\002\000\006\044\uffcd\057\u0120\001\002\000" +
                            "\004\044\uffcf\001\002\000\016\016\126\017\133\112\144" +
                            "\113\132\114\136\115\143\001\002\000\004\044\uffce\001" +
                            "\002\000\022\004\u011a\006\u0114\007\u0119\010\u0112\011\u0113" +
                            "\012\u0118\013\u0116\024\uffd2\001\002\000\022\004\uffd4\006" +
                            "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\024\uffd4" +
                            "\001\002\000\004\024\u0125\001\002\000\004\005\u0126\001" +
                            "\002\000\004\044\u0127\001\002\000\026\002\uffd5\005\uffd5" +
                            "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\020" +
                            "\uffd5\022\uffd5\001\002\000\022\004\u011a\006\u0114\007\u0119" +
                            "\010\u0112\011\u0113\012\u0118\013\u0116\024\uffd2\001\002\000" +
                            "\004\024\uffd3\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u0128\000\016\002\007\003\016\004\017\005\013\007" +
                            "\004\016\014\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\066\u010d\001\001\000\006\014\u010a\015\023\001\001" +
                            "\000\002\001\001\000\004\064\u0108\001\001\000\002\001" +
                            "\001\000\006\014\032\015\023\001\001\000\016\002\022" +
                            "\003\016\004\017\005\013\007\004\016\014\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\064\036\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\006\047\011\041\064\042\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\064\053\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\013\054\001\001\000\004\065" +
                            "\060\001\001\000\002\001\001\000\004\013\057\001\001" +
                            "\000\002\001\001\000\004\012\062\001\001\000\010\006" +
                            "\047\011\063\064\042\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\010\065\024\070\001\001\000\002\001" +
                            "\001\000\004\071\071\001\001\000\002\001\001\000\002" +
                            "\001\001\000\032\006\105\025\077\030\112\031\110\037" +
                            "\072\041\107\044\100\050\103\051\106\052\114\061\074" +
                            "\064\101\001\001\000\032\006\105\025\u0107\030\112\031" +
                            "\110\037\072\041\107\044\100\050\103\051\106\052\114" +
                            "\061\074\064\101\001\001\000\022\051\134\052\114\054" +
                            "\u0105\056\126\057\144\060\140\061\124\064\127\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\053\210\101\240" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
                            "\337\001\001\000\004\073\321\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\032\006\105\025\272\030\112\031\110\037\072\041\107" +
                            "\044\100\050\103\051\106\052\114\061\074\064\101\001" +
                            "\001\000\004\026\116\001\001\000\002\001\001\000\034" +
                            "\006\105\027\262\030\264\031\110\037\260\040\261\041" +
                            "\107\044\100\050\103\051\106\052\114\061\074\064\101" +
                            "\001\001\000\002\001\001\000\002\001\001\000\022\051" +
                            "\134\052\114\054\122\056\126\057\144\060\140\061\124" +
                            "\064\127\001\001\000\002\001\001\000\002\001\001\000" +
                            "\022\051\134\052\114\054\251\056\126\057\144\060\140" +
                            "\061\124\064\127\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\053\210\101\240\001\001" +
                            "\000\024\051\134\052\114\054\227\055\232\056\126\057" +
                            "\144\060\140\061\124\064\127\001\001\000\002\001\001" +
                            "\000\002\001\001\000\022\051\134\052\114\054\226\056" +
                            "\126\057\144\060\140\061\124\064\127\001\001\000\002" +
                            "\001\001\000\002\001\001\000\010\051\223\052\114\064" +
                            "\207\001\001\000\010\051\206\052\114\064\207\001\001" +
                            "\000\002\001\001\000\022\051\134\052\114\054\145\056" +
                            "\126\057\144\060\140\061\124\064\127\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\022\051\134\052\114\054\205\056\126\057\144" +
                            "\060\140\061\124\064\127\001\001\000\022\051\134\052" +
                            "\114\054\204\056\126\057\144\060\140\061\124\064\127" +
                            "\001\001\000\022\051\134\052\114\054\203\056\126\057" +
                            "\144\060\140\061\124\064\127\001\001\000\022\051\134" +
                            "\052\114\054\202\056\126\057\144\060\140\061\124\064" +
                            "\127\001\001\000\022\051\134\052\114\054\201\056\126" +
                            "\057\144\060\140\061\124\064\127\001\001\000\022\051" +
                            "\134\052\114\054\200\056\126\057\144\060\140\061\124" +
                            "\064\127\001\001\000\022\051\134\052\114\054\177\056" +
                            "\126\057\144\060\140\061\124\064\127\001\001\000\022" +
                            "\051\134\052\114\054\176\056\126\057\144\060\140\061" +
                            "\124\064\127\001\001\000\022\051\134\052\114\054\175" +
                            "\056\126\057\144\060\140\061\124\064\127\001\001\000" +
                            "\022\051\134\052\114\054\174\056\126\057\144\060\140" +
                            "\061\124\064\127\001\001\000\022\051\134\052\114\054" +
                            "\173\056\126\057\144\060\140\061\124\064\127\001\001" +
                            "\000\022\051\134\052\114\054\172\056\126\057\144\060" +
                            "\140\061\124\064\127\001\001\000\022\051\134\052\114" +
                            "\054\171\056\126\057\144\060\140\061\124\064\127\001" +
                            "\001\000\022\051\134\052\114\054\170\056\126\057\144" +
                            "\060\140\061\124\064\127\001\001\000\022\051\134\052" +
                            "\114\054\167\056\126\057\144\060\140\061\124\064\127" +
                            "\001\001\000\022\051\134\052\114\054\166\056\126\057" +
                            "\144\060\140\061\124\064\127\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\053\210\001\001\000\002\001\001\000\022\051\134" +
                            "\052\114\054\212\056\126\057\144\060\140\061\124\064" +
                            "\127\001\001\000\002\001\001\000\004\036\214\001\001" +
                            "\000\002\001\001\000\022\051\134\052\114\054\216\056" +
                            "\126\057\144\060\140\061\124\064\127\001\001\000\002" +
                            "\001\001\000\004\036\220\001\001\000\002\001\001\000" +
                            "\004\064\222\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\022\051" +
                            "\134\052\114\054\236\056\126\057\144\060\140\061\124" +
                            "\064\127\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\024\051\134\052\114\054\242\056\126" +
                            "\057\144\060\140\061\124\062\243\064\127\001\001\000" +
                            "\004\102\245\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\063\247\001\001\000\024\051\134\052\114\054" +
                            "\242\056\126\057\144\060\140\061\124\062\250\064\127" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\006\255" +
                            "\064\042\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\034\006\105\027\270" +
                            "\030\264\031\110\037\260\040\261\041\107\044\100\050" +
                            "\103\051\106\052\114\061\074\064\101\001\001\000\002" +
                            "\001\001\000\002\001\001\000\034\006\105\027\265\030" +
                            "\264\031\110\037\260\040\261\041\107\044\100\050\103" +
                            "\051\106\052\114\061\074\064\101\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\014\045\274\050" +
                            "\275\051\106\052\114\064\207\001\001\000\002\001\001" +
                            "\000\002\001\001\000\024\046\300\051\134\052\114\054" +
                            "\277\056\126\057\144\060\140\061\124\064\127\001\001" +
                            "\000\002\001\001\000\002\001\001\000\014\047\302\050" +
                            "\303\051\106\052\114\064\207\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\026\305\001\001\000\002\001" +
                            "\001\000\002\001\001\000\022\051\134\052\114\054\320" +
                            "\056\126\057\144\060\140\061\124\064\127\001\001\000" +
                            "\022\051\134\052\114\054\317\056\126\057\144\060\140" +
                            "\061\124\064\127\001\001\000\022\051\134\052\114\054" +
                            "\316\056\126\057\144\060\140\061\124\064\127\001\001" +
                            "\000\022\051\134\052\114\054\315\056\126\057\144\060" +
                            "\140\061\124\064\127\001\001\000\022\051\134\052\114" +
                            "\054\314\056\126\057\144\060\140\061\124\064\127\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\010\032\323\035" +
                            "\322\064\324\001\001\000\004\033\334\001\001\000\004" +
                            "\074\326\001\001\000\004\036\325\001\001\000\002\001" +
                            "\001\000\004\034\330\001\001\000\010\032\331\035\322" +
                            "\064\324\001\001\000\002\001\001\000\004\075\332\001" +
                            "\001\000\004\034\333\001\001\000\002\001\001\000\002" +
                            "\001\001\000\022\051\134\052\114\054\336\056\126\057" +
                            "\144\060\140\061\124\064\127\001\001\000\002\001\001" +
                            "\000\010\006\105\031\340\064\042\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\064\344" +
                            "\001\001\000\002\001\001\000\004\064\346\001\001\000" +
                            "\002\001\001\000\004\026\350\001\001\000\002\001\001" +
                            "\000\002\001\001\000\022\051\134\052\114\054\353\056" +
                            "\126\057\144\060\140\061\124\064\127\001\001\000\002" +
                            "\001\001\000\004\024\355\001\001\000\004\042\357\001" +
                            "\001\000\004\024\360\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\051\362\052\114\064\207\001\001\000" +
                            "\004\076\363\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\043\370\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\077\373" +
                            "\001\001\000\002\001\001\000\004\024\375\001\001\000" +
                            "\004\100\376\001\001\000\004\043\377\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\024\u0102\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\064\u010b\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\064\u010e\001\001\000" +
                            "\002\001\001\000\010\017\u0110\021\u0116\023\u0114\001\001" +
                            "\000\004\067\u0121\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\064\u011d\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\021\u011a\023\u0114\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\022\u011e\001" +
                            "\001\000\002\001\001\000\004\060\u0120\001\001\000\002" +
                            "\001\001\000\012\017\u0122\020\u0123\021\u0116\023\u0114\001" +
                            "\001\000\004\070\u0127\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
                            "\u0122\020\u0128\021\u0116\023\u0114\001\001\000\002\001\001" +
                            "\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return scanner.next_token();
    }


    private Scanner scanner;

    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= program EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // program ::= program_part program
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // program ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // program_part ::= global_var_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // program_part ::= func_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // program_part ::= struct_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // global_var_dcl ::= global_var_type id SEMI
                {
                    ProgramContent RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new GlobalVarDCL(t, id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // global_var_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // global_var_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // global_var_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // global_var_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // global_var_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // global_var_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // variable_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // variable_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // variable_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // variable_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // variable_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // variable_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // variable_type ::= STRING
                {
                    Type RESULT = null;
                    RESULT = Type.STRING;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // variable_type ::= AUTO
                {
                    Type RESULT = null;
                    RESULT = Type.AUTO;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // variable_type ::= id
                {
                    Type RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String type = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    new Type(type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // func_dcl ::= EXTERN function_return_type id SEMI
                {
                    ProgramContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // func_dcl ::= FUNCTION function_return_type id PRANTOP arguments PRANTCL func_dcl_part
                {
                    ProgramContent RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new FunctionDCL(t, id, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // func_dcl_part ::= SEMI
                {
                    Block RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // func_dcl_part ::= block
                {
                    Block RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // NT$0 ::=
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    t = b ? Type.toArray(t) : t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // arguments ::= variable_type id function_array_dcl NT$0 arguments_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    FunctionArguments.getInstance().addArgument(id, t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // arguments ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // arguments_part ::= COMA arguments
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // arguments_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl
                {
                    Boolean RESULT = null;
                    RESULT = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // function_array_dcl ::=
                {
                    Boolean RESULT = null;
                    RESULT = false;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // function_return_type ::= function_argument_type
                {
                    Type RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_return_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // function_return_type ::= VOID
                {
                    Type RESULT = null;
                    RESULT = Type.VOID;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_return_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // function_argument_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // function_argument_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // function_argument_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // function_argument_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // function_argument_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // function_argument_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // function_argument_type ::= STRING
                {
                    Type RESULT = null;
                    RESULT = Type.STRING;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // NT$1 ::=
                {
                    ProgramContent RESULT = null;
                    Structures.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // NT$2 ::=
                {
                    ProgramContent RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Structures.getInstance().addDCL(dcl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // struct_dcl ::= RECORD NT$1 id BEGIN struct_var_dcl NT$2 struct_more_var_dcl END RECORD SEMI
                {
                    ProgramContent RESULT = null;
                    // propagate RESULT from NT$2
                    RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    RESULT = Structures.getInstance().getDCL(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // NT$3 ::=
                {
                    Object RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Structures.getInstance().addDCL(dcl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3", 54, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // struct_more_var_dcl ::= struct_var_dcl NT$3 struct_more_var_dcl
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$3
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // struct_more_var_dcl ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI
                {
                    StructVarDCL RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    dcl.getDescriptor().setConst(true);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // struct_var_dcl ::= struct_var_dcl_part SEMI
                {
                    StructVarDCL RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    dcl.getDescriptor().setConst(false);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // struct_var_dcl_part ::= struct_type id struct_var_dcl_cnt
                {
                    StructVarDCL RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    dcl.getDescriptor().setType(t);
                    dcl.getDescriptor().setName(id);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // struct_var_dcl_cnt ::= ASSIGN const_val
                {
                    StructVarDCL RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Constant c = (Constant) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new StructVarDCL(c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // struct_var_dcl_cnt ::=
                {
                    StructVarDCL RESULT = null;
                    RESULT = new StructVarDCL(null);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // struct_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // struct_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // struct_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // struct_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // struct_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // struct_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // NT$4 ::=
                {
                    Block RESULT = null;
                    Blocks.getInstance().add(new Block());
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4", 55, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // block ::= BEGIN NT$4 block_content END
                {
                    Block RESULT = null;
                    // propagate RESULT from NT$4
                    RESULT = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = Blocks.getInstance().getCurrent();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // block_content ::= var_dcl block_content
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // block_content ::= statement block_content
                {
                    BlockContent RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // block_content ::=
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // loop_block ::= BEGIN loop_block_content END
                {
                    Block RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // loop_block_content ::= var_dcl loop_block_content
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // loop_block_content ::= loop_statement loop_block_content
                {
                    BlockContent RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // loop_block_content ::=
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // NT$5 ::=
                {
                    Object RESULT = null;
                    Variables.getInstance().setConstant(true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5", 56, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // var_dcl ::= CONST NT$5 var_dcl_part SEMI
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$5
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Variables.getInstance().setConstant(false);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // var_dcl ::= var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // NT$6 ::=
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Variables.getInstance().setType(t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // NT$7 ::=
                {
                    Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7", 58, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // var_dcl_part ::= variable_type NT$6 var_dcl_cnt NT$7 var_dcl_cnt_extension
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$7
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // var_dcl_cnt ::= single_var var_dcl_cnt_part
                {
                    BlockContent RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    DCL dcl = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new CompleteDCL(dcl, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // var_dcl_cnt_part ::= ASSIGN expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // var_dcl_cnt_part ::=
                {
                    Expression RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // NT$8 ::=
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // var_dcl_cnt_extension ::= COMA var_dcl_cnt NT$8 var_dcl_cnt_extension
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$8
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // var_dcl_cnt_extension ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // single_var ::= id array_part
                {
                    DCL RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    DCL dcl = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    dcl.setId(id);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // array_part ::= BRACKOP expr BRACKCL array_part
                {
                    DCL RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new ArrayDCL(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // array_part ::=
                {
                    DCL RESULT = null;
                    RESULT = new VariableDCL();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // statement ::= cond_stmt
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // statement ::= loop_stmt
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // statement ::= assignment SEMI
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Assignment stmt = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // statement ::= function_call SEMI
                {
                    BlockContent RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    FunctionAccess a = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new FunctionCall(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // statement ::= RETURN expr SEMI
                {
                    BlockContent RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Return(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // loop_statement ::= statement
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent stmt = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // loop_statement ::= BREAK SEMI
                {
                    BlockContent RESULT = null;
                    new Break();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // loop_statement ::= CONTINUE SEMI
                {
                    BlockContent RESULT = null;
                    new Continue();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // cond_stmt ::= IF PRANTOP expr PRANTCL block else_part
                {
                    Statement RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int ifbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int ifbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Block ifb = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ebleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int ebright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block eb = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new If(e, ifb, eb);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // NT$9 ::=
                {
                    Statement RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Cases.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9", 60, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // cond_stmt ::= SWITCH PRANTOP variable NT$9 PRANTCL OF COL BEGIN case_part DEFAULT COL block END
                {
                    Statement RESULT = null;
                    // propagate RESULT from NT$9
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).value;
                    int dbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Block db = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Switch(a, db);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 12)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // else_part ::= ELSE block
                {
                    Block RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // else_part ::=
                {
                    Block RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // NT$10 ::=
                {
                    Object RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    i = scanner.ICV;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10", 61, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // NT$11 ::=
                {
                    Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Cases.getInstance().addCase(i, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11", 62, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // case_part ::= CASE INT_LIT NT$10 COL block NT$11 case_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$11
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // case_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL loop_block
                {
                    Statement RESULT = null;
                    int inleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int inright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    Assignment in = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int upleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int upright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Assignment up = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new For(in, e, up, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // loop_stmt ::= REPEAT loop_block UNTIL PRANTOP expr PRANTCL SEMI
                {
                    Statement RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new Repeat(b, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // loop_stmt ::= FOREACH PRANTOP id IN id PRANTCL loop_block
                {
                    Statement RESULT = null;
                    int i1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int i1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String i1 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int i2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int i2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String i2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Foreach(i1, i2, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // loop_init_part ::= assignment
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // loop_init_part ::=
                {
                    Assignment RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // loop_cond_part ::= expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // loop_cond_part ::=
                {
                    Expression RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // loop_update_part ::= assignment
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // loop_update_part ::=
                {
                    Assignment RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // assignment ::= variable ASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DirectAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // assignment ::= variable PLUSASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PlusAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // assignment ::= variable MINUSASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MinusAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // assignment ::= variable MULTASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MultiplyAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // assignment ::= variable DIVASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DivisionAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // variable ::= var_access
                {
                    Access RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // variable ::= variable DOT id
                {
                    Access RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new StructureAccess(a);
                    RESULT.setDescriptor(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // var_access ::= id var_access_array_part
                {
                    Access RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    a.setDescriptor(id);
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // var_access_array_part ::= BRACKOP expr BRACKCL array_part
                {
                    Access RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new ArrayAccess(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // var_access_array_part ::=
                {
                    Access RESULT = null;
                    RESULT = new VariableAccess();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // expr ::= const_val
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Constant e = (Constant) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // expr ::= PRANTOP expr PRANTCL
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // expr ::= NOT expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Not(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // expr ::= BINOT expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryNot(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // expr ::= MINUS expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Uminus(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // expr ::= PREFMINUS2 variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrefixMinus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // expr ::= PREFPLUS2 variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrefixPlus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // expr ::= variable PREFMINUS2
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new PostfixMinus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // expr ::= variable PREFPLUS2
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new PostfixPlus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // expr ::= PRANTOP casting_type PRANTCL expr
                {
                    Expression RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Casting(t, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // expr ::= SIZEOF PRANTOP variable_type PRANTCL
                {
                    Expression RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new SizeOf(t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // expr ::= arithmatic_expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // expr ::= conditional_expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // expr ::= variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Variable(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // expr ::= function_call
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    FunctionAccess a = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ast.expr.function.FunctionCall(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // casting_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // casting_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // casting_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // casting_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // arithmatic_expr ::= expr MULT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Mult(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // arithmatic_expr ::= expr DIVIDE expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Div(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // arithmatic_expr ::= expr MOD expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Mod(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // arithmatic_expr ::= expr PLUS expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Add(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 142: // arithmatic_expr ::= expr MINUS expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Sub(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 143: // arithmatic_expr ::= expr BIAND expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryAnd(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 144: // arithmatic_expr ::= expr BIOR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryOr(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 145: // arithmatic_expr ::= expr BIEXOR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryXor(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 146: // conditional_expr ::= expr LT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LT(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 147: // conditional_expr ::= expr LTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 148: // conditional_expr ::= expr GT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GT(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 149: // conditional_expr ::= expr GTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 150: // conditional_expr ::= expr EQEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new EQ(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 151: // conditional_expr ::= expr NOTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 152: // conditional_expr ::= expr AND expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryAnd(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 153: // conditional_expr ::= expr OR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryOr(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 154: // const_val ::= TRUE
                {
                    Constant RESULT = null;
                    RESULT = new BooleanConstant(true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 155: // const_val ::= FALSE
                {
                    Constant RESULT = null;
                    RESULT = new BooleanConstant(false);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 156: // const_val ::= CHAR_LIT
                {
                    Constant RESULT = null;
                    RESULT = new CharConstant(scanner.current);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 157: // const_val ::= INT_LIT
                {
                    Constant RESULT = null;
                    RESULT = new IntegerConstant(scanner.ICV);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 158: // const_val ::= FLOAT_LIT
                {
                    Constant RESULT = null;
                    RESULT = new DoubleConstant(scanner.RCV);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 159: // const_val ::= STR_LIT
                {
                    Constant RESULT = null;
                    RESULT = new StringConstant(scanner.current);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 160: // NT$12 ::=
                {
                    FunctionAccess RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    FunctionAccessData.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12", 63, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 161: // function_call ::= id NT$12 PRANTOP parameters PRANTCL
                {
                    FunctionAccess RESULT = null;
                    // propagate RESULT from NT$12
                    RESULT = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    RESULT = new FunctionAccess();
                    RESULT.setDescriptor(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 162: // NT$13 ::=
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    FunctionAccessData.getInstance().addParameter(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13", 64, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 163: // parameters ::= expr NT$13 parameters_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$13
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 164: // parameters ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 165: // parameters_part ::= COMA parameters
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 166: // parameters_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 167: // id ::= ID
                {
                    String RESULT = null;
                    RESULT = scanner.current.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("id", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
