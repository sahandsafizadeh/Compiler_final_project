
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java.io.*;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return Symbol.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\177\000\002\002\004\000\002\002\004\000\002\002" +
                            "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
                            "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
                            "\002\005\003\000\002\006\006\000\002\006\011\000\002" +
                            "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
                            "\003\000\002\011\006\000\002\011\002\000\002\012\004" +
                            "\000\002\012\002\000\002\013\005\000\002\013\002\000" +
                            "\002\014\012\000\002\016\004\000\002\016\002\000\002" +
                            "\015\005\000\002\015\004\000\002\017\005\000\002\020" +
                            "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
                            "\000\002\021\005\000\002\022\004\000\002\022\004\000" +
                            "\002\022\002\000\002\023\005\000\002\024\004\000\002" +
                            "\024\004\000\002\024\002\000\002\025\005\000\002\025" +
                            "\004\000\002\026\005\000\002\027\004\000\002\030\004" +
                            "\000\002\030\002\000\002\031\005\000\002\031\002\000" +
                            "\002\032\004\000\002\033\006\000\002\033\002\000\002" +
                            "\034\003\000\002\034\003\000\002\034\004\000\002\034" +
                            "\004\000\002\034\005\000\002\035\003\000\002\035\004" +
                            "\000\002\035\004\000\002\036\010\000\002\036\016\000" +
                            "\002\037\004\000\002\037\002\000\002\040\007\000\002" +
                            "\040\002\000\002\041\013\000\002\041\011\000\002\041" +
                            "\011\000\002\042\003\000\002\042\002\000\002\043\003" +
                            "\000\002\043\002\000\002\044\003\000\002\044\002\000" +
                            "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
                            "\045\005\000\002\045\005\000\002\046\003\000\002\046" +
                            "\005\000\002\046\004\000\002\046\004\000\002\046\004" +
                            "\000\002\046\004\000\002\047\006\000\002\047\003\000" +
                            "\002\047\003\000\002\047\005\000\002\047\004\000\002" +
                            "\047\004\000\002\047\003\000\002\047\003\000\002\047" +
                            "\003\000\002\047\006\000\002\050\003\000\002\050\003" +
                            "\000\002\050\003\000\002\050\003\000\002\051\005\000" +
                            "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
                            "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
                            "\005\000\002\052\005\000\002\052\005\000\002\052\005" +
                            "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
                            "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
                            "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
                            "\003\000\002\053\003\000\002\053\003\000\002\054\006" +
                            "\000\002\055\004\000\002\055\002\000\002\056\004\000" +
                            "\002\056\002"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\374\000\034\002\uffff\005\022\006\024\007\007\010" +
                            "\006\011\005\012\020\013\027\014\017\020\004\021\021" +
                            "\022\012\116\016\001\002\000\026\006\024\007\007\010" +
                            "\006\011\005\012\020\013\027\014\017\015\207\021\021" +
                            "\116\016\001\002\000\006\073\uffe3\116\uffe3\001\002\000" +
                            "\006\073\uffa1\116\uffa1\001\002\000\006\073\uffa2\116\uffa2" +
                            "\001\002\000\034\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
                            "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc\021\ufffc" +
                            "\022\ufffc\116\ufffc\001\002\000\034\002\ufffe\005\ufffe\006" +
                            "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
                            "\020\ufffe\021\ufffe\022\ufffe\116\ufffe\001\002\000\026\006" +
                            "\024\007\007\010\006\011\005\012\020\013\027\014\017" +
                            "\015\207\021\021\116\016\001\002\000\034\002\ufffd\005" +
                            "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
                            "\014\ufffd\020\ufffd\021\ufffd\022\ufffd\116\ufffd\001\002\000" +
                            "\006\073\uffe5\116\uffe5\001\002\000\004\002\205\001\002" +
                            "\000\006\073\ufff8\116\ufff8\001\002\000\006\073\ufff9\116" +
                            "\ufff9\001\002\000\006\073\uffa0\116\uffa0\001\002\000\006" +
                            "\073\uffe2\116\uffe2\001\002\000\004\116\033\001\002\000" +
                            "\004\116\031\001\002\000\006\073\uffe4\116\uffe4\001\002" +
                            "\000\034\002\uffff\005\022\006\024\007\007\010\006\011" +
                            "\005\012\020\013\027\014\017\020\004\021\021\022\012" +
                            "\116\016\001\002\000\006\073\ufffa\116\ufffa\001\002\000" +
                            "\006\073\uff9f\116\uff9f\001\002\000\004\002\000\001\002" +
                            "\000\004\044\032\001\002\000\034\002\ufffb\005\ufffb\006" +
                            "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
                            "\020\ufffb\021\ufffb\022\ufffb\116\ufffb\001\002\000\004\023" +
                            "\034\001\002\000\022\004\040\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\021\021\001\002\000\024\004" +
                            "\040\006\024\007\007\010\006\011\005\012\020\013\027" +
                            "\021\021\024\uffe9\001\002\000\004\116\044\001\002\000" +
                            "\004\044\043\001\002\000\020\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\021\021\001\002\000\004\044" +
                            "\042\001\002\000\024\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
                            "\011\uffe8\012\uffe8\013\uffe8\021\uffe8\024\uffe8\001\002\000" +
                            "\024\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
                            "\013\uffe7\021\uffe7\024\uffe7\001\002\000\076\044\uffcf\046" +
                            "\uffcf\047\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf\056\uffcf" +
                            "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
                            "\uffcf\066\uffcf\067\uffcf\070\161\071\uffcf\073\uffcf\076\uffcf" +
                            "\077\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107" +
                            "\uffcf\110\uffcf\111\uffcf\001\002\000\010\044\uffd4\046\uffd4" +
                            "\057\054\001\002\000\006\044\uffd2\046\047\001\002\000" +
                            "\004\116\044\001\002\000\004\044\uffe6\001\002\000\006" +
                            "\044\uffd2\046\047\001\002\000\004\044\uffd3\001\002\000" +
                            "\006\044\uffd6\046\uffd6\001\002\000\034\016\060\017\067" +
                            "\043\055\050\075\052\066\072\064\076\073\077\071\112" +
                            "\077\113\065\114\072\115\076\116\061\001\002\000\004" +
                            "\072\174\001\002\000\050\044\uffd5\046\uffd5\051\113\052" +
                            "\103\054\110\055\105\056\111\060\107\061\114\062\116" +
                            "\063\117\064\102\065\122\066\121\067\115\106\112\107" +
                            "\104\110\120\111\106\001\002\000\054\044\uffa4\046\uffa4" +
                            "\051\uffa4\052\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061" +
                            "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
                            "\071\uffa4\073\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\001" +
                            "\002\000\054\044\uff8d\046\uff8d\051\uff8d\052\uff8d\054\uff8d" +
                            "\055\uff8d\056\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
                            "\uff8d\065\uff8d\066\uff8d\067\uff8d\071\uff8d\073\uff8d\106\uff8d" +
                            "\107\uff8d\110\uff8d\111\uff8d\001\002\000\066\044\uffcf\046" +
                            "\uffcf\047\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf\056\uffcf" +
                            "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
                            "\uffcf\067\uffcf\070\161\071\uffcf\072\162\073\uffcf\076\uffcf" +
                            "\077\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\001\002\000" +
                            "\074\044\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\054\uffb2" +
                            "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
                            "\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\071\uffb2\073\uffb2" +
                            "\076\uffb2\077\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106" +
                            "\uffb2\107\uffb2\110\uffb2\111\uffb2\001\002\000\054\044\uffab" +
                            "\046\uffab\051\uffab\052\uffab\054\uffab\055\uffab\056\uffab\060" +
                            "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
                            "\067\uffab\071\uffab\073\uffab\106\uffab\107\uffab\110\uffab\111" +
                            "\uffab\001\002\000\044\007\007\010\006\012\020\013\027" +
                            "\016\060\017\067\043\055\050\075\052\066\072\064\076" +
                            "\073\077\071\112\077\113\065\114\072\115\076\116\061" +
                            "\001\002\000\054\044\uff88\046\uff88\051\uff88\052\uff88\054" +
                            "\uff88\055\uff88\056\uff88\060\uff88\061\uff88\062\uff88\063\uff88" +
                            "\064\uff88\065\uff88\066\uff88\067\uff88\071\uff88\073\uff88\106" +
                            "\uff88\107\uff88\110\uff88\111\uff88\001\002\000\034\016\060" +
                            "\017\067\043\055\050\075\052\066\072\064\076\073\077" +
                            "\071\112\077\113\065\114\072\115\076\116\061\001\002" +
                            "\000\054\044\uff8c\046\uff8c\051\uff8c\052\uff8c\054\uff8c\055" +
                            "\uff8c\056\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c" +
                            "\065\uff8c\066\uff8c\067\uff8c\071\uff8c\073\uff8c\106\uff8c\107" +
                            "\uff8c\110\uff8c\111\uff8c\001\002\000\062\044\uffa5\046\uffa5" +
                            "\047\147\051\uffa5\052\uffa5\054\uffa5\055\uffa5\056\uffa5\060" +
                            "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
                            "\067\uffa5\071\uffa5\073\uffa5\076\145\077\146\106\uffa5\107" +
                            "\uffa5\110\uffa5\111\uffa5\001\002\000\010\076\073\077\071" +
                            "\116\044\001\002\000\054\044\uff8a\046\uff8a\051\uff8a\052" +
                            "\uff8a\054\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\062\uff8a" +
                            "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\071\uff8a\073" +
                            "\uff8a\106\uff8a\107\uff8a\110\uff8a\111\uff8a\001\002\000\010" +
                            "\076\073\077\071\116\044\001\002\000\054\044\uffa6\046" +
                            "\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6" +
                            "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
                            "\uffa6\071\uffa6\073\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6" +
                            "\001\002\000\034\016\060\017\067\043\055\050\075\052" +
                            "\066\072\064\076\073\077\071\112\077\113\065\114\072" +
                            "\115\076\116\061\001\002\000\054\044\uff89\046\uff89\051" +
                            "\uff89\052\uff89\054\uff89\055\uff89\056\uff89\060\uff89\061\uff89" +
                            "\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\071" +
                            "\uff89\073\uff89\106\uff89\107\uff89\110\uff89\111\uff89\001\002" +
                            "\000\054\044\uff8b\046\uff8b\051\uff8b\052\uff8b\054\uff8b\055" +
                            "\uff8b\056\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b" +
                            "\065\uff8b\066\uff8b\067\uff8b\071\uff8b\073\uff8b\106\uff8b\107" +
                            "\uff8b\110\uff8b\111\uff8b\001\002\000\054\044\uffaa\046\uffaa" +
                            "\051\uffaa\052\uffaa\054\uffaa\055\uffaa\056\uffaa\060\uffaa\061" +
                            "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
                            "\071\uffaa\073\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\001" +
                            "\002\000\054\044\uffa8\046\uffa8\051\uffa8\052\uffa8\054\uffa8" +
                            "\055\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\117\064" +
                            "\uffa8\065\uffa8\066\uffa8\067\uffa8\071\uffa8\073\uffa8\106\uffa8" +
                            "\107\uffa8\110\uffa8\111\uffa8\001\002\000\034\016\060\017" +
                            "\067\043\055\050\075\052\066\072\064\076\073\077\071" +
                            "\112\077\113\065\114\072\115\076\116\061\001\002\000" +
                            "\034\016\060\017\067\043\055\050\075\052\066\072\064" +
                            "\076\073\077\071\112\077\113\065\114\072\115\076\116" +
                            "\061\001\002\000\034\016\060\017\067\043\055\050\075" +
                            "\052\066\072\064\076\073\077\071\112\077\113\065\114" +
                            "\072\115\076\116\061\001\002\000\034\016\060\017\067" +
                            "\043\055\050\075\052\066\072\064\076\073\077\071\112" +
                            "\077\113\065\114\072\115\076\116\061\001\002\000\034" +
                            "\016\060\017\067\043\055\050\075\052\066\072\064\076" +
                            "\073\077\071\112\077\113\065\114\072\115\076\116\061" +
                            "\001\002\000\034\016\060\017\067\043\055\050\075\052" +
                            "\066\072\064\076\073\077\071\112\077\113\065\114\072" +
                            "\115\076\116\061\001\002\000\034\016\060\017\067\043" +
                            "\055\050\075\052\066\072\064\076\073\077\071\112\077" +
                            "\113\065\114\072\115\076\116\061\001\002\000\034\016" +
                            "\060\017\067\043\055\050\075\052\066\072\064\076\073" +
                            "\077\071\112\077\113\065\114\072\115\076\116\061\001" +
                            "\002\000\034\016\060\017\067\043\055\050\075\052\066" +
                            "\072\064\076\073\077\071\112\077\113\065\114\072\115" +
                            "\076\116\061\001\002\000\034\016\060\017\067\043\055" +
                            "\050\075\052\066\072\064\076\073\077\071\112\077\113" +
                            "\065\114\072\115\076\116\061\001\002\000\034\016\060" +
                            "\017\067\043\055\050\075\052\066\072\064\076\073\077" +
                            "\071\112\077\113\065\114\072\115\076\116\061\001\002" +
                            "\000\034\016\060\017\067\043\055\050\075\052\066\072" +
                            "\064\076\073\077\071\112\077\113\065\114\072\115\076" +
                            "\116\061\001\002\000\034\016\060\017\067\043\055\050" +
                            "\075\052\066\072\064\076\073\077\071\112\077\113\065" +
                            "\114\072\115\076\116\061\001\002\000\034\016\060\017" +
                            "\067\043\055\050\075\052\066\072\064\076\073\077\071" +
                            "\112\077\113\065\114\072\115\076\116\061\001\002\000" +
                            "\034\016\060\017\067\043\055\050\075\052\066\072\064" +
                            "\076\073\077\071\112\077\113\065\114\072\115\076\116" +
                            "\061\001\002\000\034\016\060\017\067\043\055\050\075" +
                            "\052\066\072\064\076\073\077\071\112\077\113\065\114" +
                            "\072\115\076\116\061\001\002\000\034\016\060\017\067" +
                            "\043\055\050\075\052\066\072\064\076\073\077\071\112" +
                            "\077\113\065\114\072\115\076\116\061\001\002\000\054" +
                            "\044\uff8f\046\uff8f\051\113\052\103\054\110\055\105\056" +
                            "\111\060\107\061\114\062\116\063\117\064\102\065\uff8f" +
                            "\066\121\067\115\071\uff8f\073\uff8f\106\112\107\104\110" +
                            "\120\111\106\001\002\000\054\044\uff96\046\uff96\051\113" +
                            "\052\103\054\110\055\105\056\111\060\uff96\061\uff96\062" +
                            "\uff96\063\117\064\uff96\065\uff96\066\uff96\067\uff96\071\uff96" +
                            "\073\uff96\106\uff96\107\uff96\110\uff96\111\uff96\001\002\000" +
                            "\054\044\uff95\046\uff95\051\113\052\103\054\110\055\105" +
                            "\056\111\060\uff95\061\uff95\062\uff95\063\117\064\uff95\065" +
                            "\uff95\066\uff95\067\uff95\071\uff95\073\uff95\106\uff95\107\uff95" +
                            "\110\uff95\111\uff95\001\002\000\054\044\uff8e\046\uff8e\051" +
                            "\uff8e\052\uff8e\054\uff8e\055\uff8e\056\uff8e\060\uff8e\061\uff8e" +
                            "\062\uff8e\063\117\064\uff8e\065\uff8e\066\uff8e\067\uff8e\071" +
                            "\uff8e\073\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\001\002" +
                            "\000\054\044\uff97\046\uff97\051\113\052\103\054\110\055" +
                            "\105\056\111\060\107\061\uff97\062\uff97\063\117\064\uff97" +
                            "\065\uff97\066\121\067\115\071\uff97\073\uff97\106\112\107" +
                            "\104\110\120\111\106\001\002\000\054\044\uff94\046\uff94" +
                            "\051\113\052\103\054\110\055\105\056\111\060\uff94\061" +
                            "\uff94\062\uff94\063\117\064\uff94\065\uff94\066\121\067\uff94" +
                            "\071\uff94\073\uff94\106\uff94\107\uff94\110\120\111\uff94\001" +
                            "\002\000\054\044\uff98\046\uff98\051\113\052\103\054\110" +
                            "\055\105\056\111\060\107\061\uff98\062\116\063\117\064" +
                            "\uff98\065\uff98\066\121\067\115\071\uff98\073\uff98\106\112" +
                            "\107\104\110\120\111\106\001\002\000\054\044\uff9b\046" +
                            "\uff9b\051\uff9b\052\uff9b\054\110\055\105\056\111\060\uff9b" +
                            "\061\uff9b\062\uff9b\063\117\064\uff9b\065\uff9b\066\uff9b\067" +
                            "\uff9b\071\uff9b\073\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b" +
                            "\001\002\000\054\044\uff91\046\uff91\051\113\052\103\054" +
                            "\110\055\105\056\111\060\uff91\061\uff91\062\uff91\063\117" +
                            "\064\uff91\065\uff91\066\121\067\115\071\uff91\073\uff91\106" +
                            "\uff91\107\uff91\110\120\111\106\001\002\000\054\044\uff9c" +
                            "\046\uff9c\051\uff9c\052\uff9c\054\uff9c\055\uff9c\056\uff9c\060" +
                            "\uff9c\061\uff9c\062\uff9c\063\117\064\uff9c\065\uff9c\066\uff9c" +
                            "\067\uff9c\071\uff9c\073\uff9c\106\uff9c\107\uff9c\110\uff9c\111" +
                            "\uff9c\001\002\000\054\044\uff9e\046\uff9e\051\uff9e\052\uff9e" +
                            "\054\uff9e\055\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
                            "\117\064\uff9e\065\uff9e\066\uff9e\067\uff9e\071\uff9e\073\uff9e" +
                            "\106\uff9e\107\uff9e\110\uff9e\111\uff9e\001\002\000\054\044" +
                            "\uff99\046\uff99\051\113\052\103\054\110\055\105\056\111" +
                            "\060\uff99\061\uff99\062\uff99\063\117\064\uff99\065\uff99\066" +
                            "\121\067\115\071\uff99\073\uff99\106\112\107\104\110\120" +
                            "\111\106\001\002\000\054\044\uff93\046\uff93\051\113\052" +
                            "\103\054\110\055\105\056\111\060\uff93\061\uff93\062\uff93" +
                            "\063\117\064\uff93\065\uff93\066\121\067\uff93\071\uff93\073" +
                            "\uff93\106\uff93\107\uff93\110\120\111\uff93\001\002\000\054" +
                            "\044\uff9d\046\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d\056" +
                            "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\117\064\uff9d\065\uff9d" +
                            "\066\uff9d\067\uff9d\071\uff9d\073\uff9d\106\uff9d\107\uff9d\110" +
                            "\uff9d\111\uff9d\001\002\000\054\044\uff92\046\uff92\051\113" +
                            "\052\103\054\110\055\105\056\111\060\uff92\061\uff92\062" +
                            "\uff92\063\117\064\uff92\065\uff92\066\121\067\115\071\uff92" +
                            "\073\uff92\106\uff92\107\uff92\110\120\111\106\001\002\000" +
                            "\054\044\uff9a\046\uff9a\051\uff9a\052\uff9a\054\110\055\105" +
                            "\056\111\060\uff9a\061\uff9a\062\uff9a\063\117\064\uff9a\065" +
                            "\uff9a\066\uff9a\067\uff9a\071\uff9a\073\uff9a\106\uff9a\107\uff9a" +
                            "\110\uff9a\111\uff9a\001\002\000\054\044\uff90\046\uff90\051" +
                            "\113\052\103\054\110\055\105\056\111\060\107\061\114" +
                            "\062\116\063\117\064\uff90\065\uff90\066\121\067\115\071" +
                            "\uff90\073\uff90\106\112\107\104\110\120\111\106\001\002" +
                            "\000\074\044\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\054" +
                            "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
                            "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\071\uffaf\073" +
                            "\uffaf\076\145\077\146\102\uffaf\103\uffaf\104\uffaf\105\uffaf" +
                            "\106\uffaf\107\uffaf\110\uffaf\111\uffaf\001\002\000\074\044" +
                            "\uffad\046\uffad\047\uffad\051\uffad\052\uffad\054\uffad\055\uffad" +
                            "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
                            "\uffad\065\uffad\066\uffad\067\uffad\071\uffad\073\uffad\076\uffad" +
                            "\077\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107" +
                            "\uffad\110\uffad\111\uffad\001\002\000\074\044\uffae\046\uffae" +
                            "\047\uffae\051\uffae\052\uffae\054\uffae\055\uffae\056\uffae\057" +
                            "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
                            "\066\uffae\067\uffae\071\uffae\073\uffae\076\uffae\077\uffae\102" +
                            "\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae" +
                            "\111\uffae\001\002\000\004\116\150\001\002\000\074\044" +
                            "\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1" +
                            "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
                            "\uffb1\065\uffb1\066\uffb1\067\uffb1\071\uffb1\073\uffb1\076\uffb1" +
                            "\077\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107" +
                            "\uffb1\110\uffb1\111\uffb1\001\002\000\074\044\uffb0\046\uffb0" +
                            "\047\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
                            "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
                            "\066\uffb0\067\uffb0\071\uffb0\073\uffb0\076\145\077\146\102" +
                            "\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0" +
                            "\111\uffb0\001\002\000\054\044\uffa7\046\uffa7\051\uffa7\052" +
                            "\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7" +
                            "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\071\uffa7\073" +
                            "\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\001\002\000\046" +
                            "\051\113\052\103\054\110\055\105\056\111\060\107\061" +
                            "\114\062\116\063\117\064\102\065\122\066\121\067\115" +
                            "\073\157\106\112\107\104\110\120\111\106\001\002\000" +
                            "\004\073\155\001\002\000\034\016\060\017\067\043\055" +
                            "\050\075\052\066\072\064\076\073\077\071\112\077\113" +
                            "\065\114\072\115\076\116\061\001\002\000\054\044\uffac" +
                            "\046\uffac\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac\060" +
                            "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
                            "\067\uffac\071\uffac\073\uffac\106\uffac\107\uffac\110\uffac\111" +
                            "\uffac\001\002\000\054\044\uffa9\046\uffa9\051\uffa9\052\uffa9" +
                            "\054\uffa9\055\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
                            "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\071\uffa9\073\uffa9" +
                            "\106\uffa9\107\uffa9\110\uffa9\111\uffa9\001\002\000\074\044" +
                            "\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1" +
                            "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
                            "\uffd1\065\uffd1\066\uffd1\067\uffd1\071\uffd1\073\uffd1\076\uffd1" +
                            "\077\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107" +
                            "\uffd1\110\uffd1\111\uffd1\001\002\000\034\016\060\017\067" +
                            "\043\055\050\075\052\066\072\064\076\073\077\071\112" +
                            "\077\113\065\114\072\115\076\116\061\001\002\000\036" +
                            "\016\060\017\067\043\055\050\075\052\066\072\064\073" +
                            "\uff85\076\073\077\071\112\077\113\065\114\072\115\076" +
                            "\116\061\001\002\000\050\046\166\051\113\052\103\054" +
                            "\110\055\105\056\111\060\107\061\114\062\116\063\117" +
                            "\064\102\065\122\066\121\067\115\073\uff83\106\112\107" +
                            "\104\110\120\111\106\001\002\000\004\073\165\001\002" +
                            "\000\054\044\uff87\046\uff87\051\uff87\052\uff87\054\uff87\055" +
                            "\uff87\056\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87" +
                            "\065\uff87\066\uff87\067\uff87\071\uff87\073\uff87\106\uff87\107" +
                            "\uff87\110\uff87\111\uff87\001\002\000\036\016\060\017\067" +
                            "\043\055\050\075\052\066\072\064\073\uff85\076\073\077" +
                            "\071\112\077\113\065\114\072\115\076\116\061\001\002" +
                            "\000\004\073\uff86\001\002\000\004\073\uff84\001\002\000" +
                            "\046\051\113\052\103\054\110\055\105\056\111\060\107" +
                            "\061\114\062\116\063\117\064\102\065\122\066\121\067" +
                            "\115\071\172\106\112\107\104\110\120\111\106\001\002" +
                            "\000\076\044\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\054" +
                            "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
                            "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\161\071" +
                            "\uffcf\073\uffcf\076\uffcf\077\uffcf\102\uffcf\103\uffcf\104\uffcf" +
                            "\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\001\002\000" +
                            "\074\044\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\054\uffd0" +
                            "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
                            "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\073\uffd0" +
                            "\076\uffd0\077\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106" +
                            "\uffd0\107\uffd0\110\uffd0\111\uffd0\001\002\000\024\006\024" +
                            "\007\007\010\006\011\005\012\020\013\027\014\017\021" +
                            "\021\116\016\001\002\000\004\073\176\001\002\000\054" +
                            "\044\uffa3\046\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\056" +
                            "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
                            "\066\uffa3\067\uffa3\071\uffa3\073\uffa3\106\uffa3\107\uffa3\110" +
                            "\uffa3\111\uffa3\001\002\000\024\004\040\006\024\007\007" +
                            "\010\006\011\005\012\020\013\027\021\021\024\uffe9\001" +
                            "\002\000\004\024\201\001\002\000\004\005\202\001\002" +
                            "\000\004\044\203\001\002\000\034\002\uffeb\005\uffeb\006" +
                            "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
                            "\020\uffeb\021\uffeb\022\uffeb\116\uffeb\001\002\000\004\024" +
                            "\uffea\001\002\000\004\002\001\001\002\000\004\116\211" +
                            "\001\002\000\004\116\ufff4\001\002\000\004\116\ufff5\001" +
                            "\002\000\004\072\212\001\002\000\026\006\024\007\007" +
                            "\010\006\011\005\012\020\013\027\014\017\021\021\073" +
                            "\ufff0\116\016\001\002\000\004\073\225\001\002\000\004" +
                            "\116\215\001\002\000\010\046\uffec\070\217\073\uffec\001" +
                            "\002\000\006\046\222\073\uffee\001\002\000\004\071\220" +
                            "\001\002\000\010\046\uffec\070\217\073\uffec\001\002\000" +
                            "\006\046\uffed\073\uffed\001\002\000\026\006\024\007\007" +
                            "\010\006\011\005\012\020\013\027\014\017\021\021\073" +
                            "\ufff0\116\016\001\002\000\004\073\ufff1\001\002\000\004" +
                            "\073\uffef\001\002\000\006\023\227\044\230\001\002\000" +
                            "\034\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
                            "\012\ufff6\013\ufff6\014\ufff6\020\ufff6\021\ufff6\022\ufff6\116" +
                            "\ufff6\001\002\000\050\004\244\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\014\017\021\021\024\uffde\025" +
                            "\236\027\235\033\251\034\242\036\252\042\233\076\073" +
                            "\077\071\116\240\001\002\000\034\002\ufff3\005\ufff3\006" +
                            "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
                            "\020\ufff3\021\ufff3\022\ufff3\116\ufff3\001\002\000\034\002" +
                            "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
                            "\013\ufff2\014\ufff2\020\ufff2\021\ufff2\022\ufff2\116\ufff2\001" +
                            "\002\000\050\004\244\006\024\007\007\010\006\011\005" +
                            "\012\020\013\027\014\017\021\021\024\uffde\025\236\027" +
                            "\235\033\251\034\242\036\252\042\233\076\073\077\071" +
                            "\116\240\001\002\000\034\016\060\017\067\043\055\050" +
                            "\075\052\066\072\064\076\073\077\071\112\077\113\065" +
                            "\114\072\115\076\116\061\001\002\000\004\044\370\001" +
                            "\002\000\004\072\350\001\002\000\004\072\341\001\002" +
                            "\000\004\024\340\001\002\000\030\047\uffcf\057\uffcf\070" +
                            "\161\072\162\076\uffcf\077\uffcf\102\uffcf\103\uffcf\104\uffcf" +
                            "\105\uffcf\116\ufff8\001\002\000\054\004\uffcd\006\uffcd\007" +
                            "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\021\uffcd" +
                            "\024\uffcd\025\uffcd\027\uffcd\033\uffcd\034\uffcd\036\uffcd\040" +
                            "\uffcd\041\uffcd\042\uffcd\076\uffcd\077\uffcd\116\uffcd\001\002" +
                            "\000\004\072\332\001\002\000\004\044\331\001\002\000" +
                            "\024\006\024\007\007\010\006\011\005\012\020\013\027" +
                            "\014\017\021\021\116\016\001\002\000\004\116\044\001" +
                            "\002\000\022\047\147\057\317\076\145\077\146\102\316" +
                            "\103\313\104\314\105\315\001\002\000\054\004\uffce\006" +
                            "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
                            "\021\uffce\024\uffce\025\uffce\027\uffce\033\uffce\034\uffce\036" +
                            "\uffce\040\uffce\041\uffce\042\uffce\076\uffce\077\uffce\116\uffce" +
                            "\001\002\000\004\044\312\001\002\000\004\072\277\001" +
                            "\002\000\004\023\256\001\002\000\050\004\244\006\024" +
                            "\007\007\010\006\011\005\012\020\013\027\014\017\021" +
                            "\021\024\uffde\025\236\027\235\033\251\034\242\036\252" +
                            "\042\233\076\073\077\071\116\240\001\002\000\004\024" +
                            "\uffe0\001\002\000\004\037\272\001\002\000\054\004\244" +
                            "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
                            "\017\021\021\024\uffda\025\236\027\235\033\251\034\242" +
                            "\036\252\040\263\041\257\042\233\076\073\077\071\116" +
                            "\240\001\002\000\004\044\271\001\002\000\054\004\uffc9" +
                            "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
                            "\uffc9\021\uffc9\024\uffc9\025\uffc9\027\uffc9\033\uffc9\034\uffc9" +
                            "\036\uffc9\040\uffc9\041\uffc9\042\uffc9\076\uffc9\077\uffc9\116" +
                            "\uffc9\001\002\000\054\004\244\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\014\017\021\021\024\uffda\025" +
                            "\236\027\235\033\251\034\242\036\252\040\263\041\257" +
                            "\042\233\076\073\077\071\116\240\001\002\000\004\024" +
                            "\267\001\002\000\004\044\266\001\002\000\054\004\244" +
                            "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
                            "\017\021\021\024\uffda\025\236\027\235\033\251\034\242" +
                            "\036\252\040\263\041\257\042\233\076\073\077\071\116" +
                            "\240\001\002\000\004\024\uffdc\001\002\000\054\004\uffc8" +
                            "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
                            "\uffc8\021\uffc8\024\uffc8\025\uffc8\027\uffc8\033\uffc8\034\uffc8" +
                            "\036\uffc8\040\uffc8\041\uffc8\042\uffc8\076\uffc8\077\uffc8\116" +
                            "\uffc8\001\002\000\056\004\uffdd\006\uffdd\007\uffdd\010\uffdd" +
                            "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\021\uffdd\024\uffdd\025" +
                            "\uffdd\027\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd" +
                            "\041\uffdd\042\uffdd\076\uffdd\077\uffdd\116\uffdd\001\002\000" +
                            "\004\024\uffdb\001\002\000\054\004\uffc7\006\uffc7\007\uffc7" +
                            "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\021\uffc7\024" +
                            "\uffc7\025\uffc7\027\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7" +
                            "\041\uffc7\042\uffc7\076\uffc7\077\uffc7\116\uffc7\001\002\000" +
                            "\004\072\273\001\002\000\034\016\060\017\067\043\055" +
                            "\050\075\052\066\072\064\076\073\077\071\112\077\113" +
                            "\065\114\072\115\076\116\061\001\002\000\046\051\113" +
                            "\052\103\054\110\055\105\056\111\060\107\061\114\062" +
                            "\116\063\117\064\102\065\122\066\121\067\115\073\275" +
                            "\106\112\107\104\110\120\111\106\001\002\000\004\044" +
                            "\276\001\002\000\054\004\uffbf\006\uffbf\007\uffbf\010\uffbf" +
                            "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\021\uffbf\024\uffbf\025" +
                            "\uffbf\027\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf" +
                            "\042\uffbf\076\uffbf\077\uffbf\116\uffbf\001\002\000\012\044" +
                            "\uffbc\076\073\077\071\116\044\001\002\000\004\044\302" +
                            "\001\002\000\004\044\uffbd\001\002\000\036\016\060\017" +
                            "\067\043\055\044\uffba\050\075\052\066\072\064\076\073" +
                            "\077\071\112\077\113\065\114\072\115\076\116\061\001" +
                            "\002\000\046\044\uffbb\051\113\052\103\054\110\055\105" +
                            "\056\111\060\107\061\114\062\116\063\117\064\102\065" +
                            "\122\066\121\067\115\106\112\107\104\110\120\111\106" +
                            "\001\002\000\004\044\305\001\002\000\012\073\uffb8\076" +
                            "\073\077\071\116\044\001\002\000\004\073\310\001\002" +
                            "\000\004\073\uffb9\001\002\000\004\023\256\001\002\000" +
                            "\054\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
                            "\013\uffc0\014\uffc0\021\uffc0\024\uffc0\025\uffc0\027\uffc0\033" +
                            "\uffc0\034\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\076\uffc0" +
                            "\077\uffc0\116\uffc0\001\002\000\054\004\uffd8\006\uffd8\007" +
                            "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\021\uffd8" +
                            "\024\uffd8\025\uffd8\027\uffd8\033\uffd8\034\uffd8\036\uffd8\040" +
                            "\uffd8\041\uffd8\042\uffd8\076\uffd8\077\uffd8\116\uffd8\001\002" +
                            "\000\034\016\060\017\067\043\055\050\075\052\066\072" +
                            "\064\076\073\077\071\112\077\113\065\114\072\115\076" +
                            "\116\061\001\002\000\034\016\060\017\067\043\055\050" +
                            "\075\052\066\072\064\076\073\077\071\112\077\113\065" +
                            "\114\072\115\076\116\061\001\002\000\034\016\060\017" +
                            "\067\043\055\050\075\052\066\072\064\076\073\077\071" +
                            "\112\077\113\065\114\072\115\076\116\061\001\002\000" +
                            "\034\016\060\017\067\043\055\050\075\052\066\072\064" +
                            "\076\073\077\071\112\077\113\065\114\072\115\076\116" +
                            "\061\001\002\000\034\016\060\017\067\043\055\050\075" +
                            "\052\066\072\064\076\073\077\071\112\077\113\065\114" +
                            "\072\115\076\116\061\001\002\000\050\044\uffb7\051\113" +
                            "\052\103\054\110\055\105\056\111\060\107\061\114\062" +
                            "\116\063\117\064\102\065\122\066\121\067\115\073\uffb7" +
                            "\106\112\107\104\110\120\111\106\001\002\000\050\044" +
                            "\uffb6\051\113\052\103\054\110\055\105\056\111\060\107" +
                            "\061\114\062\116\063\117\064\102\065\122\066\121\067" +
                            "\115\073\uffb6\106\112\107\104\110\120\111\106\001\002" +
                            "\000\050\044\uffb3\051\113\052\103\054\110\055\105\056" +
                            "\111\060\107\061\114\062\116\063\117\064\102\065\122" +
                            "\066\121\067\115\073\uffb3\106\112\107\104\110\120\111" +
                            "\106\001\002\000\050\044\uffb4\051\113\052\103\054\110" +
                            "\055\105\056\111\060\107\061\114\062\116\063\117\064" +
                            "\102\065\122\066\121\067\115\073\uffb4\106\112\107\104" +
                            "\110\120\111\106\001\002\000\050\044\uffb5\051\113\052" +
                            "\103\054\110\055\105\056\111\060\107\061\114\062\116" +
                            "\063\117\064\102\065\122\066\121\067\115\073\uffb5\106" +
                            "\112\107\104\110\120\111\106\001\002\000\006\044\uffd2" +
                            "\046\047\001\002\000\004\044\uffd7\001\002\000\004\044" +
                            "\330\001\002\000\054\004\uffd9\006\uffd9\007\uffd9\010\uffd9" +
                            "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\024\uffd9\025" +
                            "\uffd9\027\uffd9\033\uffd9\034\uffd9\036\uffd9\040\uffd9\041\uffd9" +
                            "\042\uffd9\076\uffd9\077\uffd9\116\uffd9\001\002\000\054\004" +
                            "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
                            "\014\uffcc\021\uffcc\024\uffcc\025\uffcc\027\uffcc\033\uffcc\034" +
                            "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\076\uffcc\077\uffcc" +
                            "\116\uffcc\001\002\000\004\116\333\001\002\000\004\035" +
                            "\334\001\002\000\004\116\335\001\002\000\004\073\336" +
                            "\001\002\000\004\023\256\001\002\000\054\004\uffbe\006" +
                            "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe" +
                            "\021\uffbe\024\uffbe\025\uffbe\027\uffbe\033\uffbe\034\uffbe\036" +
                            "\uffbe\040\uffbe\041\uffbe\042\uffbe\076\uffbe\077\uffbe\116\uffbe" +
                            "\001\002\000\072\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
                            "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\020\uffe1" +
                            "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031" +
                            "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\040\uffe1\041\uffe1" +
                            "\042\uffe1\076\uffe1\077\uffe1\116\uffe1\001\002\000\034\016" +
                            "\060\017\067\043\055\050\075\052\066\072\064\076\073" +
                            "\077\071\112\077\113\065\114\072\115\076\116\061\001" +
                            "\002\000\046\051\113\052\103\054\110\055\105\056\111" +
                            "\060\107\061\114\062\116\063\117\064\102\065\122\066" +
                            "\121\067\115\073\343\106\112\107\104\110\120\111\106" +
                            "\001\002\000\004\023\227\001\002\000\056\004\uffc3\006" +
                            "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
                            "\021\uffc3\024\uffc3\025\uffc3\026\345\027\uffc3\033\uffc3\034" +
                            "\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\076\uffc3\077\uffc3" +
                            "\116\uffc3\001\002\000\004\023\227\001\002\000\054\004" +
                            "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
                            "\014\uffc6\021\uffc6\024\uffc6\025\uffc6\027\uffc6\033\uffc6\034" +
                            "\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\076\uffc6\077\uffc6" +
                            "\116\uffc6\001\002\000\054\004\uffc4\006\uffc4\007\uffc4\010" +
                            "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\021\uffc4\024\uffc4" +
                            "\025\uffc4\027\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\041" +
                            "\uffc4\042\uffc4\076\uffc4\077\uffc4\116\uffc4\001\002\000\004" +
                            "\116\351\001\002\000\004\073\352\001\002\000\004\030" +
                            "\353\001\002\000\004\045\354\001\002\000\004\023\355" +
                            "\001\002\000\006\031\357\032\uffc1\001\002\000\004\032" +
                            "\364\001\002\000\004\114\360\001\002\000\004\045\361" +
                            "\001\002\000\004\023\227\001\002\000\006\031\357\032" +
                            "\uffc1\001\002\000\004\032\uffc2\001\002\000\004\045\365" +
                            "\001\002\000\004\023\227\001\002\000\004\024\367\001" +
                            "\002\000\054\004\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
                            "\012\uffc5\013\uffc5\014\uffc5\021\uffc5\024\uffc5\025\uffc5\027" +
                            "\uffc5\033\uffc5\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5" +
                            "\076\uffc5\077\uffc5\116\uffc5\001\002\000\054\004\uffcb\006" +
                            "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
                            "\021\uffcb\024\uffcb\025\uffcb\027\uffcb\033\uffcb\034\uffcb\036" +
                            "\uffcb\040\uffcb\041\uffcb\042\uffcb\076\uffcb\077\uffcb\116\uffcb" +
                            "\001\002\000\046\044\372\051\113\052\103\054\110\055" +
                            "\105\056\111\060\107\061\114\062\116\063\117\064\102" +
                            "\065\122\066\121\067\115\106\112\107\104\110\120\111" +
                            "\106\001\002\000\054\004\uffca\006\uffca\007\uffca\010\uffca" +
                            "\011\uffca\012\uffca\013\uffca\014\uffca\021\uffca\024\uffca\025" +
                            "\uffca\027\uffca\033\uffca\034\uffca\036\uffca\040\uffca\041\uffca" +
                            "\042\uffca\076\uffca\077\uffca\116\uffca\001\002\000\004\024" +
                            "\uffdf\001\002\000\004\116\375\001\002\000\004\044\376" +
                            "\001\002\000\034\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
                            "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\020\ufff7\021\ufff7" +
                            "\022\ufff7\116\ufff7\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\374\000\022\002\014\003\024\004\010\005\022\006" +
                            "\012\014\007\020\025\050\013\001\001\000\012\005\207" +
                            "\007\373\020\025\050\013\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\012\005\207\007\205\020\025\050\013\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\022\002\027\003\024\004\010\005\022\006" +
                            "\012\014\007\020\025\050\013\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\012\015\034\017\036" +
                            "\020\035\050\013\001\001\000\014\015\176\016\177\017" +
                            "\036\020\035\050\013\001\001\000\006\027\045\032\044" +
                            "\001\001\000\002\001\001\000\010\017\040\020\035\050" +
                            "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\033\157\001\001\000\004\030\052\001" +
                            "\001\000\004\031\047\001\001\000\006\027\050\032\044" +
                            "\001\001\000\002\001\001\000\004\031\051\001\001\000" +
                            "\002\001\001\000\002\001\001\000\020\032\061\046\067" +
                            "\047\055\051\062\052\077\053\073\054\056\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\033\157\001\001\000\002\001\001\000" +
                            "\002\001\001\000\022\032\061\046\067\047\152\050\153" +
                            "\051\062\052\077\053\073\054\056\001\001\000\002\001" +
                            "\001\000\020\032\061\046\067\047\151\051\062\052\077" +
                            "\053\073\054\056\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\032\061\046\150\001\001\000\002\001\001" +
                            "\000\006\032\061\046\143\001\001\000\002\001\001\000" +
                            "\020\032\061\046\067\047\100\051\062\052\077\053\073" +
                            "\054\056\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\020\032\061\046\067" +
                            "\047\142\051\062\052\077\053\073\054\056\001\001\000" +
                            "\020\032\061\046\067\047\141\051\062\052\077\053\073" +
                            "\054\056\001\001\000\020\032\061\046\067\047\140\051" +
                            "\062\052\077\053\073\054\056\001\001\000\020\032\061" +
                            "\046\067\047\137\051\062\052\077\053\073\054\056\001" +
                            "\001\000\020\032\061\046\067\047\136\051\062\052\077" +
                            "\053\073\054\056\001\001\000\020\032\061\046\067\047" +
                            "\135\051\062\052\077\053\073\054\056\001\001\000\020" +
                            "\032\061\046\067\047\134\051\062\052\077\053\073\054" +
                            "\056\001\001\000\020\032\061\046\067\047\133\051\062" +
                            "\052\077\053\073\054\056\001\001\000\020\032\061\046" +
                            "\067\047\132\051\062\052\077\053\073\054\056\001\001" +
                            "\000\020\032\061\046\067\047\131\051\062\052\077\053" +
                            "\073\054\056\001\001\000\020\032\061\046\067\047\130" +
                            "\051\062\052\077\053\073\054\056\001\001\000\020\032" +
                            "\061\046\067\047\127\051\062\052\077\053\073\054\056" +
                            "\001\001\000\020\032\061\046\067\047\126\051\062\052" +
                            "\077\053\073\054\056\001\001\000\020\032\061\046\067" +
                            "\047\125\051\062\052\077\053\073\054\056\001\001\000" +
                            "\020\032\061\046\067\047\124\051\062\052\077\053\073" +
                            "\054\056\001\001\000\020\032\061\046\067\047\123\051" +
                            "\062\052\077\053\073\054\056\001\001\000\020\032\061" +
                            "\046\067\047\122\051\062\052\077\053\073\054\056\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\020\032\061\046\067\047\155\051\062\052\077" +
                            "\053\073\054\056\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\020\032\061\046\067\047\170" +
                            "\051\062\052\077\053\073\054\056\001\001\000\022\032" +
                            "\061\046\067\047\162\051\062\052\077\053\073\054\056" +
                            "\055\163\001\001\000\004\056\166\001\001\000\002\001" +
                            "\001\000\002\001\001\000\022\032\061\046\067\047\162" +
                            "\051\062\052\077\053\073\054\056\055\167\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\033\172\001\001\000\002\001\001\000\010\005\174\020" +
                            "\025\050\013\001\001\000\002\001\001\000\002\001\001" +
                            "\000\014\015\176\016\203\017\036\020\035\050\013\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\012\005\213\011\212\020\025\050\013\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\013\215" +
                            "\001\001\000\004\012\222\001\001\000\002\001\001\000" +
                            "\004\013\220\001\001\000\002\001\001\000\012\005\213" +
                            "\011\223\020\025\050\013\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\010\225\021\230\001\001\000\002" +
                            "\001\001\000\034\005\244\020\025\022\236\025\252\026" +
                            "\247\032\061\034\231\036\246\041\240\045\242\046\245" +
                            "\050\013\054\233\001\001\000\002\001\001\000\002\001" +
                            "\001\000\034\005\244\020\025\022\372\025\252\026\247" +
                            "\032\061\034\231\036\246\041\240\045\242\046\245\050" +
                            "\013\054\233\001\001\000\020\032\061\046\067\047\370" +
                            "\051\062\052\077\053\073\054\056\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\033\157\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\005\244\020\025\026\326" +
                            "\050\013\001\001\000\006\027\324\032\044\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\023\254\001\001\000\034\005\244\020" +
                            "\025\022\253\025\252\026\247\032\061\034\231\036\246" +
                            "\041\240\045\242\046\245\050\013\054\233\001\001\000" +
                            "\002\001\001\000\002\001\001\000\036\005\244\020\025" +
                            "\024\261\025\263\026\247\032\061\034\257\035\260\036" +
                            "\246\041\240\045\242\046\245\050\013\054\233\001\001" +
                            "\000\002\001\001\000\002\001\001\000\036\005\244\020" +
                            "\025\024\267\025\263\026\247\032\061\034\257\035\260" +
                            "\036\246\041\240\045\242\046\245\050\013\054\233\001" +
                            "\001\000\002\001\001\000\002\001\001\000\036\005\244" +
                            "\020\025\024\264\025\263\026\247\032\061\034\257\035" +
                            "\260\036\246\041\240\045\242\046\245\050\013\054\233" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\020\032\061\046\067\047\273\051\062\052\077\053" +
                            "\073\054\056\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\012\032\061\042\277\045\300\046" +
                            "\245\001\001\000\002\001\001\000\002\001\001\000\022" +
                            "\032\061\043\303\046\067\047\302\051\062\052\077\053" +
                            "\073\054\056\001\001\000\002\001\001\000\002\001\001" +
                            "\000\012\032\061\044\305\045\306\046\245\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\023\310\001\001" +
                            "\000\002\001\001\000\002\001\001\000\020\032\061\046" +
                            "\067\047\323\051\062\052\077\053\073\054\056\001\001" +
                            "\000\020\032\061\046\067\047\322\051\062\052\077\053" +
                            "\073\054\056\001\001\000\020\032\061\046\067\047\321" +
                            "\051\062\052\077\053\073\054\056\001\001\000\020\032" +
                            "\061\046\067\047\320\051\062\052\077\053\073\054\056" +
                            "\001\001\000\020\032\061\046\067\047\317\051\062\052" +
                            "\077\053\073\054\056\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\031\325\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\023\336\001\001\000\002\001\001\000\002\001" +
                            "\001\000\020\032\061\046\067\047\341\051\062\052\077" +
                            "\053\073\054\056\001\001\000\002\001\001\000\004\021" +
                            "\343\001\001\000\004\037\345\001\001\000\004\021\346" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\040\355\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\021\361" +
                            "\001\001\000\004\040\362\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\021\365\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return scanner.next_token();
    }


    private Scanner scanner;

    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= program EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // program ::= program_part program
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // program ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // program_part ::= global_var_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // program_part ::= func_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // program_part ::= struct_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // global_var_dcl ::= variable_type ID SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // variable_type ::= struct_type
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // variable_type ::= STRING
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // variable_type ::= ID
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // func_dcl ::= EXTERN function_type ID SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // func_dcl ::= FUNCTION function_type ID PRANTOP arguments PRANTCL func_dcl_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // function_type ::= variable_type
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // function_type ::= VOID
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // func_dcl_part ::= SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // func_dcl_part ::= block
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // arguments ::= variable_type ID function_array_dcl arguments_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // arguments ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // arguments_part ::= COMA arguments
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // arguments_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // function_array_dcl ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // struct_dcl ::= RECORD ID BEGIN struct_var_dcl struct_more_var_dcl END RECORD SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // struct_more_var_dcl ::= struct_var_dcl struct_more_var_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // struct_more_var_dcl ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // struct_var_dcl ::= struct_var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // struct_var_dcl_part ::= struct_type var_dcl_cnt var_dcl_cnt_extension
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // struct_type ::= casting_type
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // struct_type ::= BOOL
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // struct_type ::= LONG
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // struct_type ::= AUTO
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // block ::= BEGIN block_content END
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // block_content ::= var_dcl block_content
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // block_content ::= statement block_content
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // block_content ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // loop_block ::= BEGIN loop_block_content END
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // loop_block_content ::= var_dcl loop_block_content
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // loop_block_content ::= loop_statement loop_block_content
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // loop_block_content ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // var_dcl ::= CONST var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // var_dcl ::= var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // var_dcl_part ::= variable_type var_dcl_cnt var_dcl_cnt_extension
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // var_dcl_cnt ::= single_var var_dcl_cnt_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // var_dcl_cnt_part ::= ASSIGN expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // var_dcl_cnt_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // var_dcl_cnt_extension ::= COMA var_dcl_cnt var_dcl_cnt_extension
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // var_dcl_cnt_extension ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // single_var ::= ID array_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // array_part ::= BRACKOP expr BRACKCL array_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // array_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // statement ::= cond_stmt
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // statement ::= loop_stmt
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // statement ::= assignment SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // statement ::= function_call SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // statement ::= RETURN expr SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // loop_statement ::= statement
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // loop_statement ::= BREAK SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // loop_statement ::= CONTINUE SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // cond_stmt ::= IF PRANTOP expr PRANTCL block else_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // cond_stmt ::= SWITCH PRANTOP ID PRANTCL OF COL BEGIN case_part DEFAULT COL block END
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 11)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // else_part ::= ELSE block
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // else_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // case_part ::= CASE INT_LIT COL block case_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // case_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL loop_block
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // loop_stmt ::= REPEAT loop_block UNTIL PRANTOP expr PRANTCL SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // loop_stmt ::= FOREACH PRANTOP ID IN ID PRANTCL loop_block
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // loop_init_part ::= assignment
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // loop_init_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // loop_cond_part ::= expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // loop_cond_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // loop_update_part ::= assignment
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // loop_update_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // assignment ::= variable ASSIGN expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // assignment ::= variable PLUSASSIGN expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // assignment ::= variable MINUSASSIGN expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // assignment ::= variable MULTASSIGN expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // assignment ::= variable DIVASSIGN expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // variable ::= single_var
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // variable ::= variable DOT ID
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // variable ::= PREFMINUS2 variable
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // variable ::= PREFPLUS2 variable
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // variable ::= variable PREFMINUS2
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // variable ::= variable PREFPLUS2
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // expr ::= PRANTOP casting_type PRANTCL expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // expr ::= arithmatic_expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // expr ::= conditional_expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // expr ::= PRANTOP expr PRANTCL
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // expr ::= BINOT expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // expr ::= MINUS expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // expr ::= const_val
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // expr ::= variable
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // expr ::= function_call
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // expr ::= SIZEOF PRANTOP variable_type PRANTCL
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // casting_type ::= CHAR
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // casting_type ::= INT
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // casting_type ::= FLOAT
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // casting_type ::= DOUBLE
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // arithmatic_expr ::= expr MULT expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // arithmatic_expr ::= expr DIVIDE expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // arithmatic_expr ::= expr MOD expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // arithmatic_expr ::= expr PLUS expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // arithmatic_expr ::= expr MINUS expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // arithmatic_expr ::= expr BIAND expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // arithmatic_expr ::= expr BIOR expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // arithmatic_expr ::= expr BIEXOR expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // conditional_expr ::= expr LT expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // conditional_expr ::= expr LTEQ expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // conditional_expr ::= expr GT expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // conditional_expr ::= expr GTEQ expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // conditional_expr ::= expr EQEQ expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // conditional_expr ::= expr NOTEQ expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // conditional_expr ::= expr AND expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // conditional_expr ::= expr OR expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // conditional_expr ::= expr NOT expr
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // const_val ::= TRUE
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // const_val ::= FALSE
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // const_val ::= CHAR_LIT
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // const_val ::= INT_LIT
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // const_val ::= FLOAT_LIT
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // const_val ::= STR_LIT
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // function_call ::= ID PRANTOP parameters PRANTCL
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // parameters ::= expr parameters_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // parameters ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // parameters_part ::= COMA parameters
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // parameters_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
