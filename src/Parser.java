
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.access.Access;
import ast.access.ArrayAccess;
import ast.access.VariableAccess;
import ast.block.Block;
import ast.block.BlockContent;
import ast.block.Blocks;
import ast.block.stmt.Break;
import ast.block.stmt.Continue;
import ast.block.stmt.Statement;
import ast.block.stmt.assignment.*;
import ast.block.stmt.conditional.casestmt.Cases;
import ast.block.stmt.conditional.casestmt.Switch;
import ast.block.stmt.conditional.ifstmt.If;
import ast.block.stmt.loop.For;
import ast.block.stmt.loop.Foreach;
import ast.block.stmt.loop.Repeat;
import ast.dcl.CompleteDCL;
import ast.dcl.DCL;
import ast.dcl.variable.Variables;
import ast.dcl.array.ArrayDCL;
import ast.dcl.variable.*;
import ast.expr.Expression;
import ast.expr.binary.arithmatic.*;
import ast.expr.binary.logical.*;
import ast.expr.constant.*;
import ast.expr.other.Casting;
import ast.expr.other.SizeOf;
import ast.expr.other.Variable;
import ast.expr.unary.arithmatic.*;
import ast.expr.unary.logical.Not;
import ast.program.Program;
import ast.program.ProgramContent;
import ast.program.global.GlobalVarDCL;
import ast.type.Type;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return Symbol.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\215\000\002\002\004\000\002\002\004\000\002\002" +
                            "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
                            "\000\002\061\002\000\002\004\006\000\002\005\003\000" +
                            "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
                            "\006\011\000\002\007\003\000\002\007\003\000\002\010" +
                            "\003\000\002\010\003\000\002\011\006\000\002\011\002" +
                            "\000\002\012\004\000\002\012\002\000\002\013\005\000" +
                            "\002\013\002\000\002\014\012\000\002\016\004\000\002" +
                            "\016\002\000\002\015\005\000\002\015\004\000\002\017" +
                            "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
                            "\000\002\020\003\000\002\021\005\000\002\022\004\000" +
                            "\002\022\004\000\002\022\002\000\002\023\005\000\002" +
                            "\024\004\000\002\024\004\000\002\024\002\000\002\062" +
                            "\002\000\002\025\006\000\002\025\004\000\002\063\002" +
                            "\000\002\064\002\000\002\026\007\000\002\027\004\000" +
                            "\002\030\004\000\002\030\002\000\002\065\002\000\002" +
                            "\031\006\000\002\031\002\000\002\066\002\000\002\032" +
                            "\005\000\002\033\006\000\002\033\002\000\002\034\003" +
                            "\000\002\034\003\000\002\034\004\000\002\034\004\000" +
                            "\002\034\005\000\002\035\003\000\002\035\004\000\002" +
                            "\035\004\000\002\036\010\000\002\067\002\000\002\036" +
                            "\017\000\002\037\004\000\002\037\002\000\002\070\002" +
                            "\000\002\071\002\000\002\040\011\000\002\040\002\000" +
                            "\002\041\013\000\002\041\011\000\002\072\002\000\002" +
                            "\073\002\000\002\041\013\000\002\042\003\000\002\042" +
                            "\002\000\002\043\003\000\002\043\002\000\002\044\003" +
                            "\000\002\044\002\000\002\045\005\000\002\045\005\000" +
                            "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
                            "\046\003\000\002\046\005\000\002\047\004\000\002\050" +
                            "\006\000\002\050\002\000\002\051\003\000\002\051\005" +
                            "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
                            "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
                            "\051\004\000\002\051\006\000\002\051\006\000\002\051" +
                            "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
                            "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
                            "\002\052\003\000\002\053\005\000\002\053\005\000\002" +
                            "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
                            "\005\000\002\053\005\000\002\053\005\000\002\054\005" +
                            "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
                            "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
                            "\054\005\000\002\055\003\000\002\055\003\000\002\055" +
                            "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
                            "\000\002\056\006\000\002\057\004\000\002\057\002\000" +
                            "\002\060\004\000\002\060\002"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u010c\000\034\002\uffff\005\022\006\024\007\007\010" +
                            "\006\011\005\012\020\013\027\014\017\020\004\021\021" +
                            "\022\012\116\016\001\002\000\026\006\024\007\007\010" +
                            "\006\011\005\012\020\013\027\014\017\015\213\021\021" +
                            "\116\016\001\002\000\006\073\uffe2\116\uffe2\001\002\000" +
                            "\006\073\uff92\116\uff92\001\002\000\006\073\uff93\116\uff93" +
                            "\001\002\000\034\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
                            "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc\021\ufffc" +
                            "\022\ufffc\116\ufffc\001\002\000\034\002\ufffe\005\ufffe\006" +
                            "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
                            "\020\ufffe\021\ufffe\022\ufffe\116\ufffe\001\002\000\026\006" +
                            "\024\007\007\010\006\011\005\012\020\013\027\014\017" +
                            "\015\213\021\021\116\016\001\002\000\034\002\ufffd\005" +
                            "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
                            "\014\ufffd\020\ufffd\021\ufffd\022\ufffd\116\ufffd\001\002\000" +
                            "\006\073\uffe4\116\uffe4\001\002\000\004\002\211\001\002" +
                            "\000\006\073\ufff7\116\ufff7\001\002\000\006\073\ufff8\116" +
                            "\ufff8\001\002\000\006\073\uff91\116\uff91\001\002\000\006" +
                            "\073\uffe1\116\uffe1\001\002\000\004\116\034\001\002\000" +
                            "\004\116\031\001\002\000\006\073\uffe3\116\uffe3\001\002" +
                            "\000\034\002\uffff\005\022\006\024\007\007\010\006\011" +
                            "\005\012\020\013\027\014\017\020\004\021\021\022\012" +
                            "\116\016\001\002\000\006\073\ufff9\116\ufff9\001\002\000" +
                            "\006\073\uff90\116\uff90\001\002\000\004\002\000\001\002" +
                            "\000\004\044\ufffb\001\002\000\004\044\033\001\002\000" +
                            "\034\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
                            "\012\ufffa\013\ufffa\014\ufffa\020\ufffa\021\ufffa\022\ufffa\116" +
                            "\ufffa\001\002\000\004\023\035\001\002\000\022\004\041" +
                            "\006\024\007\007\010\006\011\005\012\020\013\027\021" +
                            "\021\001\002\000\024\004\041\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\021\021\024\uffe8\001\002\000" +
                            "\004\116\045\001\002\000\004\044\044\001\002\000\020" +
                            "\006\024\007\007\010\006\011\005\012\020\013\027\021" +
                            "\021\001\002\000\004\044\043\001\002\000\024\004\uffe7" +
                            "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\021" +
                            "\uffe7\024\uffe7\001\002\000\024\004\uffe6\006\uffe6\007\uffe6" +
                            "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\021\uffe6\024\uffe6\001" +
                            "\002\000\012\044\uffcc\046\uffcc\057\uffcc\070\uffcc\001\002" +
                            "\000\010\044\uffd0\046\uffd0\057\051\001\002\000\004\044" +
                            "\uffe5\001\002\000\006\044\uffd2\046\uffd2\001\002\000\036" +
                            "\016\056\017\063\043\052\050\072\052\064\063\054\072" +
                            "\061\076\067\077\070\112\074\113\062\114\066\115\073" +
                            "\116\057\001\002\000\004\072\176\001\002\000\046\044" +
                            "\uffd1\046\uffd1\051\111\052\100\054\107\055\103\056\106" +
                            "\060\105\061\112\062\114\064\101\065\117\066\115\067" +
                            "\113\106\110\107\102\110\116\111\104\001\002\000\036" +
                            "\016\056\017\063\043\052\050\072\052\064\063\054\072" +
                            "\061\076\067\077\070\112\074\113\062\114\066\115\073" +
                            "\116\057\001\002\000\052\044\uff94\046\uff94\051\uff94\052" +
                            "\uff94\054\uff94\055\uff94\056\uff94\060\uff94\061\uff94\062\uff94" +
                            "\064\uff94\065\uff94\066\uff94\067\uff94\071\uff94\073\uff94\106" +
                            "\uff94\107\uff94\110\uff94\111\uff94\001\002\000\052\044\uff7f" +
                            "\046\uff7f\051\uff7f\052\uff7f\054\uff7f\055\uff7f\056\uff7f\060" +
                            "\uff7f\061\uff7f\062\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f" +
                            "\071\uff7f\073\uff7f\106\uff7f\107\uff7f\110\uff7f\111\uff7f\001" +
                            "\002\000\064\044\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3" +
                            "\054\uffa3\055\uffa3\056\uffa3\060\uffa3\061\uffa3\062\uffa3\064" +
                            "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\145\071\uffa3\072\166" +
                            "\073\uffa3\076\uffa3\077\uffa3\106\uffa3\107\uffa3\110\uffa3\111" +
                            "\uffa3\001\002\000\052\044\uff97\046\uff97\051\uff97\052\uff97" +
                            "\054\uff97\055\uff97\056\uff97\060\uff97\061\uff97\062\uff97\064" +
                            "\uff97\065\uff97\066\uff97\067\uff97\071\uff97\073\uff97\106\uff97" +
                            "\107\uff97\110\uff97\111\uff97\001\002\000\046\007\007\010" +
                            "\006\012\020\013\027\016\056\017\063\043\052\050\072" +
                            "\052\064\063\054\072\061\076\067\077\070\112\074\113" +
                            "\062\114\066\115\073\116\057\001\002\000\052\044\uff7a" +
                            "\046\uff7a\051\uff7a\052\uff7a\054\uff7a\055\uff7a\056\uff7a\060" +
                            "\uff7a\061\uff7a\062\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a" +
                            "\071\uff7a\073\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\001" +
                            "\002\000\052\044\uff7e\046\uff7e\051\uff7e\052\uff7e\054\uff7e" +
                            "\055\uff7e\056\uff7e\060\uff7e\061\uff7e\062\uff7e\064\uff7e\065" +
                            "\uff7e\066\uff7e\067\uff7e\071\uff7e\073\uff7e\106\uff7e\107\uff7e" +
                            "\110\uff7e\111\uff7e\001\002\000\036\016\056\017\063\043" +
                            "\052\050\072\052\064\063\054\072\061\076\067\077\070" +
                            "\112\074\113\062\114\066\115\073\116\057\001\002\000" +
                            "\060\044\uff95\046\uff95\047\142\051\uff95\052\uff95\054\uff95" +
                            "\055\uff95\056\uff95\060\uff95\061\uff95\062\uff95\064\uff95\065" +
                            "\uff95\066\uff95\067\uff95\071\uff95\073\uff95\076\156\077\157" +
                            "\106\uff95\107\uff95\110\uff95\111\uff95\001\002\000\052\044" +
                            "\uff7c\046\uff7c\051\uff7c\052\uff7c\054\uff7c\055\uff7c\056\uff7c" +
                            "\060\uff7c\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067" +
                            "\uff7c\071\uff7c\073\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c" +
                            "\001\002\000\004\116\140\001\002\000\004\116\140\001" +
                            "\002\000\052\044\uffa2\046\uffa2\051\uffa2\052\uffa2\054\uffa2" +
                            "\055\uffa2\056\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\065" +
                            "\uffa2\066\uffa2\067\uffa2\071\uffa2\073\uffa2\106\uffa2\107\uffa2" +
                            "\110\uffa2\111\uffa2\001\002\000\036\016\056\017\063\043" +
                            "\052\050\072\052\064\063\054\072\061\076\067\077\070" +
                            "\112\074\113\062\114\066\115\073\116\057\001\002\000" +
                            "\052\044\uff7b\046\uff7b\051\uff7b\052\uff7b\054\uff7b\055\uff7b" +
                            "\056\uff7b\060\uff7b\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066" +
                            "\uff7b\067\uff7b\071\uff7b\073\uff7b\106\uff7b\107\uff7b\110\uff7b" +
                            "\111\uff7b\001\002\000\052\044\uff7d\046\uff7d\051\uff7d\052" +
                            "\uff7d\054\uff7d\055\uff7d\056\uff7d\060\uff7d\061\uff7d\062\uff7d" +
                            "\064\uff7d\065\uff7d\066\uff7d\067\uff7d\071\uff7d\073\uff7d\106" +
                            "\uff7d\107\uff7d\110\uff7d\111\uff7d\001\002\000\052\044\uff96" +
                            "\046\uff96\051\uff96\052\uff96\054\uff96\055\uff96\056\uff96\060" +
                            "\uff96\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
                            "\071\uff96\073\uff96\106\uff96\107\uff96\110\uff96\111\uff96\001" +
                            "\002\000\072\044\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7" +
                            "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
                            "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\071\uffa7\073\uffa7" +
                            "\076\uffa7\077\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106" +
                            "\uffa7\107\uffa7\110\uffa7\111\uffa7\001\002\000\052\044\uff9f" +
                            "\046\uff9f\051\uff9f\052\uff9f\054\uff9f\055\uff9f\056\uff9f\060" +
                            "\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f" +
                            "\071\uff9f\073\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\001" +
                            "\002\000\036\016\056\017\063\043\052\050\072\052\064" +
                            "\063\054\072\061\076\067\077\070\112\074\113\062\114" +
                            "\066\115\073\116\057\001\002\000\036\016\056\017\063" +
                            "\043\052\050\072\052\064\063\054\072\061\076\067\077" +
                            "\070\112\074\113\062\114\066\115\073\116\057\001\002" +
                            "\000\036\016\056\017\063\043\052\050\072\052\064\063" +
                            "\054\072\061\076\067\077\070\112\074\113\062\114\066" +
                            "\115\073\116\057\001\002\000\036\016\056\017\063\043" +
                            "\052\050\072\052\064\063\054\072\061\076\067\077\070" +
                            "\112\074\113\062\114\066\115\073\116\057\001\002\000" +
                            "\036\016\056\017\063\043\052\050\072\052\064\063\054" +
                            "\072\061\076\067\077\070\112\074\113\062\114\066\115" +
                            "\073\116\057\001\002\000\036\016\056\017\063\043\052" +
                            "\050\072\052\064\063\054\072\061\076\067\077\070\112" +
                            "\074\113\062\114\066\115\073\116\057\001\002\000\036" +
                            "\016\056\017\063\043\052\050\072\052\064\063\054\072" +
                            "\061\076\067\077\070\112\074\113\062\114\066\115\073" +
                            "\116\057\001\002\000\036\016\056\017\063\043\052\050" +
                            "\072\052\064\063\054\072\061\076\067\077\070\112\074" +
                            "\113\062\114\066\115\073\116\057\001\002\000\036\016" +
                            "\056\017\063\043\052\050\072\052\064\063\054\072\061" +
                            "\076\067\077\070\112\074\113\062\114\066\115\073\116" +
                            "\057\001\002\000\036\016\056\017\063\043\052\050\072" +
                            "\052\064\063\054\072\061\076\067\077\070\112\074\113" +
                            "\062\114\066\115\073\116\057\001\002\000\036\016\056" +
                            "\017\063\043\052\050\072\052\064\063\054\072\061\076" +
                            "\067\077\070\112\074\113\062\114\066\115\073\116\057" +
                            "\001\002\000\036\016\056\017\063\043\052\050\072\052" +
                            "\064\063\054\072\061\076\067\077\070\112\074\113\062" +
                            "\114\066\115\073\116\057\001\002\000\036\016\056\017" +
                            "\063\043\052\050\072\052\064\063\054\072\061\076\067" +
                            "\077\070\112\074\113\062\114\066\115\073\116\057\001" +
                            "\002\000\036\016\056\017\063\043\052\050\072\052\064" +
                            "\063\054\072\061\076\067\077\070\112\074\113\062\114" +
                            "\066\115\073\116\057\001\002\000\036\016\056\017\063" +
                            "\043\052\050\072\052\064\063\054\072\061\076\067\077" +
                            "\070\112\074\113\062\114\066\115\073\116\057\001\002" +
                            "\000\036\016\056\017\063\043\052\050\072\052\064\063" +
                            "\054\072\061\076\067\077\070\112\074\113\062\114\066" +
                            "\115\073\116\057\001\002\000\052\044\uff80\046\uff80\051" +
                            "\111\052\100\054\107\055\103\056\106\060\105\061\112" +
                            "\062\114\064\101\065\uff80\066\115\067\113\071\uff80\073" +
                            "\uff80\106\110\107\102\110\116\111\104\001\002\000\052" +
                            "\044\uff86\046\uff86\051\111\052\100\054\107\055\103\056" +
                            "\106\060\uff86\061\uff86\062\uff86\064\uff86\065\uff86\066\uff86" +
                            "\067\uff86\071\uff86\073\uff86\106\uff86\107\uff86\110\uff86\111" +
                            "\uff86\001\002\000\052\044\uff87\046\uff87\051\111\052\100" +
                            "\054\107\055\103\056\106\060\uff87\061\uff87\062\uff87\064" +
                            "\uff87\065\uff87\066\uff87\067\uff87\071\uff87\073\uff87\106\uff87" +
                            "\107\uff87\110\uff87\111\uff87\001\002\000\052\044\uff88\046" +
                            "\uff88\051\111\052\100\054\107\055\103\056\106\060\105" +
                            "\061\uff88\062\uff88\064\uff88\065\uff88\066\115\067\113\071" +
                            "\uff88\073\uff88\106\110\107\102\110\116\111\104\001\002" +
                            "\000\052\044\uff85\046\uff85\051\111\052\100\054\107\055" +
                            "\103\056\106\060\uff85\061\uff85\062\uff85\064\uff85\065\uff85" +
                            "\066\115\067\uff85\071\uff85\073\uff85\106\uff85\107\uff85\110" +
                            "\116\111\uff85\001\002\000\052\044\uff89\046\uff89\051\111" +
                            "\052\100\054\107\055\103\056\106\060\105\061\uff89\062" +
                            "\114\064\uff89\065\uff89\066\115\067\113\071\uff89\073\uff89" +
                            "\106\110\107\102\110\116\111\104\001\002\000\052\044" +
                            "\uff8c\046\uff8c\051\uff8c\052\uff8c\054\107\055\103\056\106" +
                            "\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
                            "\uff8c\071\uff8c\073\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c" +
                            "\001\002\000\052\044\uff82\046\uff82\051\111\052\100\054" +
                            "\107\055\103\056\106\060\uff82\061\uff82\062\uff82\064\uff82" +
                            "\065\uff82\066\115\067\113\071\uff82\073\uff82\106\uff82\107" +
                            "\uff82\110\116\111\104\001\002\000\052\044\uff8f\046\uff8f" +
                            "\051\uff8f\052\uff8f\054\uff8f\055\uff8f\056\uff8f\060\uff8f\061" +
                            "\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\071\uff8f" +
                            "\073\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f\001\002\000" +
                            "\052\044\uff8d\046\uff8d\051\uff8d\052\uff8d\054\uff8d\055\uff8d" +
                            "\056\uff8d\060\uff8d\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066" +
                            "\uff8d\067\uff8d\071\uff8d\073\uff8d\106\uff8d\107\uff8d\110\uff8d" +
                            "\111\uff8d\001\002\000\052\044\uff8a\046\uff8a\051\111\052" +
                            "\100\054\107\055\103\056\106\060\uff8a\061\uff8a\062\uff8a" +
                            "\064\uff8a\065\uff8a\066\115\067\113\071\uff8a\073\uff8a\106" +
                            "\110\107\102\110\116\111\104\001\002\000\052\044\uff84" +
                            "\046\uff84\051\111\052\100\054\107\055\103\056\106\060" +
                            "\uff84\061\uff84\062\uff84\064\uff84\065\uff84\066\115\067\uff84" +
                            "\071\uff84\073\uff84\106\uff84\107\uff84\110\116\111\uff84\001" +
                            "\002\000\052\044\uff8e\046\uff8e\051\uff8e\052\uff8e\054\uff8e" +
                            "\055\uff8e\056\uff8e\060\uff8e\061\uff8e\062\uff8e\064\uff8e\065" +
                            "\uff8e\066\uff8e\067\uff8e\071\uff8e\073\uff8e\106\uff8e\107\uff8e" +
                            "\110\uff8e\111\uff8e\001\002\000\052\044\uff83\046\uff83\051" +
                            "\111\052\100\054\107\055\103\056\106\060\uff83\061\uff83" +
                            "\062\uff83\064\uff83\065\uff83\066\115\067\113\071\uff83\073" +
                            "\uff83\106\uff83\107\uff83\110\116\111\104\001\002\000\052" +
                            "\044\uff81\046\uff81\051\111\052\100\054\107\055\103\056" +
                            "\106\060\105\061\112\062\114\064\uff81\065\uff81\066\115" +
                            "\067\113\071\uff81\073\uff81\106\110\107\102\110\116\111" +
                            "\104\001\002\000\052\044\uff8b\046\uff8b\051\uff8b\052\uff8b" +
                            "\054\107\055\103\056\106\060\uff8b\061\uff8b\062\uff8b\064" +
                            "\uff8b\065\uff8b\066\uff8b\067\uff8b\071\uff8b\073\uff8b\106\uff8b" +
                            "\107\uff8b\110\uff8b\111\uff8b\001\002\000\070\044\uffa3\046" +
                            "\uffa3\047\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3" +
                            "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066" +
                            "\uffa3\067\uffa3\070\145\071\uffa3\073\uffa3\102\uffa3\103\uffa3" +
                            "\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\001" +
                            "\002\000\054\044\uff9d\046\uff9d\047\142\051\uff9d\052\uff9d" +
                            "\054\uff9d\055\uff9d\056\uff9d\060\uff9d\061\uff9d\062\uff9d\064" +
                            "\uff9d\065\uff9d\066\uff9d\067\uff9d\071\uff9d\073\uff9d\106\uff9d" +
                            "\107\uff9d\110\uff9d\111\uff9d\001\002\000\004\116\143\001" +
                            "\002\000\072\044\uffa6\046\uffa6\047\uffa6\051\uffa6\052\uffa6" +
                            "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
                            "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\071\uffa6\073\uffa6" +
                            "\076\uffa6\077\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106" +
                            "\uffa6\107\uffa6\110\uffa6\111\uffa6\001\002\000\072\044\uffa5" +
                            "\046\uffa5\047\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\056" +
                            "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064\uffa5\065\uffa5" +
                            "\066\uffa5\067\uffa5\071\uffa5\073\uffa5\076\uffa5\077\uffa5\102" +
                            "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5" +
                            "\111\uffa5\001\002\000\036\016\056\017\063\043\052\050" +
                            "\072\052\064\063\054\072\061\076\067\077\070\112\074" +
                            "\113\062\114\066\115\073\116\057\001\002\000\044\051" +
                            "\111\052\100\054\107\055\103\056\106\060\105\061\112" +
                            "\062\114\064\101\065\117\066\115\067\113\071\147\106" +
                            "\110\107\102\110\116\111\104\001\002\000\074\044\uffc9" +
                            "\046\uffc9\047\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\056" +
                            "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9" +
                            "\066\uffc9\067\uffc9\070\151\071\uffc9\073\uffc9\076\uffc9\077" +
                            "\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9" +
                            "\110\uffc9\111\uffc9\001\002\000\072\044\uffa4\046\uffa4\047" +
                            "\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
                            "\060\uffa4\061\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067" +
                            "\uffa4\071\uffa4\073\uffa4\076\uffa4\077\uffa4\102\uffa4\103\uffa4" +
                            "\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\001" +
                            "\002\000\036\016\056\017\063\043\052\050\072\052\064" +
                            "\063\054\072\061\076\067\077\070\112\074\113\062\114" +
                            "\066\115\073\116\057\001\002\000\044\051\111\052\100" +
                            "\054\107\055\103\056\106\060\105\061\112\062\114\064" +
                            "\101\065\117\066\115\067\113\071\153\106\110\107\102" +
                            "\110\116\111\104\001\002\000\074\044\uffc9\046\uffc9\047" +
                            "\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
                            "\060\uffc9\061\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067" +
                            "\uffc9\070\151\071\uffc9\073\uffc9\076\uffc9\077\uffc9\102\uffc9" +
                            "\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111" +
                            "\uffc9\001\002\000\072\044\uffca\046\uffca\047\uffca\051\uffca" +
                            "\052\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
                            "\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca\071\uffca" +
                            "\073\uffca\076\uffca\077\uffca\102\uffca\103\uffca\104\uffca\105" +
                            "\uffca\106\uffca\107\uffca\110\uffca\111\uffca\001\002\000\054" +
                            "\044\uff9c\046\uff9c\047\142\051\uff9c\052\uff9c\054\uff9c\055" +
                            "\uff9c\056\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\065\uff9c" +
                            "\066\uff9c\067\uff9c\071\uff9c\073\uff9c\106\uff9c\107\uff9c\110" +
                            "\uff9c\111\uff9c\001\002\000\052\044\uff9a\046\uff9a\051\uff9a" +
                            "\052\uff9a\054\uff9a\055\uff9a\056\uff9a\060\uff9a\061\uff9a\062" +
                            "\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\071\uff9a\073\uff9a" +
                            "\106\uff9a\107\uff9a\110\uff9a\111\uff9a\001\002\000\052\044" +
                            "\uff9b\046\uff9b\051\uff9b\052\uff9b\054\uff9b\055\uff9b\056\uff9b" +
                            "\060\uff9b\061\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
                            "\uff9b\071\uff9b\073\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b" +
                            "\001\002\000\052\044\uff9e\046\uff9e\051\uff9e\052\uff9e\054" +
                            "\uff9e\055\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e" +
                            "\065\uff9e\066\uff9e\067\uff9e\071\uff9e\073\uff9e\106\uff9e\107" +
                            "\uff9e\110\uff9e\111\uff9e\001\002\000\044\051\111\052\100" +
                            "\054\107\055\103\056\106\060\105\061\112\062\114\064" +
                            "\101\065\117\066\115\067\113\073\165\106\110\107\102" +
                            "\110\116\111\104\001\002\000\004\073\163\001\002\000" +
                            "\036\016\056\017\063\043\052\050\072\052\064\063\054" +
                            "\072\061\076\067\077\070\112\074\113\062\114\066\115" +
                            "\073\116\057\001\002\000\052\044\uff99\046\uff99\051\uff99" +
                            "\052\uff99\054\uff99\055\uff99\056\uff99\060\uff99\061\uff99\062" +
                            "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\071\uff99\073\uff99" +
                            "\106\uff99\107\uff99\110\uff99\111\uff99\001\002\000\052\044" +
                            "\uffa1\046\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1\056\uffa1" +
                            "\060\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
                            "\uffa1\071\uffa1\073\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1" +
                            "\001\002\000\040\016\056\017\063\043\052\050\072\052" +
                            "\064\063\054\072\061\073\uff77\076\067\077\070\112\074" +
                            "\113\062\114\066\115\073\116\057\001\002\000\046\046" +
                            "\172\051\111\052\100\054\107\055\103\056\106\060\105" +
                            "\061\112\062\114\064\101\065\117\066\115\067\113\073" +
                            "\uff75\106\110\107\102\110\116\111\104\001\002\000\004" +
                            "\073\171\001\002\000\052\044\uff79\046\uff79\051\uff79\052" +
                            "\uff79\054\uff79\055\uff79\056\uff79\060\uff79\061\uff79\062\uff79" +
                            "\064\uff79\065\uff79\066\uff79\067\uff79\071\uff79\073\uff79\106" +
                            "\uff79\107\uff79\110\uff79\111\uff79\001\002\000\040\016\056" +
                            "\017\063\043\052\050\072\052\064\063\054\072\061\073" +
                            "\uff77\076\067\077\070\112\074\113\062\114\066\115\073" +
                            "\116\057\001\002\000\004\073\uff78\001\002\000\004\073" +
                            "\uff76\001\002\000\052\044\uffa0\046\uffa0\051\uffa0\052\uffa0" +
                            "\054\uffa0\055\uffa0\056\uffa0\060\uffa0\061\uffa0\062\uffa0\064" +
                            "\uffa0\065\uffa0\066\uffa0\067\uffa0\071\uffa0\073\uffa0\106\uffa0" +
                            "\107\uffa0\110\uffa0\111\uffa0\001\002\000\024\006\024\007" +
                            "\007\010\006\011\005\012\020\013\027\014\017\021\021" +
                            "\116\016\001\002\000\004\073\200\001\002\000\052\044" +
                            "\uff98\046\uff98\051\uff98\052\uff98\054\uff98\055\uff98\056\uff98" +
                            "\060\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067" +
                            "\uff98\071\uff98\073\uff98\106\uff98\107\uff98\110\uff98\111\uff98" +
                            "\001\002\000\012\044\uffc9\046\uffc9\057\uffc9\070\151\001" +
                            "\002\000\010\044\uffcb\046\uffcb\057\uffcb\001\002\000\024" +
                            "\004\041\006\024\007\007\010\006\011\005\012\020\013" +
                            "\027\021\021\024\uffe8\001\002\000\004\024\205\001\002" +
                            "\000\004\005\206\001\002\000\004\044\207\001\002\000" +
                            "\034\002\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
                            "\012\uffea\013\uffea\014\uffea\020\uffea\021\uffea\022\uffea\116" +
                            "\uffea\001\002\000\004\024\uffe9\001\002\000\004\002\001" +
                            "\001\002\000\004\116\215\001\002\000\004\116\ufff3\001" +
                            "\002\000\004\116\ufff4\001\002\000\004\072\216\001\002" +
                            "\000\026\006\024\007\007\010\006\011\005\012\020\013" +
                            "\027\014\017\021\021\073\uffef\116\016\001\002\000\004" +
                            "\073\231\001\002\000\004\116\221\001\002\000\010\046" +
                            "\uffeb\070\223\073\uffeb\001\002\000\006\046\226\073\uffed" +
                            "\001\002\000\004\071\224\001\002\000\010\046\uffeb\070" +
                            "\223\073\uffeb\001\002\000\006\046\uffec\073\uffec\001\002" +
                            "\000\026\006\024\007\007\010\006\011\005\012\020\013" +
                            "\027\014\017\021\021\073\uffef\116\016\001\002\000\004" +
                            "\073\ufff0\001\002\000\004\073\uffee\001\002\000\006\023" +
                            "\233\044\234\001\002\000\034\002\ufff5\005\ufff5\006\ufff5" +
                            "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\020" +
                            "\ufff5\021\ufff5\022\ufff5\116\ufff5\001\002\000\044\004\251" +
                            "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
                            "\017\021\021\024\uffdd\025\242\027\241\033\255\034\246" +
                            "\036\256\042\237\116\244\001\002\000\034\002\ufff2\005" +
                            "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
                            "\014\ufff2\020\ufff2\021\ufff2\022\ufff2\116\ufff2\001\002\000" +
                            "\034\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
                            "\012\ufff1\013\ufff1\014\ufff1\020\ufff1\021\ufff1\022\ufff1\116" +
                            "\ufff1\001\002\000\044\004\251\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\014\017\021\021\024\uffdd\025" +
                            "\242\027\241\033\255\034\246\036\256\042\237\116\244" +
                            "\001\002\000\036\016\056\017\063\043\052\050\072\052" +
                            "\064\063\054\072\061\076\067\077\070\112\074\113\062" +
                            "\114\066\115\073\116\057\001\002\000\004\044\u0108\001" +
                            "\002\000\004\072\365\001\002\000\004\072\356\001\002" +
                            "\000\004\024\355\001\002\000\024\047\uffa3\057\uffa3\070" +
                            "\145\072\166\102\uffa3\103\uffa3\104\uffa3\105\uffa3\116\ufff7" +
                            "\001\002\000\050\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
                            "\uffc7\012\uffc7\013\uffc7\014\uffc7\021\uffc7\024\uffc7\025\uffc7" +
                            "\027\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7\041\uffc7\042" +
                            "\uffc7\116\uffc7\001\002\000\004\072\345\001\002\000\004" +
                            "\044\344\001\002\000\050\004\uffc8\006\uffc8\007\uffc8\010" +
                            "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\021\uffc8\024\uffc8" +
                            "\025\uffc8\027\uffc8\033\uffc8\034\uffc8\036\uffc8\040\uffc8\041" +
                            "\uffc8\042\uffc8\116\uffc8\001\002\000\024\006\uffd8\007\uffd8" +
                            "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\021\uffd8\116" +
                            "\uffd8\001\002\000\004\116\uffd5\001\002\000\016\047\142" +
                            "\057\323\102\322\103\317\104\320\105\321\001\002\000" +
                            "\004\044\316\001\002\000\004\072\303\001\002\000\004" +
                            "\023\262\001\002\000\044\004\251\006\024\007\007\010" +
                            "\006\011\005\012\020\013\027\014\017\021\021\024\uffdd" +
                            "\025\242\027\241\033\255\034\246\036\256\042\237\116" +
                            "\244\001\002\000\004\024\uffdf\001\002\000\004\037\276" +
                            "\001\002\000\050\004\251\006\024\007\007\010\006\011" +
                            "\005\012\020\013\027\014\017\021\021\024\uffd9\025\242" +
                            "\027\241\033\255\034\246\036\256\040\267\041\263\042" +
                            "\237\116\244\001\002\000\004\044\275\001\002\000\050" +
                            "\004\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
                            "\uffc3\014\uffc3\021\uffc3\024\uffc3\025\uffc3\027\uffc3\033\uffc3" +
                            "\034\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\116\uffc3\001" +
                            "\002\000\050\004\251\006\024\007\007\010\006\011\005" +
                            "\012\020\013\027\014\017\021\021\024\uffd9\025\242\027" +
                            "\241\033\255\034\246\036\256\040\267\041\263\042\237" +
                            "\116\244\001\002\000\004\024\273\001\002\000\004\044" +
                            "\272\001\002\000\050\004\251\006\024\007\007\010\006" +
                            "\011\005\012\020\013\027\014\017\021\021\024\uffd9\025" +
                            "\242\027\241\033\255\034\246\036\256\040\267\041\263" +
                            "\042\237\116\244\001\002\000\004\024\uffdb\001\002\000" +
                            "\050\004\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
                            "\013\uffc2\014\uffc2\021\uffc2\024\uffc2\025\uffc2\027\uffc2\033" +
                            "\uffc2\034\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\116\uffc2" +
                            "\001\002\000\052\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
                            "\uffdc\012\uffdc\013\uffdc\014\uffdc\021\uffdc\024\uffdc\025\uffdc" +
                            "\027\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
                            "\uffdc\042\uffdc\116\uffdc\001\002\000\004\024\uffda\001\002" +
                            "\000\050\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
                            "\uffc1\013\uffc1\014\uffc1\021\uffc1\024\uffc1\025\uffc1\027\uffc1" +
                            "\033\uffc1\034\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\116" +
                            "\uffc1\001\002\000\004\072\277\001\002\000\036\016\056" +
                            "\017\063\043\052\050\072\052\064\063\054\072\061\076" +
                            "\067\077\070\112\074\113\062\114\066\115\073\116\057" +
                            "\001\002\000\044\051\111\052\100\054\107\055\103\056" +
                            "\106\060\105\061\112\062\114\064\101\065\117\066\115" +
                            "\067\113\073\301\106\110\107\102\110\116\111\104\001" +
                            "\002\000\004\044\302\001\002\000\050\004\uffb6\006\uffb6" +
                            "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\021" +
                            "\uffb6\024\uffb6\025\uffb6\027\uffb6\033\uffb6\034\uffb6\036\uffb6" +
                            "\040\uffb6\041\uffb6\042\uffb6\116\uffb6\001\002\000\006\044" +
                            "\uffb1\116\140\001\002\000\004\044\306\001\002\000\004" +
                            "\044\uffb2\001\002\000\040\016\056\017\063\043\052\044" +
                            "\uffaf\050\072\052\064\063\054\072\061\076\067\077\070" +
                            "\112\074\113\062\114\066\115\073\116\057\001\002\000" +
                            "\044\044\uffb0\051\111\052\100\054\107\055\103\056\106" +
                            "\060\105\061\112\062\114\064\101\065\117\066\115\067" +
                            "\113\106\110\107\102\110\116\111\104\001\002\000\004" +
                            "\044\311\001\002\000\006\073\uffad\116\140\001\002\000" +
                            "\004\073\314\001\002\000\004\073\uffae\001\002\000\004" +
                            "\023\262\001\002\000\050\004\uffb7\006\uffb7\007\uffb7\010" +
                            "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\021\uffb7\024\uffb7" +
                            "\025\uffb7\027\uffb7\033\uffb7\034\uffb7\036\uffb7\040\uffb7\041" +
                            "\uffb7\042\uffb7\116\uffb7\001\002\000\050\004\uffd6\006\uffd6" +
                            "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\021" +
                            "\uffd6\024\uffd6\025\uffd6\027\uffd6\033\uffd6\034\uffd6\036\uffd6" +
                            "\040\uffd6\041\uffd6\042\uffd6\116\uffd6\001\002\000\036\016" +
                            "\056\017\063\043\052\050\072\052\064\063\054\072\061" +
                            "\076\067\077\070\112\074\113\062\114\066\115\073\116" +
                            "\057\001\002\000\036\016\056\017\063\043\052\050\072" +
                            "\052\064\063\054\072\061\076\067\077\070\112\074\113" +
                            "\062\114\066\115\073\116\057\001\002\000\036\016\056" +
                            "\017\063\043\052\050\072\052\064\063\054\072\061\076" +
                            "\067\077\070\112\074\113\062\114\066\115\073\116\057" +
                            "\001\002\000\036\016\056\017\063\043\052\050\072\052" +
                            "\064\063\054\072\061\076\067\077\070\112\074\113\062" +
                            "\114\066\115\073\116\057\001\002\000\036\016\056\017" +
                            "\063\043\052\050\072\052\064\063\054\072\061\076\067" +
                            "\077\070\112\074\113\062\114\066\115\073\116\057\001" +
                            "\002\000\046\044\uffac\051\111\052\100\054\107\055\103" +
                            "\056\106\060\105\061\112\062\114\064\101\065\117\066" +
                            "\115\067\113\073\uffac\106\110\107\102\110\116\111\104" +
                            "\001\002\000\046\044\uffab\051\111\052\100\054\107\055" +
                            "\103\056\106\060\105\061\112\062\114\064\101\065\117" +
                            "\066\115\067\113\073\uffab\106\110\107\102\110\116\111" +
                            "\104\001\002\000\046\044\uffa8\051\111\052\100\054\107" +
                            "\055\103\056\106\060\105\061\112\062\114\064\101\065" +
                            "\117\066\115\067\113\073\uffa8\106\110\107\102\110\116" +
                            "\111\104\001\002\000\046\044\uffa9\051\111\052\100\054" +
                            "\107\055\103\056\106\060\105\061\112\062\114\064\101" +
                            "\065\117\066\115\067\113\073\uffa9\106\110\107\102\110" +
                            "\116\111\104\001\002\000\046\044\uffaa\051\111\052\100" +
                            "\054\107\055\103\056\106\060\105\061\112\062\114\064" +
                            "\101\065\117\066\115\067\113\073\uffaa\106\110\107\102" +
                            "\110\116\111\104\001\002\000\004\116\045\001\002\000" +
                            "\006\044\uffd4\046\uffd4\001\002\000\006\044\uffcd\046\334" +
                            "\001\002\000\004\116\045\001\002\000\004\044\uffd3\001" +
                            "\002\000\006\044\uffcf\046\uffcf\001\002\000\006\044\uffcd" +
                            "\046\334\001\002\000\004\044\uffce\001\002\000\024\006" +
                            "\024\007\007\010\006\011\005\012\020\013\027\014\017" +
                            "\021\021\116\016\001\002\000\004\044\343\001\002\000" +
                            "\050\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
                            "\013\uffd7\014\uffd7\021\uffd7\024\uffd7\025\uffd7\027\uffd7\033" +
                            "\uffd7\034\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\116\uffd7" +
                            "\001\002\000\050\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
                            "\uffc6\012\uffc6\013\uffc6\014\uffc6\021\uffc6\024\uffc6\025\uffc6" +
                            "\027\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041\uffc6\042" +
                            "\uffc6\116\uffc6\001\002\000\004\116\346\001\002\000\004" +
                            "\035\uffb5\001\002\000\004\035\350\001\002\000\004\116" +
                            "\351\001\002\000\004\073\uffb4\001\002\000\004\073\353" +
                            "\001\002\000\004\023\262\001\002\000\050\004\uffb3\006" +
                            "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
                            "\021\uffb3\024\uffb3\025\uffb3\027\uffb3\033\uffb3\034\uffb3\036" +
                            "\uffb3\040\uffb3\041\uffb3\042\uffb3\116\uffb3\001\002\000\066" +
                            "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
                            "\uffe0\012\uffe0\013\uffe0\014\uffe0\020\uffe0\021\uffe0\022\uffe0" +
                            "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\032\uffe0\033" +
                            "\uffe0\034\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\116\uffe0" +
                            "\001\002\000\036\016\056\017\063\043\052\050\072\052" +
                            "\064\063\054\072\061\076\067\077\070\112\074\113\062" +
                            "\114\066\115\073\116\057\001\002\000\044\051\111\052" +
                            "\100\054\107\055\103\056\106\060\105\061\112\062\114" +
                            "\064\101\065\117\066\115\067\113\073\360\106\110\107" +
                            "\102\110\116\111\104\001\002\000\004\023\233\001\002" +
                            "\000\052\004\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
                            "\uffbc\013\uffbc\014\uffbc\021\uffbc\024\uffbc\025\uffbc\026\362" +
                            "\027\uffbc\033\uffbc\034\uffbc\036\uffbc\040\uffbc\041\uffbc\042" +
                            "\uffbc\116\uffbc\001\002\000\004\023\233\001\002\000\050" +
                            "\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
                            "\uffc0\014\uffc0\021\uffc0\024\uffc0\025\uffc0\027\uffc0\033\uffc0" +
                            "\034\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\116\uffc0\001" +
                            "\002\000\050\004\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
                            "\012\uffbd\013\uffbd\014\uffbd\021\uffbd\024\uffbd\025\uffbd\027" +
                            "\uffbd\033\uffbd\034\uffbd\036\uffbd\040\uffbd\041\uffbd\042\uffbd" +
                            "\116\uffbd\001\002\000\004\116\366\001\002\000\004\073" +
                            "\uffbf\001\002\000\004\073\370\001\002\000\004\030\371" +
                            "\001\002\000\004\045\372\001\002\000\004\023\373\001" +
                            "\002\000\006\031\375\032\uffb8\001\002\000\004\032\u0104" +
                            "\001\002\000\004\114\376\001\002\000\004\045\uffbb\001" +
                            "\002\000\004\045\u0100\001\002\000\004\023\233\001\002" +
                            "\000\006\031\uffba\032\uffba\001\002\000\006\031\375\032" +
                            "\uffb8\001\002\000\004\032\uffb9\001\002\000\004\045\u0105" +
                            "\001\002\000\004\023\233\001\002\000\004\024\u0107\001" +
                            "\002\000\050\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
                            "\012\uffbe\013\uffbe\014\uffbe\021\uffbe\024\uffbe\025\uffbe\027" +
                            "\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe" +
                            "\116\uffbe\001\002\000\050\004\uffc5\006\uffc5\007\uffc5\010" +
                            "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\021\uffc5\024\uffc5" +
                            "\025\uffc5\027\uffc5\033\uffc5\034\uffc5\036\uffc5\040\uffc5\041" +
                            "\uffc5\042\uffc5\116\uffc5\001\002\000\044\044\u010a\051\111" +
                            "\052\100\054\107\055\103\056\106\060\105\061\112\062" +
                            "\114\064\101\065\117\066\115\067\113\106\110\107\102" +
                            "\110\116\111\104\001\002\000\050\004\uffc4\006\uffc4\007" +
                            "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\021\uffc4" +
                            "\024\uffc4\025\uffc4\027\uffc4\033\uffc4\034\uffc4\036\uffc4\040" +
                            "\uffc4\041\uffc4\042\uffc4\116\uffc4\001\002\000\004\024\uffde" +
                            "\001\002\000\004\116\u010d\001\002\000\004\044\u010e\001" +
                            "\002\000\034\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
                            "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\020\ufff6\021\ufff6\022" +
                            "\ufff6\116\ufff6\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u010c\000\022\002\014\003\024\004\010\005\022\006" +
                            "\012\014\007\020\025\052\013\001\001\000\012\005\213" +
                            "\007\u010b\020\025\052\013\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\012\005\213\007\211\020\025\052\013\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\022\002\027\003\024\004\010\005\022\006" +
                            "\012\014\007\020\025\052\013\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\061\031\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\012\015\035\017\037\020\036\052\013\001\001\000" +
                            "\014\015\202\016\203\017\037\020\036\052\013\001\001" +
                            "\000\006\027\046\032\045\001\001\000\002\001\001\000" +
                            "\010\017\041\020\036\052\013\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\066\200\001" +
                            "\001\000\004\030\047\001\001\000\002\001\001\000\002" +
                            "\001\001\000\020\046\064\047\075\051\052\053\057\054" +
                            "\074\055\070\056\054\001\001\000\002\001\001\000\002" +
                            "\001\001\000\020\046\064\047\075\051\174\053\057\054" +
                            "\074\055\070\056\054\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\050\143\001\001\000\002\001\001\000" +
                            "\022\046\064\047\075\051\160\052\161\053\057\054\074" +
                            "\055\070\056\054\001\001\000\002\001\001\000\002\001" +
                            "\001\000\020\046\064\047\075\051\157\053\057\054\074" +
                            "\055\070\056\054\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\046\154\047\075\001\001\000\006\046\140" +
                            "\047\075\001\001\000\002\001\001\000\020\046\064\047" +
                            "\075\051\076\053\057\054\074\055\070\056\054\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\020\046\064\047\075" +
                            "\051\136\053\057\054\074\055\070\056\054\001\001\000" +
                            "\020\046\064\047\075\051\135\053\057\054\074\055\070" +
                            "\056\054\001\001\000\020\046\064\047\075\051\134\053" +
                            "\057\054\074\055\070\056\054\001\001\000\020\046\064" +
                            "\047\075\051\133\053\057\054\074\055\070\056\054\001" +
                            "\001\000\020\046\064\047\075\051\132\053\057\054\074" +
                            "\055\070\056\054\001\001\000\020\046\064\047\075\051" +
                            "\131\053\057\054\074\055\070\056\054\001\001\000\020" +
                            "\046\064\047\075\051\130\053\057\054\074\055\070\056" +
                            "\054\001\001\000\020\046\064\047\075\051\127\053\057" +
                            "\054\074\055\070\056\054\001\001\000\020\046\064\047" +
                            "\075\051\126\053\057\054\074\055\070\056\054\001\001" +
                            "\000\020\046\064\047\075\051\125\053\057\054\074\055" +
                            "\070\056\054\001\001\000\020\046\064\047\075\051\124" +
                            "\053\057\054\074\055\070\056\054\001\001\000\020\046" +
                            "\064\047\075\051\123\053\057\054\074\055\070\056\054" +
                            "\001\001\000\020\046\064\047\075\051\122\053\057\054" +
                            "\074\055\070\056\054\001\001\000\020\046\064\047\075" +
                            "\051\121\053\057\054\074\055\070\056\054\001\001\000" +
                            "\020\046\064\047\075\051\120\053\057\054\074\055\070" +
                            "\056\054\001\001\000\020\046\064\047\075\051\117\053" +
                            "\057\054\074\055\070\056\054\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\050\143\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\020\046\064\047\075\051\145\053" +
                            "\057\054\074\055\070\056\054\001\001\000\002\001\001" +
                            "\000\004\033\147\001\001\000\002\001\001\000\020\046" +
                            "\064\047\075\051\151\053\057\054\074\055\070\056\054" +
                            "\001\001\000\002\001\001\000\004\033\153\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\020\046\064\047\075\051\163\053\057\054\074" +
                            "\055\070\056\054\001\001\000\002\001\001\000\002\001" +
                            "\001\000\022\046\064\047\075\051\166\053\057\054\074" +
                            "\055\070\056\054\057\167\001\001\000\004\060\172\001" +
                            "\001\000\002\001\001\000\002\001\001\000\022\046\064" +
                            "\047\075\051\166\053\057\054\074\055\070\056\054\057" +
                            "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\005\176\020\025\052\013\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\033\201\001\001" +
                            "\000\002\001\001\000\014\015\202\016\207\017\037\020" +
                            "\036\052\013\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\012\005\217\011\216\020" +
                            "\025\052\013\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\013\221\001\001\000\004\012\226\001\001\000" +
                            "\002\001\001\000\004\013\224\001\001\000\002\001\001" +
                            "\000\012\005\217\011\227\020\025\052\013\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\010\231\021\234" +
                            "\001\001\000\002\001\001\000\034\005\251\020\025\022" +
                            "\242\025\256\026\253\034\235\036\247\041\244\045\246" +
                            "\046\252\047\075\052\013\056\237\001\001\000\002\001" +
                            "\001\000\002\001\001\000\034\005\251\020\025\022\u010a" +
                            "\025\256\026\253\034\235\036\247\041\244\045\246\046" +
                            "\252\047\075\052\013\056\237\001\001\000\020\046\064" +
                            "\047\075\051\u0108\053\057\054\074\055\070\056\054\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\050\143\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\062\340\001\001\000\004\063\330\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\023\260\001\001\000\034\005\251\020\025\022\257\025" +
                            "\256\026\253\034\235\036\247\041\244\045\246\046\252" +
                            "\047\075\052\013\056\237\001\001\000\002\001\001\000" +
                            "\002\001\001\000\036\005\251\020\025\024\265\025\267" +
                            "\026\253\034\263\035\264\036\247\041\244\045\246\046" +
                            "\252\047\075\052\013\056\237\001\001\000\002\001\001" +
                            "\000\002\001\001\000\036\005\251\020\025\024\273\025" +
                            "\267\026\253\034\263\035\264\036\247\041\244\045\246" +
                            "\046\252\047\075\052\013\056\237\001\001\000\002\001" +
                            "\001\000\002\001\001\000\036\005\251\020\025\024\270" +
                            "\025\267\026\253\034\263\035\264\036\247\041\244\045" +
                            "\246\046\252\047\075\052\013\056\237\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\020\046\064" +
                            "\047\075\051\277\053\057\054\074\055\070\056\054\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\012\042\303\045\304\046\252\047\075\001\001\000" +
                            "\002\001\001\000\002\001\001\000\022\043\307\046\064" +
                            "\047\075\051\306\053\057\054\074\055\070\056\054\001" +
                            "\001\000\002\001\001\000\002\001\001\000\012\044\311" +
                            "\045\312\046\252\047\075\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\023\314\001\001\000\002\001\001" +
                            "\000\002\001\001\000\020\046\064\047\075\051\327\053" +
                            "\057\054\074\055\070\056\054\001\001\000\020\046\064" +
                            "\047\075\051\326\053\057\054\074\055\070\056\054\001" +
                            "\001\000\020\046\064\047\075\051\325\053\057\054\074" +
                            "\055\070\056\054\001\001\000\020\046\064\047\075\051" +
                            "\324\053\057\054\074\055\070\056\054\001\001\000\020" +
                            "\046\064\047\075\051\323\053\057\054\074\055\070\056" +
                            "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
                            "\331\032\045\001\001\000\004\064\332\001\001\000\004" +
                            "\031\334\001\001\000\006\027\335\032\045\001\001\000" +
                            "\002\001\001\000\004\065\336\001\001\000\004\031\337" +
                            "\001\001\000\002\001\001\000\012\005\251\020\025\026" +
                            "\341\052\013\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\072\346\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\073\351" +
                            "\001\001\000\002\001\001\000\004\023\353\001\001\000" +
                            "\002\001\001\000\002\001\001\000\020\046\064\047\075" +
                            "\051\356\053\057\054\074\055\070\056\054\001\001\000" +
                            "\002\001\001\000\004\021\360\001\001\000\004\037\362" +
                            "\001\001\000\004\021\363\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\067\366\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\040\373\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\070\376\001\001\000\002\001" +
                            "\001\000\004\021\u0100\001\001\000\004\071\u0101\001\001" +
                            "\000\004\040\u0102\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\021\u0105\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return scanner.next_token();
    }


    private Scanner scanner;

    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= program EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // program ::= program_part program
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // program ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // program_part ::= global_var_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // program_part ::= func_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // program_part ::= struct_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // NT$0 ::=
                {
                    ProgramContent RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    id = scanner.string.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // global_var_dcl ::= variable_type ID NT$0 SEMI
                {
                    ProgramContent RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    new GlobalVarDCL(t, id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // variable_type ::= struct_type
                {
                    Type RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // variable_type ::= STRING
                {
                    Type RESULT = null;
                    RESULT = VariableType.STRING;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // variable_type ::= ID
                {
                    Type RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String type = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    new VariableType(type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // func_dcl ::= EXTERN function_type ID SEMI
                {
                    ProgramContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // func_dcl ::= FUNCTION function_type ID PRANTOP arguments PRANTCL func_dcl_part
                {
                    ProgramContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // function_type ::= variable_type
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // function_type ::= VOID
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // func_dcl_part ::= SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // func_dcl_part ::= block
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // arguments ::= variable_type ID function_array_dcl arguments_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // arguments ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // arguments_part ::= COMA arguments
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // arguments_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // function_array_dcl ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // struct_dcl ::= RECORD ID BEGIN struct_var_dcl struct_more_var_dcl END RECORD SEMI
                {
                    ProgramContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // struct_more_var_dcl ::= struct_var_dcl struct_more_var_dcl
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // struct_more_var_dcl ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // struct_var_dcl ::= struct_var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // struct_var_dcl_part ::= struct_type var_dcl_cnt
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent dcl = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // struct_type ::= casting_type
                {
                    Type RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // struct_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = StructureType.BOOL;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // struct_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = StructureType.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // struct_type ::= AUTO
                {
                    Type RESULT = null;
                    RESULT = VariableType.AUTO;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // block ::= BEGIN block_content END
                {
                    Block RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // block_content ::= var_dcl block_content
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // block_content ::= statement block_content
                {
                    BlockContent RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // block_content ::=
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // loop_block ::= BEGIN loop_block_content END
                {
                    Block RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // loop_block_content ::= var_dcl loop_block_content
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // loop_block_content ::= loop_statement loop_block_content
                {
                    BlockContent RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // loop_block_content ::=
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // NT$1 ::=
                {
                    Object RESULT = null;
                    Variables.getInstance().setConstant(true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // var_dcl ::= CONST NT$1 var_dcl_part SEMI
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$1
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // var_dcl ::= var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // NT$2 ::=
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Variables.getInstance().setType(t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // NT$3 ::=
                {
                    Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // var_dcl_part ::= variable_type NT$2 var_dcl_cnt NT$3 var_dcl_cnt_extension
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$3
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // var_dcl_cnt ::= single_var var_dcl_cnt_part
                {
                    BlockContent RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    DCL dcl = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new CompleteDCL(dcl, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // var_dcl_cnt_part ::= ASSIGN expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // var_dcl_cnt_part ::=
                {
                    Expression RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // NT$4 ::=
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // var_dcl_cnt_extension ::= COMA var_dcl_cnt NT$4 var_dcl_cnt_extension
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$4
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // var_dcl_cnt_extension ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // NT$5 ::=
                {
                    DCL RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    id = scanner.string.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // single_var ::= ID NT$5 array_part
                {
                    DCL RESULT = null;
                    // propagate RESULT from NT$5
                    RESULT = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    DCL dcl = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    dcl.setId(id);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // array_part ::= BRACKOP expr BRACKCL array_part
                {
                    DCL RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new ArrayDCL(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // array_part ::=
                {
                    DCL RESULT = null;
                    RESULT = new VariableDCL();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // statement ::= cond_stmt
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // statement ::= loop_stmt
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // statement ::= assignment SEMI
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Assignment stmt = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // statement ::= function_call SEMI
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // statement ::= RETURN expr SEMI
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // loop_statement ::= statement
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent stmt = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // loop_statement ::= BREAK SEMI
                {
                    BlockContent RESULT = null;
                    new Break();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // loop_statement ::= CONTINUE SEMI
                {
                    BlockContent RESULT = null;
                    new Continue();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // cond_stmt ::= IF PRANTOP expr PRANTCL block else_part
                {
                    Statement RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int ifbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int ifbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Block ifb = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ebleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int ebright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block eb = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new If(e, ifb, eb);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // NT$6 ::=
                {
                    Statement RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    id = scanner.string.toString();
                    Cases.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // cond_stmt ::= SWITCH PRANTOP ID NT$6 PRANTCL OF COL BEGIN case_part DEFAULT COL block END
                {
                    Statement RESULT = null;
                    // propagate RESULT from NT$6
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).value;
                    int dbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Block db = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Switch(id, db);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 12)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // else_part ::= ELSE block
                {
                    Block RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // else_part ::=
                {
                    Block RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // NT$7 ::=
                {
                    Object RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    i = scanner.ICV;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7", 54, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // NT$8 ::=
                {
                    Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Cases.getInstance().addCase(i, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8", 55, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // case_part ::= CASE INT_LIT NT$7 COL block NT$8 case_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$8
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // case_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL loop_block
                {
                    Statement RESULT = null;
                    int inleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int inright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    Assignment in = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int upleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int upright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Assignment up = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new For(in, e, up, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // loop_stmt ::= REPEAT loop_block UNTIL PRANTOP expr PRANTCL SEMI
                {
                    Statement RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new Repeat(b, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // NT$9 ::=
                {
                    Statement RESULT = null;
                    int i1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int i1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String i1 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    i1 = scanner.string.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9", 56, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // NT$10 ::=
                {
                    Statement RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int i1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int i1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String i1 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int i2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int i2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String i2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    i2 = scanner.string.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // loop_stmt ::= FOREACH PRANTOP ID NT$9 IN ID NT$10 PRANTCL loop_block
                {
                    Statement RESULT = null;
                    // propagate RESULT from NT$10
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int i1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int i1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    String i1 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int i2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int i2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String i2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Foreach(i1, i2, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // loop_init_part ::= assignment
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // loop_init_part ::=
                {
                    Assignment RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // loop_cond_part ::= expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // loop_cond_part ::=
                {
                    Expression RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // loop_update_part ::= assignment
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // loop_update_part ::=
                {
                    Assignment RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // assignment ::= variable ASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DirectAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // assignment ::= variable PLUSASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PlusAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // assignment ::= variable MINUSASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MinusAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // assignment ::= variable MULTASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MultiplyAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // assignment ::= variable DIVASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DivisionAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // variable ::= var_access
                {
                    Access RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // variable ::= variable DOT ID
                {
                    Access RESULT = null;
                    ;//todo
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // var_access ::= ID var_access_array_part
                {
                    Access RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    a.setDescriptor(id);
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // var_access_array_part ::= BRACKOP expr BRACKCL array_part
                {
                    Access RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new ArrayAccess(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // var_access_array_part ::=
                {
                    Access RESULT = null;
                    RESULT = new VariableAccess();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // expr ::= const_val
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Constant e = (Constant) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // expr ::= PRANTOP expr PRANTCL
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // expr ::= NOT expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Not(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // expr ::= BINOT expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryNot(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // expr ::= MINUS expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Uminus(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // expr ::= PREFMINUS2 variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrefixMinus2(a.getDescriptor());
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // expr ::= PREFPLUS2 variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrefixPlus2(a.getDescriptor());
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // expr ::= variable PREFMINUS2
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new PostfixMinus2(a.getDescriptor());
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // expr ::= variable PREFPLUS2
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new PostfixPlus2(a.getDescriptor());
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // expr ::= PRANTOP casting_type PRANTCL expr
                {
                    Expression RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Casting(t, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // expr ::= SIZEOF PRANTOP variable_type PRANTCL
                {
                    Expression RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new SizeOf(t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // expr ::= arithmatic_expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // expr ::= conditional_expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // expr ::= variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Variable(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // expr ::= function_call
                {
                    Expression RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // casting_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = CastingType.CHAR;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // casting_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = CastingType.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // casting_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = CastingType.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // casting_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = CastingType.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // arithmatic_expr ::= expr MULT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Mult(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // arithmatic_expr ::= expr DIVIDE expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Div(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // arithmatic_expr ::= expr MOD expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Mod(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // arithmatic_expr ::= expr PLUS expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Add(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // arithmatic_expr ::= expr MINUS expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Sub(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // arithmatic_expr ::= expr BIAND expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryAnd(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // arithmatic_expr ::= expr BIOR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryOr(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // arithmatic_expr ::= expr BIEXOR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryXor(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // conditional_expr ::= expr LT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LT(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // conditional_expr ::= expr LTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // conditional_expr ::= expr GT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GT(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // conditional_expr ::= expr GTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // conditional_expr ::= expr EQEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new EQ(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // conditional_expr ::= expr NOTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // conditional_expr ::= expr AND expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryAnd(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // conditional_expr ::= expr OR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryOr(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // const_val ::= TRUE
                {
                    Constant RESULT = null;
                    RESULT = new BooleanConstant(true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // const_val ::= FALSE
                {
                    Constant RESULT = null;
                    RESULT = new BooleanConstant(false);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // const_val ::= CHAR_LIT
                {
                    Constant RESULT = null;
                    RESULT = new CharConstant(scanner.string);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // const_val ::= INT_LIT
                {
                    Constant RESULT = null;
                    RESULT = new IntegerConstant(scanner.ICV);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // const_val ::= FLOAT_LIT
                {
                    Constant RESULT = null;
                    RESULT = new DoubleConstant(scanner.RCV);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // const_val ::= STR_LIT
                {
                    Constant RESULT = null;
                    RESULT = new StringConstant(scanner.string);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // function_call ::= ID PRANTOP parameters PRANTCL
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // parameters ::= expr parameters_part
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // parameters ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // parameters_part ::= COMA parameters
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // parameters_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
