
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.access.*;
import ast.block.Block;
import ast.block.BlockContent;
import ast.block.Blocks;
import ast.block.stmt.Statement;
import ast.block.stmt.assignment.*;
import ast.block.stmt.conditional.casestmt.Cases;
import ast.block.stmt.conditional.casestmt.Switch;
import ast.block.stmt.conditional.ifstmt.If;
import ast.block.stmt.function.FunctionCall;
import ast.block.stmt.function.Return;
import ast.block.stmt.loop.*;
import ast.dcl.CompleteDCL;
import ast.dcl.DCL;
import ast.dcl.array.ArrayDCL;
import ast.dcl.variable.VariableDCL;
import ast.dcl.variable.Variables;
import ast.expr.Expression;
import ast.expr.binary.arithmatic.*;
import ast.expr.binary.logical.*;
import ast.expr.constant.*;
import ast.expr.other.Casting;
import ast.expr.other.SizeOf;
import ast.expr.other.Variable;
import ast.expr.unary.arithmatic.BinaryNot;
import ast.expr.unary.arithmatic.Uminus;
import ast.expr.unary.arithmatic.dual.PostfixMinus2;
import ast.expr.unary.arithmatic.dual.PostfixPlus2;
import ast.expr.unary.arithmatic.dual.PrefixMinus2;
import ast.expr.unary.arithmatic.dual.PrefixPlus2;
import ast.expr.unary.logical.Not;
import ast.program.Program;
import ast.program.ProgramContent;
import ast.program.function.FunctionArguments;
import ast.program.function.FunctionDCL;
import ast.program.global.GlobalVarDCL;
import ast.program.structure.StructVarDCL;
import ast.program.structure.Structures;
import ast.type.Type;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return Symbol.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\242\000\002\002\004\000\002\002\004\000\002\002" +
                            "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
                            "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
                            "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
                            "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
                            "\003\000\002\006\006\000\002\006\011\000\002\007\003" +
                            "\000\002\007\003\000\002\064\002\000\002\010\007\000" +
                            "\002\010\002\000\002\011\004\000\002\011\002\000\002" +
                            "\012\005\000\002\012\002\000\002\013\003\000\002\013" +
                            "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
                            "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
                            "\002\014\003\000\002\065\002\000\002\066\002\000\002" +
                            "\015\014\000\002\067\002\000\002\017\005\000\002\017" +
                            "\002\000\002\016\005\000\002\016\004\000\002\020\005" +
                            "\000\002\021\004\000\002\021\002\000\002\022\003\000" +
                            "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
                            "\022\003\000\002\022\003\000\002\070\002\000\002\023" +
                            "\006\000\002\024\004\000\002\024\004\000\002\024\002" +
                            "\000\002\025\005\000\002\026\004\000\002\026\004\000" +
                            "\002\026\002\000\002\071\002\000\002\027\006\000\002" +
                            "\027\004\000\002\072\002\000\002\073\002\000\002\030" +
                            "\007\000\002\031\004\000\002\032\004\000\002\032\002" +
                            "\000\002\074\002\000\002\033\006\000\002\033\002\000" +
                            "\002\034\004\000\002\035\006\000\002\035\002\000\002" +
                            "\036\003\000\002\036\003\000\002\036\004\000\002\036" +
                            "\004\000\002\036\005\000\002\037\003\000\002\037\004" +
                            "\000\002\037\004\000\002\040\010\000\002\075\002\000" +
                            "\002\040\017\000\002\041\004\000\002\041\002\000\002" +
                            "\076\002\000\002\077\002\000\002\042\011\000\002\042" +
                            "\002\000\002\043\013\000\002\043\011\000\002\043\011" +
                            "\000\002\044\003\000\002\044\002\000\002\045\003\000" +
                            "\002\045\002\000\002\046\003\000\002\046\002\000\002" +
                            "\047\005\000\002\047\005\000\002\047\005\000\002\047" +
                            "\005\000\002\047\005\000\002\050\003\000\002\050\005" +
                            "\000\002\051\004\000\002\052\006\000\002\052\002\000" +
                            "\002\053\003\000\002\053\005\000\002\053\004\000\002" +
                            "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
                            "\004\000\002\053\004\000\002\053\004\000\002\053\006" +
                            "\000\002\053\006\000\002\053\003\000\002\053\003\000" +
                            "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
                            "\054\003\000\002\054\003\000\002\054\003\000\002\055" +
                            "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
                            "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
                            "\002\055\005\000\002\056\005\000\002\056\005\000\002" +
                            "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
                            "\005\000\002\056\005\000\002\056\005\000\002\057\003" +
                            "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
                            "\002\057\003\000\002\057\003\000\002\100\002\000\002" +
                            "\060\007\000\002\101\002\000\002\061\005\000\002\061" +
                            "\002\000\002\062\004\000\002\062\002\000\002\063\003" +
                            ""});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u0122\000\034\002\uffff\005\022\006\024\007\007\010" +
                            "\006\011\005\012\017\013\026\014\016\020\004\021\020" +
                            "\022\012\116\015\001\002\000\022\006\100\007\106\010" +
                            "\076\011\077\012\105\013\103\014\102\015\101\001\002" +
                            "\000\006\073\ufff7\116\ufff7\001\002\000\006\073\ufff8\116" +
                            "\ufff8\001\002\000\006\073\ufff9\116\ufff9\001\002\000\034" +
                            "\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
                            "\ufffc\013\ufffc\014\ufffc\020\ufffc\021\ufffc\022\ufffc\116\ufffc" +
                            "\001\002\000\034\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
                            "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\020\ufffe\021\ufffe" +
                            "\022\ufffe\116\ufffe\001\002\000\022\006\100\007\106\010" +
                            "\076\011\077\012\105\013\103\014\102\015\101\001\002" +
                            "\000\034\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
                            "\ufffd\012\ufffd\013\ufffd\014\ufffd\020\ufffd\021\ufffd\022\ufffd" +
                            "\116\ufffd\001\002\000\004\002\074\001\002\000\104\023" +
                            "\uff60\035\uff60\044\uff60\046\uff60\047\uff60\051\uff60\052\uff60" +
                            "\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062" +
                            "\uff60\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\071\uff60" +
                            "\072\uff60\073\uff60\076\uff60\077\uff60\102\uff60\103\uff60\104" +
                            "\uff60\105\uff60\106\uff60\107\uff60\110\uff60\111\uff60\116\uff60" +
                            "\001\002\000\006\073\ufff4\116\ufff4\001\002\000\006\073" +
                            "\ufff6\116\ufff6\001\002\000\006\073\ufff3\116\ufff3\001\002" +
                            "\000\006\073\ufff2\116\ufff2\001\002\000\004\116\uffdd\001" +
                            "\002\000\004\116\015\001\002\000\006\073\ufffa\116\ufffa" +
                            "\001\002\000\034\002\uffff\005\022\006\024\007\007\010" +
                            "\006\011\005\012\017\013\026\014\016\020\004\021\020" +
                            "\022\012\116\015\001\002\000\006\073\ufff5\116\ufff5\001" +
                            "\002\000\004\002\000\001\002\000\004\044\031\001\002" +
                            "\000\034\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
                            "\ufffb\012\ufffb\013\ufffb\014\ufffb\020\ufffb\021\ufffb\022\ufffb" +
                            "\116\ufffb\001\002\000\004\116\015\001\002\000\004\023" +
                            "\034\001\002\000\020\004\046\006\040\007\045\010\036" +
                            "\011\037\012\044\013\041\001\002\000\022\004\uffdc\006" +
                            "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\024\uffdc" +
                            "\001\002\000\004\116\uffd0\001\002\000\004\116\uffcf\001" +
                            "\002\000\004\116\uffd2\001\002\000\004\116\uffcd\001\002" +
                            "\000\004\116\015\001\002\000\004\044\051\001\002\000" +
                            "\004\116\uffce\001\002\000\004\116\uffd1\001\002\000\016" +
                            "\006\040\007\045\010\036\011\037\012\044\013\041\001" +
                            "\002\000\004\044\050\001\002\000\022\004\uffd7\006\uffd7" +
                            "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\024\uffd7\001" +
                            "\002\000\022\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
                            "\012\uffd6\013\uffd6\024\uffd6\001\002\000\006\044\uffd3\057" +
                            "\054\001\002\000\004\044\uffd5\001\002\000\016\016\060" +
                            "\017\061\112\056\113\062\114\063\115\057\001\002\000" +
                            "\004\044\uffd4\001\002\000\052\044\uff6b\046\uff6b\051\uff6b" +
                            "\052\uff6b\054\uff6b\055\uff6b\056\uff6b\060\uff6b\061\uff6b\062" +
                            "\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\071\uff6b\073\uff6b" +
                            "\106\uff6b\107\uff6b\110\uff6b\111\uff6b\001\002\000\052\044" +
                            "\uff69\046\uff69\051\uff69\052\uff69\054\uff69\055\uff69\056\uff69" +
                            "\060\uff69\061\uff69\062\uff69\064\uff69\065\uff69\066\uff69\067" +
                            "\uff69\071\uff69\073\uff69\106\uff69\107\uff69\110\uff69\111\uff69" +
                            "\001\002\000\052\044\uff6d\046\uff6d\051\uff6d\052\uff6d\054" +
                            "\uff6d\055\uff6d\056\uff6d\060\uff6d\061\uff6d\062\uff6d\064\uff6d" +
                            "\065\uff6d\066\uff6d\067\uff6d\071\uff6d\073\uff6d\106\uff6d\107" +
                            "\uff6d\110\uff6d\111\uff6d\001\002\000\052\044\uff6c\046\uff6c" +
                            "\051\uff6c\052\uff6c\054\uff6c\055\uff6c\056\uff6c\060\uff6c\061" +
                            "\uff6c\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\071\uff6c" +
                            "\073\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c\001\002\000" +
                            "\052\044\uff68\046\uff68\051\uff68\052\uff68\054\uff68\055\uff68" +
                            "\056\uff68\060\uff68\061\uff68\062\uff68\064\uff68\065\uff68\066" +
                            "\uff68\067\uff68\071\uff68\073\uff68\106\uff68\107\uff68\110\uff68" +
                            "\111\uff68\001\002\000\052\044\uff6a\046\uff6a\051\uff6a\052" +
                            "\uff6a\054\uff6a\055\uff6a\056\uff6a\060\uff6a\061\uff6a\062\uff6a" +
                            "\064\uff6a\065\uff6a\066\uff6a\067\uff6a\071\uff6a\073\uff6a\106" +
                            "\uff6a\107\uff6a\110\uff6a\111\uff6a\001\002\000\022\004\046" +
                            "\006\040\007\045\010\036\011\037\012\044\013\041\024" +
                            "\uffd8\001\002\000\022\004\uffda\006\uffda\007\uffda\010\uffda" +
                            "\011\uffda\012\uffda\013\uffda\024\uffda\001\002\000\004\024" +
                            "\067\001\002\000\004\005\070\001\002\000\004\044\071" +
                            "\001\002\000\034\002\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
                            "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\020\uffdb\021\uffdb" +
                            "\022\uffdb\116\uffdb\001\002\000\022\004\046\006\040\007" +
                            "\045\010\036\011\037\012\044\013\041\024\uffd8\001\002" +
                            "\000\004\024\uffd9\001\002\000\004\002\001\001\002\000" +
                            "\004\116\uffe6\001\002\000\004\116\uffe2\001\002\000\004" +
                            "\116\uffe1\001\002\000\004\116\uffe4\001\002\000\004\116" +
                            "\uffe5\001\002\000\004\116\uffde\001\002\000\004\116\uffdf" +
                            "\001\002\000\004\116\015\001\002\000\004\116\uffe0\001" +
                            "\002\000\004\116\uffe3\001\002\000\004\072\110\001\002" +
                            "\000\026\006\024\007\007\010\006\011\005\012\017\013" +
                            "\026\014\016\021\020\073\uffeb\116\015\001\002\000\004" +
                            "\073\124\001\002\000\004\116\015\001\002\000\010\046" +
                            "\uffe7\070\115\073\uffe7\001\002\000\006\046\uffed\073\uffed" +
                            "\001\002\000\004\071\116\001\002\000\010\046\uffe7\070" +
                            "\115\073\uffe7\001\002\000\006\046\uffe8\073\uffe8\001\002" +
                            "\000\006\046\121\073\uffe9\001\002\000\026\006\024\007" +
                            "\007\010\006\011\005\012\017\013\026\014\016\021\020" +
                            "\073\uffeb\116\015\001\002\000\004\073\uffec\001\002\000" +
                            "\004\073\uffea\001\002\000\006\023\126\044\127\001\002" +
                            "\000\034\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
                            "\ufff0\012\ufff0\013\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0" +
                            "\116\ufff0\001\002\000\044\004\uffcc\006\uffcc\007\uffcc\010" +
                            "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\021\uffcc\024\uffcc" +
                            "\025\uffcc\027\uffcc\033\uffcc\034\uffcc\036\uffcc\042\uffcc\116" +
                            "\uffcc\001\002\000\034\002\uffef\005\uffef\006\uffef\007\uffef" +
                            "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\020\uffef\021" +
                            "\uffef\022\uffef\116\uffef\001\002\000\034\002\uffee\005\uffee" +
                            "\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
                            "\uffee\020\uffee\021\uffee\022\uffee\116\uffee\001\002\000\044" +
                            "\004\144\006\024\007\007\010\006\011\005\012\017\013" +
                            "\026\014\016\021\020\024\uffc8\025\137\027\135\033\151" +
                            "\034\141\036\152\042\133\116\015\001\002\000\044\004" +
                            "\144\006\024\007\007\010\006\011\005\012\017\013\026" +
                            "\014\016\021\020\024\uffc8\025\137\027\135\033\151\034" +
                            "\141\036\152\042\133\116\015\001\002\000\036\016\060" +
                            "\017\061\043\162\050\176\052\171\063\164\072\170\076" +
                            "\173\077\174\112\056\113\062\114\063\115\057\116\015" +
                            "\001\002\000\004\044\u011e\001\002\000\004\072\u010b\001" +
                            "\002\000\004\024\u010a\001\002\000\004\072\u0103\001\002" +
                            "\000\050\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
                            "\uffb3\013\uffb3\014\uffb3\021\uffb3\024\uffb3\025\uffb3\027\uffb3" +
                            "\033\uffb3\034\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\116" +
                            "\uffb3\001\002\000\004\072\375\001\002\000\024\047\uff91" +
                            "\057\uff91\070\244\072\uff67\102\uff91\103\uff91\104\uff91\105" +
                            "\uff91\116\ufff2\001\002\000\004\044\374\001\002\000\024" +
                            "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
                            "\uffc3\021\uffc3\116\uffc3\001\002\000\004\116\uffc0\001\002" +
                            "\000\016\047\254\057\345\102\344\103\341\104\343\105" +
                            "\342\001\002\000\050\004\uffb4\006\uffb4\007\uffb4\010\uffb4" +
                            "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\021\uffb4\024\uffb4\025" +
                            "\uffb4\027\uffb4\033\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4" +
                            "\042\uffb4\116\uffb4\001\002\000\004\044\340\001\002\000" +
                            "\004\072\325\001\002\000\004\023\156\001\002\000\044" +
                            "\004\144\006\024\007\007\010\006\011\005\012\017\013" +
                            "\026\014\016\021\020\024\uffc8\025\137\027\135\033\151" +
                            "\034\141\036\152\042\133\116\015\001\002\000\072\044" +
                            "\uff95\046\uff95\047\uff95\051\uff95\052\uff95\054\uff95\055\uff95" +
                            "\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\064\uff95\065" +
                            "\uff95\066\uff95\067\uff95\071\uff95\073\uff95\076\uff95\077\uff95" +
                            "\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110" +
                            "\uff95\111\uff95\001\002\000\004\024\uffca\001\002\000\050" +
                            "\004\144\006\024\007\007\010\006\011\005\012\017\013" +
                            "\026\014\016\021\020\024\uffc4\025\137\027\135\033\151" +
                            "\034\141\036\152\040\316\041\312\042\133\116\015\001" +
                            "\002\000\004\037\160\001\002\000\004\072\161\001\002" +
                            "\000\036\016\060\017\061\043\162\050\176\052\171\063" +
                            "\164\072\170\076\173\077\174\112\056\113\062\114\063" +
                            "\115\057\116\015\001\002\000\004\072\307\001\002\000" +
                            "\044\051\212\052\201\054\207\055\204\056\210\060\206" +
                            "\061\213\062\215\064\202\065\220\066\217\067\214\073" +
                            "\305\106\211\107\203\110\216\111\205\001\002\000\036" +
                            "\016\060\017\061\043\162\050\176\052\171\063\164\072" +
                            "\170\076\173\077\174\112\056\113\062\114\063\115\057" +
                            "\116\015\001\002\000\052\044\uff82\046\uff82\051\uff82\052" +
                            "\uff82\054\uff82\055\uff82\056\uff82\060\uff82\061\uff82\062\uff82" +
                            "\064\uff82\065\uff82\066\uff82\067\uff82\071\uff82\073\uff82\106" +
                            "\uff82\107\uff82\110\uff82\111\uff82\001\002\000\052\044\uff85" +
                            "\046\uff85\051\uff85\052\uff85\054\uff85\055\uff85\056\uff85\060" +
                            "\uff85\061\uff85\062\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
                            "\071\uff85\073\uff85\106\uff85\107\uff85\110\uff85\111\uff85\001" +
                            "\002\000\064\044\uff91\046\uff91\047\uff91\051\uff91\052\uff91" +
                            "\054\uff91\055\uff91\056\uff91\060\uff91\061\uff91\062\uff91\064" +
                            "\uff91\065\uff91\066\uff91\067\uff91\070\244\071\uff91\072\uff67" +
                            "\073\uff91\076\uff91\077\uff91\106\uff91\107\uff91\110\uff91\111" +
                            "\uff91\001\002\000\046\007\264\010\263\012\266\013\267" +
                            "\016\060\017\061\043\162\050\176\052\171\063\164\072" +
                            "\170\076\173\077\174\112\056\113\062\114\063\115\057" +
                            "\116\015\001\002\000\036\016\060\017\061\043\162\050" +
                            "\176\052\171\063\164\072\170\076\173\077\174\112\056" +
                            "\113\062\114\063\115\057\116\015\001\002\000\060\044" +
                            "\uff83\046\uff83\047\254\051\uff83\052\uff83\054\uff83\055\uff83" +
                            "\056\uff83\060\uff83\061\uff83\062\uff83\064\uff83\065\uff83\066" +
                            "\uff83\067\uff83\071\uff83\073\uff83\076\257\077\260\106\uff83" +
                            "\107\uff83\110\uff83\111\uff83\001\002\000\004\116\015\001" +
                            "\002\000\004\116\015\001\002\000\052\044\uff90\046\uff90" +
                            "\051\uff90\052\uff90\054\uff90\055\uff90\056\uff90\060\uff90\061" +
                            "\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90\071\uff90" +
                            "\073\uff90\106\uff90\107\uff90\110\uff90\111\uff90\001\002\000" +
                            "\036\016\060\017\061\043\162\050\176\052\171\063\164" +
                            "\072\170\076\173\077\174\112\056\113\062\114\063\115" +
                            "\057\116\015\001\002\000\052\044\uff84\046\uff84\051\uff84" +
                            "\052\uff84\054\uff84\055\uff84\056\uff84\060\uff84\061\uff84\062" +
                            "\uff84\064\uff84\065\uff84\066\uff84\067\uff84\071\uff84\073\uff84" +
                            "\106\uff84\107\uff84\110\uff84\111\uff84\001\002\000\052\044" +
                            "\uff8d\046\uff8d\051\uff8d\052\uff8d\054\uff8d\055\uff8d\056\uff8d" +
                            "\060\uff8d\061\uff8d\062\uff8d\064\uff8d\065\uff8d\066\uff8d\067" +
                            "\uff8d\071\uff8d\073\uff8d\106\uff8d\107\uff8d\110\uff8d\111\uff8d" +
                            "\001\002\000\036\016\060\017\061\043\162\050\176\052" +
                            "\171\063\164\072\170\076\173\077\174\112\056\113\062" +
                            "\114\063\115\057\116\015\001\002\000\036\016\060\017" +
                            "\061\043\162\050\176\052\171\063\164\072\170\076\173" +
                            "\077\174\112\056\113\062\114\063\115\057\116\015\001" +
                            "\002\000\036\016\060\017\061\043\162\050\176\052\171" +
                            "\063\164\072\170\076\173\077\174\112\056\113\062\114" +
                            "\063\115\057\116\015\001\002\000\036\016\060\017\061" +
                            "\043\162\050\176\052\171\063\164\072\170\076\173\077" +
                            "\174\112\056\113\062\114\063\115\057\116\015\001\002" +
                            "\000\036\016\060\017\061\043\162\050\176\052\171\063" +
                            "\164\072\170\076\173\077\174\112\056\113\062\114\063" +
                            "\115\057\116\015\001\002\000\036\016\060\017\061\043" +
                            "\162\050\176\052\171\063\164\072\170\076\173\077\174" +
                            "\112\056\113\062\114\063\115\057\116\015\001\002\000" +
                            "\036\016\060\017\061\043\162\050\176\052\171\063\164" +
                            "\072\170\076\173\077\174\112\056\113\062\114\063\115" +
                            "\057\116\015\001\002\000\036\016\060\017\061\043\162" +
                            "\050\176\052\171\063\164\072\170\076\173\077\174\112" +
                            "\056\113\062\114\063\115\057\116\015\001\002\000\036" +
                            "\016\060\017\061\043\162\050\176\052\171\063\164\072" +
                            "\170\076\173\077\174\112\056\113\062\114\063\115\057" +
                            "\116\015\001\002\000\036\016\060\017\061\043\162\050" +
                            "\176\052\171\063\164\072\170\076\173\077\174\112\056" +
                            "\113\062\114\063\115\057\116\015\001\002\000\036\016" +
                            "\060\017\061\043\162\050\176\052\171\063\164\072\170" +
                            "\076\173\077\174\112\056\113\062\114\063\115\057\116" +
                            "\015\001\002\000\036\016\060\017\061\043\162\050\176" +
                            "\052\171\063\164\072\170\076\173\077\174\112\056\113" +
                            "\062\114\063\115\057\116\015\001\002\000\036\016\060" +
                            "\017\061\043\162\050\176\052\171\063\164\072\170\076" +
                            "\173\077\174\112\056\113\062\114\063\115\057\116\015" +
                            "\001\002\000\036\016\060\017\061\043\162\050\176\052" +
                            "\171\063\164\072\170\076\173\077\174\112\056\113\062" +
                            "\114\063\115\057\116\015\001\002\000\036\016\060\017" +
                            "\061\043\162\050\176\052\171\063\164\072\170\076\173" +
                            "\077\174\112\056\113\062\114\063\115\057\116\015\001" +
                            "\002\000\036\016\060\017\061\043\162\050\176\052\171" +
                            "\063\164\072\170\076\173\077\174\112\056\113\062\114" +
                            "\063\115\057\116\015\001\002\000\052\044\uff6e\046\uff6e" +
                            "\051\212\052\201\054\207\055\204\056\210\060\206\061" +
                            "\213\062\215\064\202\065\uff6e\066\217\067\214\071\uff6e" +
                            "\073\uff6e\106\211\107\203\110\216\111\205\001\002\000" +
                            "\052\044\uff75\046\uff75\051\212\052\201\054\207\055\204" +
                            "\056\210\060\uff75\061\uff75\062\uff75\064\uff75\065\uff75\066" +
                            "\uff75\067\uff75\071\uff75\073\uff75\106\uff75\107\uff75\110\uff75" +
                            "\111\uff75\001\002\000\052\044\uff74\046\uff74\051\212\052" +
                            "\201\054\207\055\204\056\210\060\uff74\061\uff74\062\uff74" +
                            "\064\uff74\065\uff74\066\uff74\067\uff74\071\uff74\073\uff74\106" +
                            "\uff74\107\uff74\110\uff74\111\uff74\001\002\000\052\044\uff76" +
                            "\046\uff76\051\212\052\201\054\207\055\204\056\210\060" +
                            "\206\061\uff76\062\uff76\064\uff76\065\uff76\066\217\067\214" +
                            "\071\uff76\073\uff76\106\211\107\203\110\216\111\205\001" +
                            "\002\000\052\044\uff73\046\uff73\051\212\052\201\054\207" +
                            "\055\204\056\210\060\uff73\061\uff73\062\uff73\064\uff73\065" +
                            "\uff73\066\217\067\uff73\071\uff73\073\uff73\106\uff73\107\uff73" +
                            "\110\216\111\uff73\001\002\000\052\044\uff77\046\uff77\051" +
                            "\212\052\201\054\207\055\204\056\210\060\206\061\uff77" +
                            "\062\215\064\uff77\065\uff77\066\217\067\214\071\uff77\073" +
                            "\uff77\106\211\107\203\110\216\111\205\001\002\000\052" +
                            "\044\uff7a\046\uff7a\051\uff7a\052\uff7a\054\207\055\204\056" +
                            "\210\060\uff7a\061\uff7a\062\uff7a\064\uff7a\065\uff7a\066\uff7a" +
                            "\067\uff7a\071\uff7a\073\uff7a\106\uff7a\107\uff7a\110\uff7a\111" +
                            "\uff7a\001\002\000\052\044\uff70\046\uff70\051\212\052\201" +
                            "\054\207\055\204\056\210\060\uff70\061\uff70\062\uff70\064" +
                            "\uff70\065\uff70\066\217\067\214\071\uff70\073\uff70\106\uff70" +
                            "\107\uff70\110\216\111\205\001\002\000\052\044\uff7b\046" +
                            "\uff7b\051\uff7b\052\uff7b\054\uff7b\055\uff7b\056\uff7b\060\uff7b" +
                            "\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\071" +
                            "\uff7b\073\uff7b\106\uff7b\107\uff7b\110\uff7b\111\uff7b\001\002" +
                            "\000\052\044\uff7d\046\uff7d\051\uff7d\052\uff7d\054\uff7d\055" +
                            "\uff7d\056\uff7d\060\uff7d\061\uff7d\062\uff7d\064\uff7d\065\uff7d" +
                            "\066\uff7d\067\uff7d\071\uff7d\073\uff7d\106\uff7d\107\uff7d\110" +
                            "\uff7d\111\uff7d\001\002\000\052\044\uff78\046\uff78\051\212" +
                            "\052\201\054\207\055\204\056\210\060\uff78\061\uff78\062" +
                            "\uff78\064\uff78\065\uff78\066\217\067\214\071\uff78\073\uff78" +
                            "\106\211\107\203\110\216\111\205\001\002\000\052\044" +
                            "\uff72\046\uff72\051\212\052\201\054\207\055\204\056\210" +
                            "\060\uff72\061\uff72\062\uff72\064\uff72\065\uff72\066\217\067" +
                            "\uff72\071\uff72\073\uff72\106\uff72\107\uff72\110\216\111\uff72" +
                            "\001\002\000\052\044\uff7c\046\uff7c\051\uff7c\052\uff7c\054" +
                            "\uff7c\055\uff7c\056\uff7c\060\uff7c\061\uff7c\062\uff7c\064\uff7c" +
                            "\065\uff7c\066\uff7c\067\uff7c\071\uff7c\073\uff7c\106\uff7c\107" +
                            "\uff7c\110\uff7c\111\uff7c\001\002\000\052\044\uff71\046\uff71" +
                            "\051\212\052\201\054\207\055\204\056\210\060\uff71\061" +
                            "\uff71\062\uff71\064\uff71\065\uff71\066\217\067\214\071\uff71" +
                            "\073\uff71\106\uff71\107\uff71\110\216\111\205\001\002\000" +
                            "\052\044\uff6f\046\uff6f\051\212\052\201\054\207\055\204" +
                            "\056\210\060\206\061\213\062\215\064\uff6f\065\uff6f\066" +
                            "\217\067\214\071\uff6f\073\uff6f\106\211\107\203\110\216" +
                            "\111\205\001\002\000\052\044\uff79\046\uff79\051\uff79\052" +
                            "\uff79\054\207\055\204\056\210\060\uff79\061\uff79\062\uff79" +
                            "\064\uff79\065\uff79\066\uff79\067\uff79\071\uff79\073\uff79\106" +
                            "\uff79\107\uff79\110\uff79\111\uff79\001\002\000\054\044\uff8b" +
                            "\046\uff8b\047\254\051\uff8b\052\uff8b\054\uff8b\055\uff8b\056" +
                            "\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b\066\uff8b" +
                            "\067\uff8b\071\uff8b\073\uff8b\106\uff8b\107\uff8b\110\uff8b\111" +
                            "\uff8b\001\002\000\070\044\uff91\046\uff91\047\uff91\051\uff91" +
                            "\052\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061" +
                            "\uff91\062\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\244" +
                            "\071\uff91\073\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106" +
                            "\uff91\107\uff91\110\uff91\111\uff91\001\002\000\072\044\uff93" +
                            "\046\uff93\047\uff93\051\uff93\052\uff93\054\uff93\055\uff93\056" +
                            "\uff93\057\uff93\060\uff93\061\uff93\062\uff93\064\uff93\065\uff93" +
                            "\066\uff93\067\uff93\071\uff93\073\uff93\076\uff93\077\uff93\102" +
                            "\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93" +
                            "\111\uff93\001\002\000\036\016\060\017\061\043\162\050" +
                            "\176\052\171\063\164\072\170\076\173\077\174\112\056" +
                            "\113\062\114\063\115\057\116\015\001\002\000\044\051" +
                            "\212\052\201\054\207\055\204\056\210\060\206\061\213" +
                            "\062\215\064\202\065\220\066\217\067\214\071\246\106" +
                            "\211\107\203\110\216\111\205\001\002\000\074\044\uffb5" +
                            "\046\uffb5\047\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\056" +
                            "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5" +
                            "\066\uffb5\067\uffb5\070\250\071\uffb5\073\uffb5\076\uffb5\077" +
                            "\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5" +
                            "\110\uffb5\111\uffb5\001\002\000\072\044\uff92\046\uff92\047" +
                            "\uff92\051\uff92\052\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
                            "\060\uff92\061\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067" +
                            "\uff92\071\uff92\073\uff92\076\uff92\077\uff92\102\uff92\103\uff92" +
                            "\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\111\uff92\001" +
                            "\002\000\036\016\060\017\061\043\162\050\176\052\171" +
                            "\063\164\072\170\076\173\077\174\112\056\113\062\114" +
                            "\063\115\057\116\015\001\002\000\044\051\212\052\201" +
                            "\054\207\055\204\056\210\060\206\061\213\062\215\064" +
                            "\202\065\220\066\217\067\214\071\252\106\211\107\203" +
                            "\110\216\111\205\001\002\000\074\044\uffb5\046\uffb5\047" +
                            "\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
                            "\060\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
                            "\uffb5\070\250\071\uffb5\073\uffb5\076\uffb5\077\uffb5\102\uffb5" +
                            "\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111" +
                            "\uffb5\001\002\000\072\044\uffb6\046\uffb6\047\uffb6\051\uffb6" +
                            "\052\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
                            "\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\071\uffb6" +
                            "\073\uffb6\076\uffb6\077\uffb6\102\uffb6\103\uffb6\104\uffb6\105" +
                            "\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\001\002\000\004" +
                            "\116\015\001\002\000\072\044\uff94\046\uff94\047\uff94\051" +
                            "\uff94\052\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
                            "\061\uff94\062\uff94\064\uff94\065\uff94\066\uff94\067\uff94\071" +
                            "\uff94\073\uff94\076\uff94\077\uff94\102\uff94\103\uff94\104\uff94" +
                            "\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94\001\002\000" +
                            "\054\044\uff8a\046\uff8a\047\254\051\uff8a\052\uff8a\054\uff8a" +
                            "\055\uff8a\056\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a\065" +
                            "\uff8a\066\uff8a\067\uff8a\071\uff8a\073\uff8a\106\uff8a\107\uff8a" +
                            "\110\uff8a\111\uff8a\001\002\000\052\044\uff88\046\uff88\051" +
                            "\uff88\052\uff88\054\uff88\055\uff88\056\uff88\060\uff88\061\uff88" +
                            "\062\uff88\064\uff88\065\uff88\066\uff88\067\uff88\071\uff88\073" +
                            "\uff88\106\uff88\107\uff88\110\uff88\111\uff88\001\002\000\052" +
                            "\044\uff89\046\uff89\051\uff89\052\uff89\054\uff89\055\uff89\056" +
                            "\uff89\060\uff89\061\uff89\062\uff89\064\uff89\065\uff89\066\uff89" +
                            "\067\uff89\071\uff89\073\uff89\106\uff89\107\uff89\110\uff89\111" +
                            "\uff89\001\002\000\052\044\uff8c\046\uff8c\051\uff8c\052\uff8c" +
                            "\054\uff8c\055\uff8c\056\uff8c\060\uff8c\061\uff8c\062\uff8c\064" +
                            "\uff8c\065\uff8c\066\uff8c\067\uff8c\071\uff8c\073\uff8c\106\uff8c" +
                            "\107\uff8c\110\uff8c\111\uff8c\001\002\000\044\051\212\052" +
                            "\201\054\207\055\204\056\210\060\206\061\213\062\215" +
                            "\064\202\065\220\066\217\067\214\073\272\106\211\107" +
                            "\203\110\216\111\205\001\002\000\004\073\uff80\001\002" +
                            "\000\004\073\uff81\001\002\000\004\073\270\001\002\000" +
                            "\004\073\uff7f\001\002\000\004\073\uff7e\001\002\000\036" +
                            "\016\060\017\061\043\162\050\176\052\171\063\164\072" +
                            "\170\076\173\077\174\112\056\113\062\114\063\115\057" +
                            "\116\015\001\002\000\052\044\uff87\046\uff87\051\uff87\052" +
                            "\uff87\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87\062\uff87" +
                            "\064\uff87\065\uff87\066\uff87\067\uff87\071\uff87\073\uff87\106" +
                            "\uff87\107\uff87\110\uff87\111\uff87\001\002\000\052\044\uff8f" +
                            "\046\uff8f\051\uff8f\052\uff8f\054\uff8f\055\uff8f\056\uff8f\060" +
                            "\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f" +
                            "\071\uff8f\073\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f\001" +
                            "\002\000\004\072\274\001\002\000\040\016\060\017\061" +
                            "\043\162\050\176\052\171\063\164\072\170\073\uff63\076" +
                            "\173\077\174\112\056\113\062\114\063\115\057\116\015" +
                            "\001\002\000\046\046\uff65\051\212\052\201\054\207\055" +
                            "\204\056\210\060\206\061\213\062\215\064\202\065\220" +
                            "\066\217\067\214\073\uff65\106\211\107\203\110\216\111" +
                            "\205\001\002\000\004\073\277\001\002\000\052\044\uff66" +
                            "\046\uff66\051\uff66\052\uff66\054\uff66\055\uff66\056\uff66\060" +
                            "\uff66\061\uff66\062\uff66\064\uff66\065\uff66\066\uff66\067\uff66" +
                            "\071\uff66\073\uff66\106\uff66\107\uff66\110\uff66\111\uff66\001" +
                            "\002\000\006\046\301\073\uff61\001\002\000\040\016\060" +
                            "\017\061\043\162\050\176\052\171\063\164\072\170\073" +
                            "\uff63\076\173\077\174\112\056\113\062\114\063\115\057" +
                            "\116\015\001\002\000\004\073\uff64\001\002\000\004\073" +
                            "\uff62\001\002\000\052\044\uff8e\046\uff8e\051\uff8e\052\uff8e" +
                            "\054\uff8e\055\uff8e\056\uff8e\060\uff8e\061\uff8e\062\uff8e\064" +
                            "\uff8e\065\uff8e\066\uff8e\067\uff8e\071\uff8e\073\uff8e\106\uff8e" +
                            "\107\uff8e\110\uff8e\111\uff8e\001\002\000\004\044\306\001" +
                            "\002\000\050\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
                            "\012\uffa2\013\uffa2\014\uffa2\021\uffa2\024\uffa2\025\uffa2\027" +
                            "\uffa2\033\uffa2\034\uffa2\036\uffa2\040\uffa2\041\uffa2\042\uffa2" +
                            "\116\uffa2\001\002\000\024\006\024\007\007\010\006\011" +
                            "\005\012\017\013\026\014\016\021\020\116\015\001\002" +
                            "\000\004\073\311\001\002\000\052\044\uff86\046\uff86\051" +
                            "\uff86\052\uff86\054\uff86\055\uff86\056\uff86\060\uff86\061\uff86" +
                            "\062\uff86\064\uff86\065\uff86\066\uff86\067\uff86\071\uff86\073" +
                            "\uff86\106\uff86\107\uff86\110\uff86\111\uff86\001\002\000\004" +
                            "\044\324\001\002\000\050\004\uffaf\006\uffaf\007\uffaf\010" +
                            "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\021\uffaf\024\uffaf" +
                            "\025\uffaf\027\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf\041" +
                            "\uffaf\042\uffaf\116\uffaf\001\002\000\050\004\144\006\024" +
                            "\007\007\010\006\011\005\012\017\013\026\014\016\021" +
                            "\020\024\uffc4\025\137\027\135\033\151\034\141\036\152" +
                            "\040\316\041\312\042\133\116\015\001\002\000\004\024" +
                            "\322\001\002\000\004\044\321\001\002\000\050\004\144" +
                            "\006\024\007\007\010\006\011\005\012\017\013\026\014" +
                            "\016\021\020\024\uffc4\025\137\027\135\033\151\034\141" +
                            "\036\152\040\316\041\312\042\133\116\015\001\002\000" +
                            "\004\024\uffc6\001\002\000\050\004\uffae\006\uffae\007\uffae" +
                            "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\021\uffae\024" +
                            "\uffae\025\uffae\027\uffae\033\uffae\034\uffae\036\uffae\040\uffae" +
                            "\041\uffae\042\uffae\116\uffae\001\002\000\052\004\uffc7\006" +
                            "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
                            "\021\uffc7\024\uffc7\025\uffc7\027\uffc7\033\uffc7\034\uffc7\036" +
                            "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\116\uffc7\001\002" +
                            "\000\004\024\uffc5\001\002\000\050\004\uffad\006\uffad\007" +
                            "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\021\uffad" +
                            "\024\uffad\025\uffad\027\uffad\033\uffad\034\uffad\036\uffad\040" +
                            "\uffad\041\uffad\042\uffad\116\uffad\001\002\000\006\044\uff9f" +
                            "\116\015\001\002\000\004\044\330\001\002\000\004\044" +
                            "\uffa0\001\002\000\040\016\060\017\061\043\162\044\uff9d" +
                            "\050\176\052\171\063\164\072\170\076\173\077\174\112" +
                            "\056\113\062\114\063\115\057\116\015\001\002\000\044" +
                            "\044\uff9e\051\212\052\201\054\207\055\204\056\210\060" +
                            "\206\061\213\062\215\064\202\065\220\066\217\067\214" +
                            "\106\211\107\203\110\216\111\205\001\002\000\004\044" +
                            "\333\001\002\000\006\073\uff9b\116\015\001\002\000\004" +
                            "\073\336\001\002\000\004\073\uff9c\001\002\000\004\023" +
                            "\156\001\002\000\050\004\uffa3\006\uffa3\007\uffa3\010\uffa3" +
                            "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\021\uffa3\024\uffa3\025" +
                            "\uffa3\027\uffa3\033\uffa3\034\uffa3\036\uffa3\040\uffa3\041\uffa3" +
                            "\042\uffa3\116\uffa3\001\002\000\050\004\uffc1\006\uffc1\007" +
                            "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\021\uffc1" +
                            "\024\uffc1\025\uffc1\027\uffc1\033\uffc1\034\uffc1\036\uffc1\040" +
                            "\uffc1\041\uffc1\042\uffc1\116\uffc1\001\002\000\036\016\060" +
                            "\017\061\043\162\050\176\052\171\063\164\072\170\076" +
                            "\173\077\174\112\056\113\062\114\063\115\057\116\015" +
                            "\001\002\000\036\016\060\017\061\043\162\050\176\052" +
                            "\171\063\164\072\170\076\173\077\174\112\056\113\062" +
                            "\114\063\115\057\116\015\001\002\000\036\016\060\017" +
                            "\061\043\162\050\176\052\171\063\164\072\170\076\173" +
                            "\077\174\112\056\113\062\114\063\115\057\116\015\001" +
                            "\002\000\036\016\060\017\061\043\162\050\176\052\171" +
                            "\063\164\072\170\076\173\077\174\112\056\113\062\114" +
                            "\063\115\057\116\015\001\002\000\036\016\060\017\061" +
                            "\043\162\050\176\052\171\063\164\072\170\076\173\077" +
                            "\174\112\056\113\062\114\063\115\057\116\015\001\002" +
                            "\000\046\044\uff9a\051\212\052\201\054\207\055\204\056" +
                            "\210\060\206\061\213\062\215\064\202\065\220\066\217" +
                            "\067\214\073\uff9a\106\211\107\203\110\216\111\205\001" +
                            "\002\000\046\044\uff99\051\212\052\201\054\207\055\204" +
                            "\056\210\060\206\061\213\062\215\064\202\065\220\066" +
                            "\217\067\214\073\uff99\106\211\107\203\110\216\111\205" +
                            "\001\002\000\046\044\uff97\051\212\052\201\054\207\055" +
                            "\204\056\210\060\206\061\213\062\215\064\202\065\220" +
                            "\066\217\067\214\073\uff97\106\211\107\203\110\216\111" +
                            "\205\001\002\000\046\044\uff96\051\212\052\201\054\207" +
                            "\055\204\056\210\060\206\061\213\062\215\064\202\065" +
                            "\220\066\217\067\214\073\uff96\106\211\107\203\110\216" +
                            "\111\205\001\002\000\046\044\uff98\051\212\052\201\054" +
                            "\207\055\204\056\210\060\206\061\213\062\215\064\202" +
                            "\065\220\066\217\067\214\073\uff98\106\211\107\203\110" +
                            "\216\111\205\001\002\000\004\116\015\001\002\000\010" +
                            "\044\uffbb\046\uffbb\057\367\001\002\000\006\044\uffbf\046" +
                            "\uffbf\001\002\000\012\044\uffb5\046\uffb5\057\uffb5\070\250" +
                            "\001\002\000\010\044\uffb7\046\uffb7\057\uffb7\001\002\000" +
                            "\006\044\uffb8\046\361\001\002\000\004\116\015\001\002" +
                            "\000\004\044\uffbe\001\002\000\006\044\uffba\046\uffba\001" +
                            "\002\000\006\044\uffb8\046\361\001\002\000\004\044\uffb9" +
                            "\001\002\000\006\044\uffbd\046\uffbd\001\002\000\036\016" +
                            "\060\017\061\043\162\050\176\052\171\063\164\072\170" +
                            "\076\173\077\174\112\056\113\062\114\063\115\057\116" +
                            "\015\001\002\000\046\044\uffbc\046\uffbc\051\212\052\201" +
                            "\054\207\055\204\056\210\060\206\061\213\062\215\064" +
                            "\202\065\220\066\217\067\214\106\211\107\203\110\216" +
                            "\111\205\001\002\000\024\006\024\007\007\010\006\011" +
                            "\005\012\017\013\026\014\016\021\020\116\015\001\002" +
                            "\000\004\044\373\001\002\000\050\004\uffc2\006\uffc2\007" +
                            "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\021\uffc2" +
                            "\024\uffc2\025\uffc2\027\uffc2\033\uffc2\034\uffc2\036\uffc2\040" +
                            "\uffc2\041\uffc2\042\uffc2\116\uffc2\001\002\000\050\004\uffb2" +
                            "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
                            "\uffb2\021\uffb2\024\uffb2\025\uffb2\027\uffb2\033\uffb2\034\uffb2" +
                            "\036\uffb2\040\uffb2\041\uffb2\042\uffb2\116\uffb2\001\002\000" +
                            "\004\116\015\001\002\000\004\035\377\001\002\000\004" +
                            "\116\015\001\002\000\004\073\u0101\001\002\000\004\023" +
                            "\156\001\002\000\050\004\uffa1\006\uffa1\007\uffa1\010\uffa1" +
                            "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\021\uffa1\024\uffa1\025" +
                            "\uffa1\027\uffa1\033\uffa1\034\uffa1\036\uffa1\040\uffa1\041\uffa1" +
                            "\042\uffa1\116\uffa1\001\002\000\036\016\060\017\061\043" +
                            "\162\050\176\052\171\063\164\072\170\076\173\077\174" +
                            "\112\056\113\062\114\063\115\057\116\015\001\002\000" +
                            "\044\051\212\052\201\054\207\055\204\056\210\060\206" +
                            "\061\213\062\215\064\202\065\220\066\217\067\214\073" +
                            "\u0105\106\211\107\203\110\216\111\205\001\002\000\004" +
                            "\023\126\001\002\000\052\004\uffa8\006\uffa8\007\uffa8\010" +
                            "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\021\uffa8\024\uffa8" +
                            "\025\uffa8\026\u0107\027\uffa8\033\uffa8\034\uffa8\036\uffa8\040" +
                            "\uffa8\041\uffa8\042\uffa8\116\uffa8\001\002\000\004\023\126" +
                            "\001\002\000\050\004\uffac\006\uffac\007\uffac\010\uffac\011" +
                            "\uffac\012\uffac\013\uffac\014\uffac\021\uffac\024\uffac\025\uffac" +
                            "\027\uffac\033\uffac\034\uffac\036\uffac\040\uffac\041\uffac\042" +
                            "\uffac\116\uffac\001\002\000\050\004\uffa9\006\uffa9\007\uffa9" +
                            "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\021\uffa9\024" +
                            "\uffa9\025\uffa9\027\uffa9\033\uffa9\034\uffa9\036\uffa9\040\uffa9" +
                            "\041\uffa9\042\uffa9\116\uffa9\001\002\000\066\002\uffcb\004" +
                            "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
                            "\013\uffcb\014\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025" +
                            "\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
                            "\036\uffcb\040\uffcb\041\uffcb\042\uffcb\116\uffcb\001\002\000" +
                            "\004\116\015\001\002\000\006\047\254\073\uffab\001\002" +
                            "\000\004\073\u010e\001\002\000\004\030\u010f\001\002\000" +
                            "\004\045\u0110\001\002\000\004\023\u0111\001\002\000\006" +
                            "\031\u0113\032\uffa4\001\002\000\004\032\u011a\001\002\000" +
                            "\004\114\u0114\001\002\000\004\045\uffa7\001\002\000\004" +
                            "\045\u0116\001\002\000\004\023\126\001\002\000\006\031" +
                            "\uffa6\032\uffa6\001\002\000\006\031\u0113\032\uffa4\001\002" +
                            "\000\004\032\uffa5\001\002\000\004\045\u011b\001\002\000" +
                            "\004\023\126\001\002\000\004\024\u011d\001\002\000\050" +
                            "\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
                            "\uffaa\014\uffaa\021\uffaa\024\uffaa\025\uffaa\027\uffaa\033\uffaa" +
                            "\034\uffaa\036\uffaa\040\uffaa\041\uffaa\042\uffaa\116\uffaa\001" +
                            "\002\000\050\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
                            "\012\uffb1\013\uffb1\014\uffb1\021\uffb1\024\uffb1\025\uffb1\027" +
                            "\uffb1\033\uffb1\034\uffb1\036\uffb1\040\uffb1\041\uffb1\042\uffb1" +
                            "\116\uffb1\001\002\000\044\044\u0120\051\212\052\201\054" +
                            "\207\055\204\056\210\060\206\061\213\062\215\064\202" +
                            "\065\220\066\217\067\214\106\211\107\203\110\216\111" +
                            "\205\001\002\000\050\004\uffb0\006\uffb0\007\uffb0\010\uffb0" +
                            "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\021\uffb0\024\uffb0\025" +
                            "\uffb0\027\uffb0\033\uffb0\034\uffb0\036\uffb0\040\uffb0\041\uffb0" +
                            "\042\uffb0\116\uffb0\001\002\000\004\024\uffc9\001\002\000" +
                            "\004\116\015\001\002\000\004\044\u0124\001\002\000\034" +
                            "\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
                            "\ufff1\013\ufff1\014\ufff1\020\ufff1\021\ufff1\022\ufff1\116\ufff1" +
                            "\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u0122\000\020\002\013\003\024\004\010\005\022\006" +
                            "\012\015\007\063\020\001\001\000\006\013\u0121\014\074" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\013\103" +
                            "\014\074\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\065\031\001\001\000" +
                            "\004\063\027\001\001\000\002\001\001\000\020\002\026" +
                            "\003\024\004\010\005\022\006\012\015\007\063\020\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\063\032\001\001\000\002\001" +
                            "\001\000\010\016\034\020\042\022\041\001\001\000\004" +
                            "\066\063\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\063\051\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\020\046\022\041\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\021\052\001\001\000" +
                            "\002\001\001\000\004\057\054\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
                            "\016\064\017\065\020\042\022\041\001\001\000\004\067" +
                            "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\012\016\064\017\072\020" +
                            "\042\022\041\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\063\106\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\005\111\010\110" +
                            "\063\020\001\001\000\002\001\001\000\004\063\112\001" +
                            "\001\000\004\012\113\001\001\000\004\064\117\001\001" +
                            "\000\002\001\001\000\004\012\116\001\001\000\002\001" +
                            "\001\000\004\011\121\001\001\000\010\005\111\010\122" +
                            "\063\020\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\007\124\023\127\001\001\000\002\001\001\000\004" +
                            "\070\130\001\001\000\002\001\001\000\002\001\001\000" +
                            "\032\005\144\024\135\027\152\030\147\036\131\040\146" +
                            "\043\137\047\142\050\145\051\153\060\133\063\141\001" +
                            "\001\000\032\005\144\024\u0120\027\152\030\147\036\131" +
                            "\040\146\043\137\047\142\050\145\051\153\060\133\063" +
                            "\141\001\001\000\022\050\171\051\153\053\u011e\055\165" +
                            "\056\176\057\174\060\164\063\166\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\052\242\100" +
                            "\272\001\001\000\002\001\001\000\004\071\370\001\001" +
                            "\000\004\072\352\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\025\156" +
                            "\001\001\000\032\005\144\024\154\027\152\030\147\036" +
                            "\131\040\146\043\137\047\142\050\145\051\153\060\133" +
                            "\063\141\001\001\000\002\001\001\000\002\001\001\000" +
                            "\034\005\144\026\314\027\316\030\147\036\312\037\313" +
                            "\040\146\043\137\047\142\050\145\051\153\060\133\063" +
                            "\141\001\001\000\002\001\001\000\002\001\001\000\022" +
                            "\050\171\051\153\053\162\055\165\056\176\057\174\060" +
                            "\164\063\166\001\001\000\002\001\001\000\002\001\001" +
                            "\000\022\050\171\051\153\053\303\055\165\056\176\057" +
                            "\174\060\164\063\166\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\052\242\100\272\001\001\000\024\050" +
                            "\171\051\153\053\261\054\264\055\165\056\176\057\174" +
                            "\060\164\063\166\001\001\000\022\050\171\051\153\053" +
                            "\260\055\165\056\176\057\174\060\164\063\166\001\001" +
                            "\000\002\001\001\000\010\050\255\051\153\063\241\001" +
                            "\001\000\010\050\240\051\153\063\241\001\001\000\002" +
                            "\001\001\000\022\050\171\051\153\053\177\055\165\056" +
                            "\176\057\174\060\164\063\166\001\001\000\002\001\001" +
                            "\000\002\001\001\000\022\050\171\051\153\053\237\055" +
                            "\165\056\176\057\174\060\164\063\166\001\001\000\022" +
                            "\050\171\051\153\053\236\055\165\056\176\057\174\060" +
                            "\164\063\166\001\001\000\022\050\171\051\153\053\235" +
                            "\055\165\056\176\057\174\060\164\063\166\001\001\000" +
                            "\022\050\171\051\153\053\234\055\165\056\176\057\174" +
                            "\060\164\063\166\001\001\000\022\050\171\051\153\053" +
                            "\233\055\165\056\176\057\174\060\164\063\166\001\001" +
                            "\000\022\050\171\051\153\053\232\055\165\056\176\057" +
                            "\174\060\164\063\166\001\001\000\022\050\171\051\153" +
                            "\053\231\055\165\056\176\057\174\060\164\063\166\001" +
                            "\001\000\022\050\171\051\153\053\230\055\165\056\176" +
                            "\057\174\060\164\063\166\001\001\000\022\050\171\051" +
                            "\153\053\227\055\165\056\176\057\174\060\164\063\166" +
                            "\001\001\000\022\050\171\051\153\053\226\055\165\056" +
                            "\176\057\174\060\164\063\166\001\001\000\022\050\171" +
                            "\051\153\053\225\055\165\056\176\057\174\060\164\063" +
                            "\166\001\001\000\022\050\171\051\153\053\224\055\165" +
                            "\056\176\057\174\060\164\063\166\001\001\000\022\050" +
                            "\171\051\153\053\223\055\165\056\176\057\174\060\164" +
                            "\063\166\001\001\000\022\050\171\051\153\053\222\055" +
                            "\165\056\176\057\174\060\164\063\166\001\001\000\022" +
                            "\050\171\051\153\053\221\055\165\056\176\057\174\060" +
                            "\164\063\166\001\001\000\022\050\171\051\153\053\220" +
                            "\055\165\056\176\057\174\060\164\063\166\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\052\242\001\001\000\002\001\001\000" +
                            "\022\050\171\051\153\053\244\055\165\056\176\057\174" +
                            "\060\164\063\166\001\001\000\002\001\001\000\004\035" +
                            "\246\001\001\000\002\001\001\000\022\050\171\051\153" +
                            "\053\250\055\165\056\176\057\174\060\164\063\166\001" +
                            "\001\000\002\001\001\000\004\035\252\001\001\000\002" +
                            "\001\001\000\004\063\254\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\022\050\171\051\153\053\270\055\165\056\176\057" +
                            "\174\060\164\063\166\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\024\050\171\051\153\053" +
                            "\274\055\165\056\176\057\174\060\164\061\275\063\166" +
                            "\001\001\000\004\101\277\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\062\301\001\001\000\024\050\171" +
                            "\051\153\053\274\055\165\056\176\057\174\060\164\061" +
                            "\302\063\166\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\005\307\063\020\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
                            "\144\026\322\027\316\030\147\036\312\037\313\040\146" +
                            "\043\137\047\142\050\145\051\153\060\133\063\141\001" +
                            "\001\000\002\001\001\000\002\001\001\000\034\005\144" +
                            "\026\317\027\316\030\147\036\312\037\313\040\146\043" +
                            "\137\047\142\050\145\051\153\060\133\063\141\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\014\044\325\047\326" +
                            "\050\145\051\153\063\241\001\001\000\002\001\001\000" +
                            "\002\001\001\000\024\045\331\050\171\051\153\053\330" +
                            "\055\165\056\176\057\174\060\164\063\166\001\001\000" +
                            "\002\001\001\000\002\001\001\000\014\046\333\047\334" +
                            "\050\145\051\153\063\241\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\025\336\001\001\000\002\001\001" +
                            "\000\002\001\001\000\022\050\171\051\153\053\351\055" +
                            "\165\056\176\057\174\060\164\063\166\001\001\000\022" +
                            "\050\171\051\153\053\350\055\165\056\176\057\174\060" +
                            "\164\063\166\001\001\000\022\050\171\051\153\053\347" +
                            "\055\165\056\176\057\174\060\164\063\166\001\001\000" +
                            "\022\050\171\051\153\053\346\055\165\056\176\057\174" +
                            "\060\164\063\166\001\001\000\022\050\171\051\153\053" +
                            "\345\055\165\056\176\057\174\060\164\063\166\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\031\354\034\353" +
                            "\063\355\001\001\000\004\032\365\001\001\000\004\073" +
                            "\357\001\001\000\004\035\356\001\001\000\002\001\001" +
                            "\000\004\033\361\001\001\000\010\031\362\034\353\063" +
                            "\355\001\001\000\002\001\001\000\004\074\363\001\001" +
                            "\000\004\033\364\001\001\000\002\001\001\000\002\001" +
                            "\001\000\022\050\171\051\153\053\367\055\165\056\176" +
                            "\057\174\060\164\063\166\001\001\000\002\001\001\000" +
                            "\010\005\144\030\371\063\020\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\063\375\001" +
                            "\001\000\002\001\001\000\004\063\377\001\001\000\002" +
                            "\001\001\000\004\025\u0101\001\001\000\002\001\001\000" +
                            "\022\050\171\051\153\053\u0103\055\165\056\176\057\174" +
                            "\060\164\063\166\001\001\000\002\001\001\000\004\023" +
                            "\u0105\001\001\000\004\041\u0107\001\001\000\004\023\u0108" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\050\u010b\051\153\063\241\001\001\000\004" +
                            "\075\u010c\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\042\u0111\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\076\u0114\001" +
                            "\001\000\002\001\001\000\004\023\u0116\001\001\000\004" +
                            "\077\u0117\001\001\000\004\042\u0118\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\023\u011b\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\063\u0122" +
                            "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return scanner.next_token();
    }


    private Scanner scanner;

    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= program EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // program ::= program_part program
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // program ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // program_part ::= global_var_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // program_part ::= func_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // program_part ::= struct_dcl
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ProgramContent cont = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Program.getInstance().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // global_var_dcl ::= variable_type id SEMI
                {
                    ProgramContent RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new GlobalVarDCL(t, id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // variable_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.BOOL;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // variable_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.CHAR;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // variable_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // variable_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // variable_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // variable_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // variable_type ::= STRING
                {
                    Type RESULT = null;
                    RESULT = Type.STRING;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // variable_type ::= AUTO
                {
                    Type RESULT = null;
                    RESULT = Type.AUTO;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // variable_type ::= id
                {
                    Type RESULT = null;
                    int typeleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int typeright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String type = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    new Type(type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // func_dcl ::= EXTERN function_return_type id SEMI
                {
                    ProgramContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // func_dcl ::= FUNCTION function_return_type id PRANTOP arguments PRANTCL func_dcl_part
                {
                    ProgramContent RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new FunctionDCL(t, id, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // func_dcl_part ::= SEMI
                {
                    Block RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // func_dcl_part ::= block
                {
                    Block RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // NT$0 ::=
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    t = b ? Type.toArray(t) : t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 50, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // arguments ::= variable_type id function_array_dcl NT$0 arguments_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    FunctionArguments.getInstance().addArgument(id, t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // arguments ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // arguments_part ::= COMA arguments
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // arguments_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl
                {
                    Boolean RESULT = null;
                    RESULT = true;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // function_array_dcl ::=
                {
                    Boolean RESULT = null;
                    RESULT = false;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // function_return_type ::= function_argument_type
                {
                    Type RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = t;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_return_type", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // function_return_type ::= VOID
                {
                    Type RESULT = null;
                    RESULT = Type.VOID;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_return_type", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // function_argument_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.BOOL;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // function_argument_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.CHAR;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // function_argument_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // function_argument_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // function_argument_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // function_argument_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // function_argument_type ::= STRING
                {
                    Type RESULT = null;
                    RESULT = Type.STRING;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // NT$1 ::=
                {
                    ProgramContent RESULT = null;
                    Structures.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 51, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // NT$2 ::=
                {
                    ProgramContent RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Structures.getInstance().addDCL(dcl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2", 52, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // struct_dcl ::= RECORD NT$1 id BEGIN struct_var_dcl NT$2 struct_more_var_dcl END RECORD SEMI
                {
                    ProgramContent RESULT = null;
                    // propagate RESULT from NT$2
                    RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    RESULT = Structures.getInstance().getDCL(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // NT$3 ::=
                {
                    Object RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Structures.getInstance().addDCL(dcl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3", 53, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // struct_more_var_dcl ::= struct_var_dcl NT$3 struct_more_var_dcl
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$3
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // struct_more_var_dcl ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI
                {
                    StructVarDCL RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    dcl.getDescriptor().setConst(true);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // struct_var_dcl ::= struct_var_dcl_part SEMI
                {
                    StructVarDCL RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    dcl.getDescriptor().setConst(false);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // struct_var_dcl_part ::= struct_type id struct_var_dcl_cnt
                {
                    StructVarDCL RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StructVarDCL dcl = (StructVarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    dcl.getDescriptor().setType(t);
                    dcl.getDescriptor().setName(id);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // struct_var_dcl_cnt ::= ASSIGN const_val
                {
                    StructVarDCL RESULT = null;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Constant c = (Constant) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new StructVarDCL(c);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // struct_var_dcl_cnt ::=
                {
                    StructVarDCL RESULT = null;
                    RESULT = new StructVarDCL(null);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // struct_type ::= BOOL
                {
                    Type RESULT = null;
                    RESULT = Type.BOOL;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // struct_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.CHAR;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // struct_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // struct_type ::= LONG
                {
                    Type RESULT = null;
                    RESULT = Type.LONG;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // struct_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // struct_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // NT$4 ::=
                {
                    Block RESULT = null;
                    Blocks.getInstance().add(new Block());
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4", 54, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // block ::= BEGIN NT$4 block_content END
                {
                    Block RESULT = null;
                    // propagate RESULT from NT$4
                    RESULT = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = Blocks.getInstance().getCurrent();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // block_content ::= var_dcl block_content
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // block_content ::= statement block_content
                {
                    BlockContent RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // block_content ::=
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // loop_block ::= BEGIN loop_block_content END
                {
                    Block RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // loop_block_content ::= var_dcl loop_block_content
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // loop_block_content ::= loop_statement loop_block_content
                {
                    BlockContent RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // loop_block_content ::=
                {
                    BlockContent RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // NT$5 ::=
                {
                    Object RESULT = null;
                    Variables.getInstance().setConstant(true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5", 55, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // var_dcl ::= CONST NT$5 var_dcl_part SEMI
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$5
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Variables.getInstance().setConstant(false);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // var_dcl ::= var_dcl_part SEMI
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // NT$6 ::=
                {
                    Object RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Variables.getInstance().setType(t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6", 56, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // NT$7 ::=
                {
                    Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7", 57, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // var_dcl_part ::= variable_type NT$6 var_dcl_cnt NT$7 var_dcl_cnt_extension
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$7
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // var_dcl_cnt ::= single_var var_dcl_cnt_part
                {
                    BlockContent RESULT = null;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    DCL dcl = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new CompleteDCL(dcl, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // var_dcl_cnt_part ::= ASSIGN expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // var_dcl_cnt_part ::=
                {
                    Expression RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // NT$8 ::=
                {
                    Object RESULT = null;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Blocks.getInstance().getCurrent().addContent(cont);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8", 58, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // var_dcl_cnt_extension ::= COMA var_dcl_cnt NT$8 var_dcl_cnt_extension
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$8
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int contleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int contright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    BlockContent cont = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // var_dcl_cnt_extension ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // single_var ::= id array_part
                {
                    DCL RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int dclleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int dclright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    DCL dcl = (DCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    dcl.setId(id);
                    RESULT = dcl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // array_part ::= BRACKOP expr BRACKCL array_part
                {
                    DCL RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new ArrayDCL(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // array_part ::=
                {
                    DCL RESULT = null;
                    RESULT = new VariableDCL();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // statement ::= cond_stmt
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // statement ::= loop_stmt
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // statement ::= assignment SEMI
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Assignment stmt = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // statement ::= function_call SEMI
                {
                    BlockContent RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    FunctionAccess a = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new FunctionCall(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // statement ::= RETURN expr SEMI
                {
                    BlockContent RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Return(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // loop_statement ::= statement
                {
                    BlockContent RESULT = null;
                    int stmtleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int stmtright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BlockContent stmt = (BlockContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = stmt;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // loop_statement ::= BREAK SEMI
                {
                    BlockContent RESULT = null;
                    new Break();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // loop_statement ::= CONTINUE SEMI
                {
                    BlockContent RESULT = null;
                    new Continue();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement", 29, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // cond_stmt ::= IF PRANTOP expr PRANTCL block else_part
                {
                    Statement RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int ifbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int ifbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Block ifb = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ebleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int ebright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block eb = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new If(e, ifb, eb);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // NT$9 ::=
                {
                    Statement RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Cases.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9", 59, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // cond_stmt ::= SWITCH PRANTOP variable NT$9 PRANTCL OF COL BEGIN case_part DEFAULT COL block END
                {
                    Statement RESULT = null;
                    // propagate RESULT from NT$9
                    RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 10)).value;
                    int dbleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dbright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Block db = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Switch(a, db);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt", 30, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 12)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // else_part ::= ELSE block
                {
                    Block RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = b;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // else_part ::=
                {
                    Block RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part", 31, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // NT$10 ::=
                {
                    Object RESULT = null;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    i = scanner.ICV;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10", 60, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // NT$11 ::=
                {
                    Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    Cases.getInstance().addCase(i, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11", 61, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // case_part ::= CASE INT_LIT NT$10 COL block NT$11 case_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$11
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // case_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part", 32, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL loop_block
                {
                    Statement RESULT = null;
                    int inleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).left;
                    int inright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).right;
                    Assignment in = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int upleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int upright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Assignment up = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new For(in, e, up, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // loop_stmt ::= REPEAT loop_block UNTIL PRANTOP expr PRANTCL SEMI
                {
                    Statement RESULT = null;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new Repeat(b, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // loop_stmt ::= FOREACH PRANTOP id IN id PRANTCL loop_block
                {
                    Statement RESULT = null;
                    int i1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int i1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String i1 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int i2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int i2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String i2 = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Block b = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Foreach(i1, i2, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt", 33, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // loop_init_part ::= assignment
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // loop_init_part ::=
                {
                    Assignment RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part", 34, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // loop_cond_part ::= expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // loop_cond_part ::=
                {
                    Expression RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part", 35, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // loop_update_part ::= assignment
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Assignment a = (Assignment) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // loop_update_part ::=
                {
                    Assignment RESULT = null;
                    RESULT = null;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part", 36, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // assignment ::= variable ASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DirectAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // assignment ::= variable PLUSASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PlusAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // assignment ::= variable MINUSASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MinusAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // assignment ::= variable MULTASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MultiplyAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // assignment ::= variable DIVASSIGN expr
                {
                    Assignment RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DivisionAssign(a, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment", 37, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // variable ::= var_access
                {
                    Access RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // variable ::= variable DOT id
                {
                    Access RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new StructureAccess(a);
                    RESULT.setDescriptor(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable", 38, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // var_access ::= id var_access_array_part
                {
                    Access RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    a.setDescriptor(id);
                    RESULT = a;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access", 39, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // var_access_array_part ::= BRACKOP expr BRACKCL array_part
                {
                    Access RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new ArrayAccess(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // var_access_array_part ::=
                {
                    Access RESULT = null;
                    RESULT = new VariableAccess();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part", 40, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // expr ::= const_val
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Constant e = (Constant) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // expr ::= PRANTOP expr PRANTCL
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // expr ::= NOT expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Not(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // expr ::= BINOT expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryNot(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // expr ::= MINUS expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Uminus(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // expr ::= PREFMINUS2 variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrefixMinus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // expr ::= PREFPLUS2 variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrefixPlus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // expr ::= variable PREFMINUS2
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new PostfixMinus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // expr ::= variable PREFPLUS2
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new PostfixPlus2(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // expr ::= PRANTOP casting_type PRANTCL expr
                {
                    Expression RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Casting(t, e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // expr ::= SIZEOF PRANTOP variable_type PRANTCL
                {
                    Expression RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Type t = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new SizeOf(t);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // expr ::= arithmatic_expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // expr ::= conditional_expr
                {
                    Expression RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // expr ::= variable
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Access a = (Access) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Variable(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // expr ::= function_call
                {
                    Expression RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    FunctionAccess a = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ast.expr.function.FunctionCall(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 41, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // casting_type ::= CHAR
                {
                    Type RESULT = null;
                    RESULT = Type.CHAR;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // casting_type ::= INT
                {
                    Type RESULT = null;
                    RESULT = Type.INT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // casting_type ::= FLOAT
                {
                    Type RESULT = null;
                    RESULT = Type.FLOAT;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // casting_type ::= DOUBLE
                {
                    Type RESULT = null;
                    RESULT = Type.DOUBLE;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type", 42, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // arithmatic_expr ::= expr MULT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Mult(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // arithmatic_expr ::= expr DIVIDE expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Div(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // arithmatic_expr ::= expr MOD expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Mod(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // arithmatic_expr ::= expr PLUS expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Add(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // arithmatic_expr ::= expr MINUS expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Sub(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // arithmatic_expr ::= expr BIAND expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryAnd(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // arithmatic_expr ::= expr BIOR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryOr(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // arithmatic_expr ::= expr BIEXOR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryXor(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr", 43, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // conditional_expr ::= expr LT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LT(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // conditional_expr ::= expr LTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 142: // conditional_expr ::= expr GT expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GT(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 143: // conditional_expr ::= expr GTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 144: // conditional_expr ::= expr EQEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new EQ(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 145: // conditional_expr ::= expr NOTEQ expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NE(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 146: // conditional_expr ::= expr AND expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryAnd(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 147: // conditional_expr ::= expr OR expr
                {
                    Expression RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BinaryOr(e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr", 44, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 148: // const_val ::= TRUE
                {
                    Constant RESULT = null;
                    RESULT = new BooleanConstant(true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 149: // const_val ::= FALSE
                {
                    Constant RESULT = null;
                    RESULT = new BooleanConstant(false);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 150: // const_val ::= CHAR_LIT
                {
                    Constant RESULT = null;
                    RESULT = new CharConstant(scanner.string);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 151: // const_val ::= INT_LIT
                {
                    Constant RESULT = null;
                    RESULT = new IntegerConstant(scanner.ICV);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 152: // const_val ::= FLOAT_LIT
                {
                    Constant RESULT = null;
                    RESULT = new DoubleConstant(scanner.RCV);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 153: // const_val ::= STR_LIT
                {
                    Constant RESULT = null;
                    RESULT = new StringConstant(scanner.string);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val", 45, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 154: // NT$12 ::=
                {
                    FunctionAccess RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    FunctionAccessData.getInstance().init();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12", 62, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 155: // function_call ::= id NT$12 PRANTOP parameters PRANTCL
                {
                    FunctionAccess RESULT = null;
                    // propagate RESULT from NT$12
                    RESULT = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    RESULT = new FunctionAccess();
                    RESULT.setDescriptor(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call", 46, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 156: // NT$13 ::=
                {
                    Object RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    FunctionAccessData.getInstance().addParameter(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13", 63, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 157: // parameters ::= expr NT$13 parameters_part
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$13
                    RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 158: // parameters ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters", 47, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 159: // parameters_part ::= COMA parameters
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 160: // parameters_part ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part", 48, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 161: // id ::= ID
                {
                    String RESULT = null;
                    RESULT = scanner.current.toString();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("id", 49, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
