/* The following code was generated by JFlex 1.7.0 */

import symbol.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.flex</tt>
 */
public class Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int ENDOFLINECOMMENT = 2;
    public static final int MULTIPLELINECOMMENT = 4;
    public static final int STRING = 6;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\3\1\2\2\0\1\1\22\0\1\36\1\66\1\11\1\62" +
                    "\1\0\1\63\1\67\1\6\1\100\1\101\1\4\1\27\1\61\1\33" +
                    "\1\34\1\5\1\20\7\21\2\16\1\60\1\57\1\72\1\64\1\73" +
                    "\1\65\1\0\4\23\1\25\1\30\5\35\1\15\10\35\1\14\5\35" +
                    "\1\76\1\7\1\77\1\71\1\35\1\0\1\45\1\24\1\37\1\50" +
                    "\1\26\1\31\1\47\1\51\1\46\1\35\1\54\1\13\1\52\1\41" +
                    "\1\40\1\32\1\35\1\10\1\42\1\43\1\12\1\44\1\53\1\22" +
                    "\1\55\1\56\1\74\1\70\1\75\54\0\1\35\12\0\1\35\4\0" +
                    "\1\35\5\0\27\35\1\0\37\35\1\0\u01ca\35\4\0\14\35\16\0" +
                    "\5\35\7\0\1\35\1\0\1\35\21\0\165\35\1\0\2\35\2\0" +
                    "\4\35\1\0\1\35\6\0\1\35\1\0\3\35\1\0\1\35\1\0" +
                    "\24\35\1\0\123\35\1\0\213\35\1\0\255\35\1\0\46\35\2\0" +
                    "\1\35\7\0\47\35\11\0\55\35\1\0\1\35\1\0\2\35\1\0" +
                    "\2\35\1\0\1\35\10\0\33\35\5\0\3\35\35\0\13\35\5\0" +
                    "\100\35\12\17\4\0\146\35\1\0\10\35\2\0\12\35\1\0\6\35" +
                    "\12\17\3\35\2\0\1\35\20\0\73\35\2\0\145\35\16\0\12\17" +
                    "\54\35\4\0\1\35\5\0\56\35\22\0\34\35\104\0\25\35\1\0" +
                    "\10\35\26\0\16\35\1\0\201\35\2\0\12\17\1\0\23\35\1\0" +
                    "\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\1\35\3\0" +
                    "\4\35\2\0\11\35\2\0\2\35\2\0\4\35\10\0\1\35\4\0" +
                    "\2\35\1\0\5\35\2\0\12\17\2\35\17\0\3\35\1\0\6\35" +
                    "\4\0\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0\2\35" +
                    "\1\0\2\35\2\0\1\35\1\0\5\35\4\0\2\35\2\0\3\35" +
                    "\3\0\1\35\7\0\4\35\1\0\1\35\7\0\12\17\6\35\13\0" +
                    "\3\35\1\0\11\35\1\0\3\35\1\0\26\35\1\0\7\35\1\0" +
                    "\2\35\1\0\5\35\2\0\12\35\1\0\3\35\1\0\3\35\2\0" +
                    "\1\35\17\0\4\35\2\0\12\17\11\0\1\35\7\0\3\35\1\0" +
                    "\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0" +
                    "\5\35\2\0\11\35\2\0\2\35\2\0\3\35\10\0\2\35\4\0" +
                    "\2\35\1\0\5\35\2\0\12\17\1\0\1\35\20\0\2\35\1\0" +
                    "\6\35\3\0\3\35\1\0\4\35\3\0\2\35\1\0\1\35\1\0" +
                    "\2\35\3\0\2\35\3\0\3\35\3\0\14\35\4\0\5\35\3\0" +
                    "\3\35\1\0\4\35\2\0\1\35\6\0\1\35\16\0\12\17\20\0" +
                    "\4\35\1\0\10\35\1\0\3\35\1\0\27\35\1\0\20\35\3\0" +
                    "\10\35\1\0\3\35\1\0\4\35\7\0\2\35\1\0\3\35\5\0" +
                    "\4\35\2\0\12\17\20\0\4\35\1\0\10\35\1\0\3\35\1\0" +
                    "\27\35\1\0\12\35\1\0\5\35\2\0\11\35\1\0\3\35\1\0" +
                    "\4\35\7\0\2\35\7\0\1\35\1\0\4\35\2\0\12\17\1\0" +
                    "\2\35\16\0\3\35\1\0\10\35\1\0\3\35\1\0\51\35\2\0" +
                    "\10\35\1\0\3\35\1\0\5\35\5\0\4\35\7\0\5\35\2\0" +
                    "\12\17\12\0\6\35\2\0\2\35\1\0\22\35\3\0\30\35\1\0" +
                    "\11\35\1\0\1\35\2\0\7\35\3\0\1\35\4\0\6\35\1\0" +
                    "\1\35\1\0\10\35\6\0\12\17\2\0\2\35\15\0\72\35\5\0" +
                    "\17\35\1\0\12\17\47\0\2\35\1\0\1\35\2\0\2\35\1\0" +
                    "\1\35\2\0\1\35\6\0\4\35\1\0\7\35\1\0\3\35\1\0" +
                    "\1\35\1\0\1\35\2\0\2\35\1\0\15\35\1\0\3\35\2\0" +
                    "\5\35\1\0\1\35\1\0\6\35\2\0\12\17\2\0\4\35\40\0" +
                    "\1\35\27\0\2\35\6\0\12\17\13\0\1\35\1\0\1\35\1\0" +
                    "\1\35\4\0\12\35\1\0\44\35\4\0\24\35\1\0\22\35\1\0" +
                    "\44\35\11\0\1\35\71\0\100\35\12\17\6\0\100\35\12\17\4\35" +
                    "\2\0\46\35\1\0\1\35\5\0\1\35\2\0\53\35\1\0\u014d\35" +
                    "\1\0\4\35\2\0\7\35\1\0\1\35\1\0\4\35\2\0\51\35" +
                    "\1\0\4\35\2\0\41\35\1\0\4\35\2\0\7\35\1\0\1\35" +
                    "\1\0\4\35\2\0\17\35\1\0\71\35\1\0\4\35\2\0\103\35" +
                    "\2\0\3\35\40\0\20\35\20\0\126\35\2\0\6\35\3\0\u026c\35" +
                    "\2\0\21\35\1\0\32\35\5\0\113\35\3\0\13\35\7\0\15\35" +
                    "\1\0\7\35\13\0\25\35\13\0\24\35\14\0\15\35\1\0\3\35" +
                    "\1\0\2\35\14\0\124\35\3\0\1\35\4\0\2\35\2\0\12\17" +
                    "\41\0\3\35\2\0\12\17\6\0\130\35\10\0\53\35\5\0\106\35" +
                    "\12\0\37\35\1\0\14\35\4\0\14\35\12\0\12\17\36\35\2\0" +
                    "\5\35\13\0\54\35\4\0\32\35\6\0\12\17\46\0\34\35\4\0" +
                    "\77\35\1\0\35\35\2\0\1\35\12\17\6\0\12\17\15\0\1\35" +
                    "\10\0\17\35\101\0\114\35\4\0\12\17\21\0\11\35\14\0\60\35" +
                    "\12\17\72\35\14\0\70\35\10\0\12\17\3\0\3\35\12\17\44\35" +
                    "\2\0\11\35\107\0\3\35\1\0\43\35\1\0\2\35\6\0\366\35" +
                    "\5\0\u011b\35\2\0\6\35\2\0\46\35\2\0\6\35\2\0\10\35" +
                    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\37\35\2\0\65\35" +
                    "\1\0\7\35\1\0\1\35\3\0\3\35\1\0\7\35\3\0\4\35" +
                    "\2\0\6\35\4\0\15\35\5\0\3\35\1\0\7\35\102\0\2\35" +
                    "\23\0\1\35\34\0\1\35\15\0\1\35\20\0\15\35\63\0\41\35" +
                    "\21\0\1\35\4\0\1\35\2\0\12\35\1\0\1\35\3\0\5\35" +
                    "\6\0\1\35\1\0\1\35\1\0\1\35\1\0\4\35\1\0\13\35" +
                    "\2\0\4\35\5\0\5\35\4\0\1\35\21\0\51\35\u032d\0\64\35" +
                    "\u0716\0\57\35\1\0\57\35\1\0\205\35\6\0\11\35\14\0\46\35" +
                    "\1\0\1\35\5\0\1\35\2\0\70\35\7\0\1\35\17\0\30\35" +
                    "\11\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35" +
                    "\1\0\7\35\1\0\7\35\1\0\7\35\1\0\40\35\57\0\1\35" +
                    "\u01d5\0\3\35\31\0\17\35\1\0\5\35\2\0\5\35\4\0\126\35" +
                    "\2\0\2\35\2\0\3\35\1\0\132\35\1\0\4\35\5\0\51\35" +
                    "\3\0\136\35\21\0\33\35\65\0\20\35\u0200\0\u19b6\35\112\0\u51d6\35" +
                    "\52\0\u048d\35\103\0\56\35\2\0\u010d\35\3\0\20\35\12\17\2\35" +
                    "\24\0\63\35\1\0\12\35\1\0\163\35\45\0\11\35\2\0\147\35" +
                    "\2\0\44\35\1\0\10\35\77\0\61\35\30\0\64\35\14\0\106\35" +
                    "\12\0\12\17\6\0\30\35\3\0\1\35\1\0\1\35\2\0\12\17" +
                    "\44\35\2\0\44\35\14\0\35\35\3\0\101\35\16\0\1\35\12\17" +
                    "\6\0\20\35\12\17\5\35\1\0\67\35\11\0\16\35\2\0\12\17" +
                    "\6\0\27\35\3\0\111\35\30\0\3\35\2\0\20\35\2\0\5\35" +
                    "\12\0\6\35\2\0\6\35\2\0\6\35\11\0\7\35\1\0\7\35" +
                    "\1\0\53\35\1\0\12\35\12\0\173\35\1\0\2\35\2\0\12\17" +
                    "\6\0\u2ba4\35\14\0\27\35\4\0\61\35\u2104\0\u016e\35\2\0\152\35" +
                    "\46\0\7\35\14\0\5\35\5\0\14\35\1\0\15\35\1\0\5\35" +
                    "\1\0\1\35\1\0\2\35\1\0\2\35\1\0\154\35\41\0\u016b\35" +
                    "\22\0\100\35\2\0\66\35\50\0\14\35\4\0\20\35\20\0\20\35" +
                    "\3\0\2\35\30\0\3\35\40\0\5\35\1\0\207\35\23\0\12\17" +
                    "\7\0\32\35\4\0\1\35\1\0\32\35\13\0\131\35\3\0\6\35" +
                    "\2\0\6\35\2\0\6\35\2\0\3\35\43\0\14\35\1\0\32\35" +
                    "\1\0\23\35\1\0\2\35\1\0\17\35\2\0\16\35\42\0\173\35" +
                    "\105\0\65\35\210\0\1\35\202\0\35\35\3\0\61\35\17\0\1\35" +
                    "\37\0\40\35\20\0\33\35\5\0\53\35\5\0\36\35\2\0\44\35" +
                    "\4\0\10\35\1\0\5\35\52\0\236\35\2\0\12\17\6\0\44\35" +
                    "\4\0\44\35\4\0\50\35\10\0\64\35\234\0\u0137\35\11\0\26\35" +
                    "\12\0\10\35\230\0\6\35\2\0\1\35\1\0\54\35\1\0\2\35" +
                    "\3\0\1\35\2\0\27\35\12\0\27\35\11\0\37\35\101\0\23\35" +
                    "\1\0\2\35\12\0\26\35\12\0\32\35\106\0\70\35\6\0\2\35" +
                    "\100\0\4\35\1\0\2\35\5\0\10\35\1\0\3\35\1\0\33\35" +
                    "\4\0\3\35\4\0\1\35\40\0\35\35\3\0\35\35\43\0\10\35" +
                    "\1\0\36\35\31\0\66\35\12\0\26\35\12\0\23\35\15\0\22\35" +
                    "\156\0\111\35\67\0\63\35\15\0\63\35\u030d\0\107\35\37\0\12\17" +
                    "\17\0\74\35\25\0\31\35\7\0\12\17\6\0\65\35\1\0\12\17" +
                    "\20\0\44\35\2\0\1\35\11\0\105\35\5\0\3\35\3\0\12\17" +
                    "\1\35\1\0\1\35\43\0\22\35\1\0\45\35\6\0\1\35\101\0" +
                    "\7\35\1\0\1\35\1\0\4\35\1\0\17\35\1\0\12\35\7\0" +
                    "\73\35\5\0\12\17\6\0\4\35\1\0\10\35\2\0\2\35\2\0" +
                    "\26\35\1\0\7\35\1\0\2\35\1\0\5\35\2\0\11\35\2\0" +
                    "\2\35\2\0\3\35\2\0\1\35\6\0\1\35\5\0\7\35\2\0" +
                    "\7\35\3\0\5\35\213\0\113\35\5\0\12\17\46\0\106\35\1\0" +
                    "\1\35\10\0\12\17\246\0\66\35\2\0\11\35\27\0\6\35\42\0" +
                    "\101\35\3\0\1\35\13\0\12\17\46\0\70\35\10\0\12\17\66\0" +
                    "\32\35\3\0\17\35\4\0\12\17\u0166\0\100\35\12\17\25\0\1\35" +
                    "\u01c0\0\71\35\u0107\0\11\35\1\0\55\35\1\0\11\35\17\0\12\17" +
                    "\30\0\36\35\2\0\26\35\1\0\16\35\u0349\0\u039a\35\146\0\157\35" +
                    "\21\0\304\35\u0abc\0\u042f\35\u0fd1\0\u0247\35\u21b9\0\u0239\35\7\0\37\35" +
                    "\1\0\12\17\146\0\36\35\2\0\5\35\13\0\67\35\11\0\4\35" +
                    "\14\0\12\17\11\0\25\35\5\0\23\35\u0370\0\105\35\13\0\57\35" +
                    "\20\0\21\35\100\0\1\35\37\0\u17ed\35\23\0\u02f3\35\u250d\0\2\35" +
                    "\u0bfe\0\153\35\5\0\15\35\3\0\11\35\7\0\12\35\3\0\2\35" +
                    "\u14c6\0\5\35\3\0\6\35\10\0\10\35\2\0\7\35\36\0\4\35" +
                    "\224\0\3\35\u01bb\0\125\35\1\0\107\35\1\0\2\35\2\0\1\35" +
                    "\2\0\2\35\2\0\4\35\1\0\14\35\1\0\1\35\1\0\7\35" +
                    "\1\0\101\35\1\0\4\35\2\0\10\35\1\0\7\35\1\0\34\35" +
                    "\1\0\4\35\1\0\5\35\1\0\1\35\3\0\7\35\1\0\u0154\35" +
                    "\2\0\31\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0\37\35" +
                    "\1\0\31\35\1\0\37\35\1\0\31\35\1\0\37\35\1\0\31\35" +
                    "\1\0\10\35\2\0\62\17\u0200\0\67\35\4\0\62\35\10\0\1\35" +
                    "\16\0\1\35\26\0\5\35\1\0\17\35\u0550\0\7\35\1\0\21\35" +
                    "\2\0\7\35\1\0\2\35\1\0\5\35\u07d5\0\305\35\13\0\7\35" +
                    "\51\0\113\35\5\0\12\17\u04a6\0\4\35\1\0\33\35\1\0\2\35" +
                    "\1\0\1\35\2\0\1\35\1\0\12\35\1\0\4\35\1\0\1\35" +
                    "\1\0\1\35\6\0\1\35\4\0\1\35\1\0\1\35\1\0\1\35" +
                    "\1\0\3\35\1\0\2\35\1\0\1\35\2\0\1\35\1\0\1\35" +
                    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\2\35\1\0\1\35" +
                    "\2\0\4\35\1\0\7\35\1\0\4\35\1\0\4\35\1\0\1\35" +
                    "\1\0\12\35\1\0\21\35\5\0\3\35\1\0\5\35\1\0\21\35" +
                    "\u0274\0\32\35\6\0\32\35\6\0\32\35\u0e76\0\ua6d7\35\51\0\u1035\35" +
                    "\13\0\336\35\2\0\u1682\35\u295e\0\u021e\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0" +
                    "\360\35\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\4\0\2\1\1\2\1\3\1\4\1\0\1\5\1\6" +
                    "\3\5\1\7\1\5\1\7\2\5\1\10\1\5\1\11" +
                    "\1\12\1\13\11\5\1\14\1\15\1\16\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\40" +
                    "\1\41\1\42\1\37\2\43\1\0\1\37\1\0\1\44" +
                    "\1\45\1\46\1\47\1\50\2\0\3\5\4\7\1\51" +
                    "\1\0\1\7\5\5\1\52\1\53\2\5\1\54\1\55" +
                    "\1\56\12\5\1\57\3\5\1\60\1\5\1\61\1\62" +
                    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
                    "\1\73\1\74\2\37\1\75\1\76\1\77\1\0\5\5" +
                    "\1\7\1\51\1\7\5\5\1\100\15\5\1\101\4\5" +
                    "\1\102\1\103\1\104\4\5\1\105\4\51\2\0\1\51" +
                    "\1\5\1\0\1\5\1\106\1\5\1\107\3\5\1\110" +
                    "\1\111\10\5\1\112\1\113\1\114\6\5\1\115\2\51" +
                    "\2\0\1\116\1\5\1\117\1\120\5\5\1\121\5\5" +
                    "\1\122\1\123\2\5\1\51\1\0\1\124\1\5\1\125" +
                    "\1\126\1\127\1\130\1\131\3\5\1\132\3\5\1\133" +
                    "\1\5\1\134\1\135\1\136\1\137\1\140";

    private static int[] zzUnpackAction() {
        int[] result = new int[249];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u014a\0\u018c" +
                    "\0\u01ce\0\u0210\0\u0252\0\u014a\0\u0294\0\u02d6\0\u0318\0\u035a" +
                    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u014a" +
                    "\0\u014a\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6" +
                    "\0\u0738\0\u077a\0\u014a\0\u014a\0\u014a\0\u014a\0\u07bc\0\u07fe" +
                    "\0\u014a\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u014a" +
                    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u09cc\0\u0a0e\0\u014a" +
                    "\0\u014a\0\u014a\0\u0a50\0\u0a92\0\u014a\0\u0ad4\0\u0b16\0\u0b58" +
                    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u0b9a\0\u0bdc\0\u0c1e" +
                    "\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0318\0\u0dec" +
                    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u014a\0\u014a" +
                    "\0\u0fba\0\u0ffc\0\u014a\0\u014a\0\u014a\0\u103e\0\u1080\0\u10c2" +
                    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u0318" +
                    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u014a\0\u014a\0\u014a" +
                    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u141c\0\u014a" +
                    "\0\u145e\0\u014a\0\u14a0\0\u014a\0\u014a\0\u014a\0\u14e2\0\u1524" +
                    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u0318\0\u166e\0\u16b0\0\u16f2" +
                    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u0318\0\u183c\0\u187e\0\u18c0" +
                    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0" +
                    "\0\u1b12\0\u1b54\0\u0318\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u014a" +
                    "\0\u014a\0\u014a\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u0318\0\u1da6" +
                    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u014a\0\u1f32\0\u1f74" +
                    "\0\u1fb6\0\u0318\0\u1ff8\0\u0318\0\u203a\0\u207c\0\u20be\0\u0318" +
                    "\0\u0318\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c" +
                    "\0\u22ce\0\u0318\0\u0318\0\u0318\0\u2310\0\u2352\0\u2394\0\u23d6" +
                    "\0\u2418\0\u245a\0\u0318\0\u249c\0\u24de\0\u2520\0\u2562\0\u0318" +
                    "\0\u25a4\0\u0318\0\u0318\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee" +
                    "\0\u0318\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u0318\0\u0318" +
                    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u0318\0\u2982\0\u0318\0\u0318" +
                    "\0\u0318\0\u0318\0\u0318\0\u29c4\0\u2a06\0\u2a48\0\u0318\0\u2a8a" +
                    "\0\u2acc\0\u2b0e\0\u0318\0\u2b50\0\u0318\0\u0318\0\u0318\0\u0318" +
                    "\0\u0318";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[249];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\0" +
                    "\1\13\1\14\1\15\1\16\2\17\1\20\1\21\1\22" +
                    "\1\20\2\17\1\23\1\17\1\24\1\25\1\17\1\26" +
                    "\1\17\1\27\1\30\1\17\1\31\1\32\2\17\1\33" +
                    "\1\34\1\35\1\36\1\37\1\40\1\41\2\17\1\42" +
                    "\3\17\1\43\1\44\1\45\1\46\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61" +
                    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71" +
                    "\32\66\1\72\43\66\1\73\1\74\1\75\1\71\1\76" +
                    "\31\73\1\72\43\73\1\77\2\0\1\71\3\77\1\100" +
                    "\1\77\1\101\24\77\1\72\43\77\2\0\1\6\265\0" +
                    "\1\102\21\0\1\103\1\104\56\0\1\105\15\0\7\106" +
                    "\1\107\72\106\10\0\1\17\1\0\14\17\1\110\1\0" +
                    "\3\17\2\0\1\17\1\0\20\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\2\17\1\111" +
                    "\15\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\1\17\1\112\16\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\20\17\33\0" +
                    "\1\17\1\0\1\113\1\114\1\115\1\116\4\20\5\17" +
                    "\1\0\2\117\1\17\1\0\1\120\1\17\1\0\20\17" +
                    "\33\0\1\17\1\0\4\17\4\21\5\17\1\0\2\117" +
                    "\1\17\1\0\1\120\1\17\1\0\20\17\33\0\1\17" +
                    "\1\0\1\113\1\114\1\115\1\116\2\21\2\121\1\122" +
                    "\4\17\1\0\2\117\1\17\1\0\1\120\1\17\1\0" +
                    "\20\17\33\0\1\123\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\1\17\1\124" +
                    "\6\17\1\125\4\17\1\0\3\17\2\0\1\17\1\0" +
                    "\2\17\1\126\15\17\52\0\1\127\34\0\1\130\25\0" +
                    "\1\17\1\0\1\17\1\131\13\17\1\0\3\17\2\0" +
                    "\1\17\1\0\1\17\1\132\16\17\56\0\1\133\30\0" +
                    "\1\134\6\0\1\135\16\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\1\17\1\136\4\17\1\137" +
                    "\3\17\1\140\5\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\4\17\1\141\2\17\1\142" +
                    "\2\17\1\143\1\17\1\144\3\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\16\17\1\145" +
                    "\1\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\1\17\1\146\16\17\33\0\1\17\1\0" +
                    "\1\147\14\17\1\0\3\17\2\0\1\17\1\0\20\17" +
                    "\33\0\1\17\1\0\15\17\1\0\1\17\1\150\1\17" +
                    "\2\0\1\17\1\0\2\17\1\151\15\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\1\17" +
                    "\1\152\16\17\33\0\1\17\1\0\14\17\1\153\1\0" +
                    "\3\17\2\0\1\17\1\0\1\17\1\154\16\17\33\0" +
                    "\1\17\1\0\15\17\1\0\3\17\2\0\1\17\1\0" +
                    "\12\17\1\155\5\17\107\0\1\156\101\0\1\157\101\0" +
                    "\1\160\101\0\1\161\2\0\1\162\76\0\1\163\3\0" +
                    "\1\164\75\0\1\165\101\0\1\166\5\0\1\167\73\0" +
                    "\1\170\6\0\1\171\6\0\1\66\3\0\32\66\1\0" +
                    "\43\66\2\0\1\70\77\0\1\73\4\0\31\73\1\0" +
                    "\43\73\2\0\1\75\77\0\4\172\1\173\1\174\74\172" +
                    "\1\77\3\0\3\77\1\0\1\77\1\0\24\77\1\0" +
                    "\43\77\6\0\4\175\12\0\1\175\4\0\1\175\7\0" +
                    "\1\175\1\0\3\175\42\0\1\176\101\0\4\177\12\0" +
                    "\1\177\4\0\1\177\7\0\1\177\1\0\3\177\44\0" +
                    "\1\17\1\0\15\17\1\0\3\17\2\0\1\17\1\0" +
                    "\4\17\1\200\3\17\1\201\7\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\3\17\1\202" +
                    "\3\17\1\203\10\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\2\17\1\204\15\17\33\0" +
                    "\1\17\1\0\1\17\1\114\13\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\1\17\1\205" +
                    "\13\17\1\0\3\17\2\0\1\17\1\0\20\17\33\0" +
                    "\1\17\1\0\3\17\1\116\11\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\3\17\1\205" +
                    "\11\17\1\0\3\17\2\0\1\17\1\0\20\17\41\0" +
                    "\4\206\70\0\1\17\1\0\1\113\1\114\1\115\1\116" +
                    "\2\21\2\121\5\17\1\0\2\117\1\17\1\0\1\120" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\4\17\4\207" +
                    "\1\17\4\207\1\0\2\207\1\17\2\0\1\17\1\0" +
                    "\1\207\5\17\1\207\2\17\1\207\6\17\33\0\1\17" +
                    "\1\0\14\17\1\210\1\0\3\17\2\0\1\17\1\0" +
                    "\20\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\3\17\1\211\14\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\4\17\1\212" +
                    "\13\17\33\0\1\17\1\0\1\213\14\17\1\0\3\17" +
                    "\2\0\1\17\1\0\20\17\33\0\1\17\1\0\15\17" +
                    "\1\0\3\17\2\0\1\17\1\0\1\17\1\214\16\17" +
                    "\33\0\1\215\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\20\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\2\17\1\216\15\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\3\17" +
                    "\1\217\14\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\6\17\1\220\11\17\33\0\1\221" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\6\17" +
                    "\1\222\11\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\10\17\1\223\6\17\1\224\33\0" +
                    "\1\17\1\0\15\17\1\0\3\17\2\0\1\17\1\0" +
                    "\1\17\1\225\16\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\7\17\1\226\10\17\33\0" +
                    "\1\17\1\0\15\17\1\0\2\17\1\227\2\0\1\17" +
                    "\1\0\20\17\33\0\1\17\1\0\1\17\1\230\13\17" +
                    "\1\0\3\17\2\0\1\17\1\0\7\17\1\231\10\17" +
                    "\33\0\1\17\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\4\17\1\232\13\17\33\0\1\17\1\0\15\17" +
                    "\1\0\3\17\2\0\1\17\1\0\4\17\1\233\13\17" +
                    "\33\0\1\17\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\4\17\1\234\13\17\33\0\1\17\1\0\15\17" +
                    "\1\0\1\17\1\235\1\17\2\0\1\17\1\0\20\17" +
                    "\33\0\1\17\1\0\1\236\14\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\7\17\1\237\10\17\107\0" +
                    "\1\240\101\0\1\241\15\0\4\172\1\173\1\0\74\172" +
                    "\6\0\1\242\103\0\1\17\1\0\1\243\14\17\1\0" +
                    "\3\17\2\0\1\17\1\0\20\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\7\17\1\244" +
                    "\10\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\7\17\1\245\10\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\1\17\1\246" +
                    "\16\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\10\17\1\247\7\17\35\0\1\250\1\251" +
                    "\1\252\1\253\4\206\3\0\1\254\1\255\1\0\2\256" +
                    "\60\0\1\17\1\0\1\113\1\114\1\115\1\116\4\207" +
                    "\1\17\4\207\1\0\2\207\1\257\1\0\1\260\1\17" +
                    "\1\0\1\207\5\17\1\207\2\17\1\207\6\17\33\0" +
                    "\1\17\1\0\15\17\1\0\3\17\2\0\1\17\1\0" +
                    "\6\17\1\261\11\17\33\0\1\17\1\0\14\17\1\262" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\33\0\1\17" +
                    "\1\0\14\17\1\263\1\0\3\17\2\0\1\17\1\0" +
                    "\20\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\13\17\1\264\4\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\6\17\1\265" +
                    "\11\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\3\17\1\266\1\267\13\17\33\0\1\17" +
                    "\1\0\14\17\1\270\1\0\3\17\2\0\1\17\1\0" +
                    "\20\17\33\0\1\271\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\1\272\14\17" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\4\17" +
                    "\1\273\13\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\2\17\1\274\15\17\33\0\1\17" +
                    "\1\0\14\17\1\275\1\0\3\17\2\0\1\17\1\0" +
                    "\20\17\33\0\1\276\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\4\17\1\277\13\17\33\0" +
                    "\1\17\1\0\14\17\1\300\1\0\3\17\2\0\1\17" +
                    "\1\0\20\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\6\17\1\301\11\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\11\17" +
                    "\1\302\6\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\1\17\1\303\16\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\1\17" +
                    "\1\304\16\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\6\17\1\305\11\17\33\0\1\17" +
                    "\1\0\12\17\1\306\2\17\1\0\3\17\2\0\1\17" +
                    "\1\0\20\17\33\0\1\17\1\0\1\17\1\307\13\17" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\33\0\1\310" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\20\17" +
                    "\33\0\1\17\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\3\17\1\311\14\17\33\0\1\17\1\0\15\17" +
                    "\1\0\3\17\2\0\1\17\1\0\10\17\1\312\7\17" +
                    "\33\0\1\17\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\2\17\1\313\15\17\36\0\1\251\101\0\1\256" +
                    "\103\0\1\253\101\0\1\256\102\0\4\314\107\0\1\254" +
                    "\62\0\1\17\1\0\4\17\4\315\5\17\1\316\3\17" +
                    "\1\316\1\0\1\17\1\0\20\17\41\0\4\317\1\0" +
                    "\4\317\1\0\2\317\5\0\1\317\5\0\1\317\2\0" +
                    "\1\317\41\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\15\17\1\320\2\17\33\0\1\321\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\20\17\33\0" +
                    "\1\17\1\0\15\17\1\0\3\17\2\0\1\17\1\0" +
                    "\4\17\1\322\13\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\4\17\1\323\13\17\33\0" +
                    "\1\17\1\0\15\17\1\0\3\17\2\0\1\17\1\0" +
                    "\7\17\1\324\10\17\33\0\1\17\1\0\15\17\1\0" +
                    "\3\17\2\0\1\17\1\0\1\325\17\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\7\17" +
                    "\1\326\10\17\33\0\1\17\1\0\14\17\1\327\1\0" +
                    "\3\17\2\0\1\17\1\0\20\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\1\17\1\330" +
                    "\16\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\4\17\1\331\13\17\33\0\1\17\1\0" +
                    "\15\17\1\0\3\17\2\0\1\17\1\0\1\332\17\17" +
                    "\33\0\1\17\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\11\17\1\333\6\17\33\0\1\17\1\0\15\17" +
                    "\1\0\3\17\2\0\1\17\1\0\4\17\1\334\13\17" +
                    "\33\0\1\17\1\0\1\335\14\17\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\1\17\1\336" +
                    "\13\17\1\0\3\17\2\0\1\17\1\0\20\17\33\0" +
                    "\1\17\1\0\14\17\1\337\1\0\3\17\2\0\1\17" +
                    "\1\0\20\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\2\17\1\340\15\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\4\17" +
                    "\1\341\13\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\2\17\1\342\15\17\35\0\1\250" +
                    "\1\251\1\252\1\253\4\314\6\0\2\256\60\0\1\17" +
                    "\1\0\4\17\4\315\5\17\1\0\2\117\1\17\2\0" +
                    "\1\17\1\0\20\17\41\0\4\343\76\0\4\317\1\0" +
                    "\4\317\1\0\2\317\1\344\4\0\1\317\5\0\1\317" +
                    "\2\0\1\317\41\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\2\17\1\345\15\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\2\17" +
                    "\1\346\15\17\33\0\1\17\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\4\17\1\347\13\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\1\350" +
                    "\17\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\11\17\1\351\6\17\33\0\1\17\1\0" +
                    "\15\17\1\0\1\17\1\352\1\17\2\0\1\17\1\0" +
                    "\20\17\33\0\1\17\1\0\15\17\1\0\3\17\2\0" +
                    "\1\17\1\0\12\17\1\353\5\17\33\0\1\17\1\0" +
                    "\14\17\1\354\1\0\3\17\2\0\1\17\1\0\20\17" +
                    "\33\0\1\17\1\0\15\17\1\0\3\17\2\0\1\17" +
                    "\1\0\7\17\1\355\10\17\33\0\1\17\1\0\1\17" +
                    "\1\356\13\17\1\0\3\17\2\0\1\17\1\0\20\17" +
                    "\33\0\1\17\1\0\14\17\1\357\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\14\17\1\360" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\33\0\1\17" +
                    "\1\0\14\17\1\361\1\0\3\17\2\0\1\17\1\0" +
                    "\20\17\41\0\4\343\6\0\2\256\66\0\4\343\5\0" +
                    "\1\316\3\0\1\316\56\0\1\17\1\0\1\362\14\17" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\33\0\1\17" +
                    "\1\0\15\17\1\0\1\17\1\363\1\17\2\0\1\17" +
                    "\1\0\20\17\33\0\1\17\1\0\1\17\1\364\13\17" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\33\0\1\17" +
                    "\1\0\15\17\1\0\3\17\2\0\1\17\1\0\4\17" +
                    "\1\365\13\17\33\0\1\366\1\0\15\17\1\0\3\17" +
                    "\2\0\1\17\1\0\20\17\33\0\1\17\1\0\15\17" +
                    "\1\0\3\17\2\0\1\17\1\0\11\17\1\367\6\17" +
                    "\33\0\1\17\1\0\14\17\1\370\1\0\3\17\2\0" +
                    "\1\17\1\0\20\17\33\0\1\17\1\0\14\17\1\371" +
                    "\1\0\3\17\2\0\1\17\1\0\20\17\23\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[11154];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\0\1\1\2\11\2\1\1\0\1\1\1\11\13\1" +
                    "\2\11\11\1\4\11\2\1\1\11\6\1\6\11\2\1" +
                    "\3\11\2\1\1\11\1\0\1\1\1\0\5\11\2\0" +
                    "\10\1\1\0\6\1\2\11\2\1\3\11\20\1\11\11" +
                    "\1\1\1\11\1\1\1\11\1\1\3\11\1\0\40\1" +
                    "\3\11\11\1\2\0\1\11\1\1\1\0\35\1\2\0" +
                    "\24\1\1\0\25\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[249];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true iff the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */

    int ICV;
    double RCV;
    StringBuilder string = new StringBuilder();

    private Symbol simpleColorfulTagCG(int code, String color) {
        string.setLength(0);
        string.append("<span style=\"color: ").append(color).append("\">").append(yytext()).append("</span>");
        return new Symbol(code);
    }

    private Symbol italicColorfulTagCG(int code, String color) {
        string.setLength(0);
        string.append("<span style=\"color: ").append(color).append("\"><i>").append(yytext()).append("</i></span>");
        return new Symbol(code);
    }

    private Symbol keywordCG(int code) {
        string.setLength(0);
        string.append("<span style=\"color: ").append(SymbolType.KEYWORD.getColor()).append("\"><b>").append(yytext()).append("</b></span>");
        return new Symbol(code);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Scanner(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 2924) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Symbol scan() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        string.setLength(0);
                        string.append("<br/>");
                        return new Symbol(Symbol.WHITE_SPACE);
                    }
                    // fall through
                    case 97:
                        break;
                    case 2: {
                        string.setLength(0);
                        string.append("&emsp;");
                        return new Symbol(Symbol.WHITE_SPACE);
                    }
                    // fall through
                    case 98:
                        break;
                    case 3: {
                        return simpleColorfulTagCG(Symbol.STAR, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 99:
                        break;
                    case 4: {
                        return simpleColorfulTagCG(Symbol.SLASH, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 100:
                        break;
                    case 5: {
                        return simpleColorfulTagCG(Symbol.ID, SymbolType.ID.getColor());
                    }
                    // fall through
                    case 101:
                        break;
                    case 6: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.STRING_LITERAL.getColor()).append("\">&quot;");
                        yybegin(STRING);
                    }
                    // fall through
                    case 102:
                        break;
                    case 7: {
                        return simpleColorfulTagCG(Symbol.INT_LIT, SymbolType.INTEGER_LITERAL.getColor());
                    }
                    // fall through
                    case 103:
                        break;
                    case 8: {
                        return simpleColorfulTagCG(Symbol.PLUS, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 104:
                        break;
                    case 9: {
                        return simpleColorfulTagCG(Symbol.MINUS, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 105:
                        break;
                    case 10: {
                        return simpleColorfulTagCG(Symbol.DOT, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 106:
                        break;
                    case 11: {
                        string.setLength(0);
                        string.append("&nbsp;");
                        return new Symbol(Symbol.WHITE_SPACE);
                    }
                    // fall through
                    case 107:
                        break;
                    case 12: {
                        return simpleColorfulTagCG(Symbol.SEMI, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 108:
                        break;
                    case 13: {
                        return simpleColorfulTagCG(Symbol.COL, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 109:
                        break;
                    case 14: {
                        return simpleColorfulTagCG(Symbol.COMA, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 110:
                        break;
                    case 15: {
                        return simpleColorfulTagCG(Symbol.SHARP, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 111:
                        break;
                    case 16: {
                        return simpleColorfulTagCG(Symbol.PREC, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 112:
                        break;
                    case 17: {
                        return simpleColorfulTagCG(Symbol.EQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 113:
                        break;
                    case 18: {
                        return simpleColorfulTagCG(Symbol.QUEST, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 114:
                        break;
                    case 19: {
                        return simpleColorfulTagCG(Symbol.NOT, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 115:
                        break;
                    case 20: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.OPERATOR.getColor()).append("\">&amp;</span>");
                        return new Symbol(Symbol.AND);
                    }
                    // fall through
                    case 116:
                        break;
                    case 21: {
                        return simpleColorfulTagCG(Symbol.OR, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 117:
                        break;
                    case 22: {
                        return simpleColorfulTagCG(Symbol.HAT, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 118:
                        break;
                    case 23: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.OPERATOR.getColor()).append("\">&lt;</span>");
                        return new Symbol(Symbol.LT);
                    }
                    // fall through
                    case 119:
                        break;
                    case 24: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.OPERATOR.getColor()).append("\">&gt;</span>");
                        return new Symbol(Symbol.GT);
                    }
                    // fall through
                    case 120:
                        break;
                    case 25: {
                        return simpleColorfulTagCG(Symbol.CURBRACOP, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 121:
                        break;
                    case 26: {
                        return simpleColorfulTagCG(Symbol.CURBRACCL, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 122:
                        break;
                    case 27: {
                        return simpleColorfulTagCG(Symbol.BRACKOP, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 123:
                        break;
                    case 28: {
                        return simpleColorfulTagCG(Symbol.BRACKCL, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 124:
                        break;
                    case 29: {
                        return simpleColorfulTagCG(Symbol.PRANTOP, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 125:
                        break;
                    case 30: {
                        return simpleColorfulTagCG(Symbol.PRANTCL, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 126:
                        break;
                    case 31: {
                        string.append(yytext());
                    }
                    // fall through
                    case 127:
                        break;
                    case 32: {
                        string.append("</span><br/>");
                        yybegin(YYINITIAL);
                        return new Symbol(Symbol.COMMENT);
                    }
                    // fall through
                    case 128:
                        break;
                    case 33: {
                        string.append("&emsp;");
                    }
                    // fall through
                    case 129:
                        break;
                    case 34: {
                        string.append("&nbsp;");
                    }
                    // fall through
                    case 130:
                        break;
                    case 35: {
                        string.append("<br/>");
                    }
                    // fall through
                    case 131:
                        break;
                    case 36: {
                        string.append("&quot;</span>");
                        yybegin(YYINITIAL);
                        return new Symbol(Symbol.STR_LIT);
                    }
                    // fall through
                    case 132:
                        break;
                    case 37: {
                        return simpleColorfulTagCG(Symbol.STAREQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 133:
                        break;
                    case 38: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.COMMENT.getColor()).append("\">/*");
                        yybegin(MULTIPLELINECOMMENT);
                    }
                    // fall through
                    case 134:
                        break;
                    case 39: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.COMMENT.getColor()).append("\">//");
                        yybegin(ENDOFLINECOMMENT);
                    }
                    // fall through
                    case 135:
                        break;
                    case 40: {
                        return simpleColorfulTagCG(Symbol.SLASHEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 136:
                        break;
                    case 41: {
                        return italicColorfulTagCG(Symbol.FLOAT_LIT, SymbolType.FLOATING_POINT_LITERAL.getColor());
                    }
                    // fall through
                    case 137:
                        break;
                    case 42: {
                        return simpleColorfulTagCG(Symbol.PLUS2, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 138:
                        break;
                    case 43: {
                        return simpleColorfulTagCG(Symbol.PLUSEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 139:
                        break;
                    case 44: {
                        return simpleColorfulTagCG(Symbol.MINUS2, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 140:
                        break;
                    case 45: {
                        return simpleColorfulTagCG(Symbol.MINUSEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 141:
                        break;
                    case 46: {
                        return simpleColorfulTagCG(Symbol.POINT, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 142:
                        break;
                    case 47: {
                        return keywordCG(Symbol.IF);
                    }
                    // fall through
                    case 143:
                        break;
                    case 48: {
                        return keywordCG(Symbol.DO);
                    }
                    // fall through
                    case 144:
                        break;
                    case 49: {
                        return simpleColorfulTagCG(Symbol.PRECEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 145:
                        break;
                    case 50: {
                        return simpleColorfulTagCG(Symbol.EQEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 146:
                        break;
                    case 51: {
                        return simpleColorfulTagCG(Symbol.NOTEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 147:
                        break;
                    case 52: {
                        return simpleColorfulTagCG(Symbol.ANDEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 148:
                        break;
                    case 53: {
                        string.setLength(0);
                        string.append("<span style=\"color: ").append(SymbolType.OPERATOR.getColor()).append("\">&amp;&amp;</span>");
                        return new Symbol(Symbol.AND2);
                    }
                    // fall through
                    case 149:
                        break;
                    case 54: {
                        return simpleColorfulTagCG(Symbol.OREQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 150:
                        break;
                    case 55: {
                        return simpleColorfulTagCG(Symbol.OR2, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 151:
                        break;
                    case 56: {
                        return simpleColorfulTagCG(Symbol.HATEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 152:
                        break;
                    case 57: {
                        return simpleColorfulTagCG(Symbol.LTEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 153:
                        break;
                    case 58: {
                        return simpleColorfulTagCG(Symbol.SHIFTL, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 154:
                        break;
                    case 59: {
                        return simpleColorfulTagCG(Symbol.GTEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 155:
                        break;
                    case 60: {
                        return simpleColorfulTagCG(Symbol.SHIFTR, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 156:
                        break;
                    case 61: {
                        string.append("*/</span>");
                        yybegin(YYINITIAL);
                        return new Symbol(Symbol.COMMENT);
                    }
                    // fall through
                    case 157:
                        break;
                    case 62: {
                        string.append("<span style=\"color: ").append(SymbolType.CHARACTER_LITERAL.getColor()).append("\"><i>").append(yytext()).append("</i></span>");
                    }
                    // fall through
                    case 158:
                        break;
                    case 63: {
                        return simpleColorfulTagCG(Symbol.CHAR_LIT, SymbolType.CHARACTER_LITERAL.getColor());
                    }
                    // fall through
                    case 159:
                        break;
                    case 64: {
                        return keywordCG(Symbol.FOR);
                    }
                    // fall through
                    case 160:
                        break;
                    case 65: {
                        return keywordCG(Symbol.INT);
                    }
                    // fall through
                    case 161:
                        break;
                    case 66: {
                        return simpleColorfulTagCG(Symbol.SHIFTLEQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 162:
                        break;
                    case 67: {
                        return simpleColorfulTagCG(Symbol.SHIFTREQ, SymbolType.OPERATOR.getColor());
                    }
                    // fall through
                    case 163:
                        break;
                    case 68: {
                        return italicColorfulTagCG(Symbol.CHAR_LIT, SymbolType.CHARACTER_LITERAL.getColor());
                    }
                    // fall through
                    case 164:
                        break;
                    case 69: {
                        return keywordCG(Symbol.LONG);
                    }
                    // fall through
                    case 165:
                        break;
                    case 70: {
                        return keywordCG(Symbol.ELSE);
                    }
                    // fall through
                    case 166:
                        break;
                    case 71: {
                        return keywordCG(Symbol.ENUM);
                    }
                    // fall through
                    case 167:
                        break;
                    case 72: {
                        return keywordCG(Symbol.CASE);
                    }
                    // fall through
                    case 168:
                        break;
                    case 73: {
                        return keywordCG(Symbol.CHAR);
                    }
                    // fall through
                    case 169:
                        break;
                    case 74: {
                        return keywordCG(Symbol.VOID);
                    }
                    // fall through
                    case 170:
                        break;
                    case 75: {
                        return keywordCG(Symbol.AUTO);
                    }
                    // fall through
                    case 171:
                        break;
                    case 76: {
                        return keywordCG(Symbol.GOTO);
                    }
                    // fall through
                    case 172:
                        break;
                    case 77: {
                        return keywordCG(Symbol.UNION);
                    }
                    // fall through
                    case 173:
                        break;
                    case 78: {
                        return keywordCG(Symbol.BREAK);
                    }
                    // fall through
                    case 174:
                        break;
                    case 79: {
                        return keywordCG(Symbol.FLOAT);
                    }
                    // fall through
                    case 175:
                        break;
                    case 80: {
                        return keywordCG(Symbol.CONST);
                    }
                    // fall through
                    case 176:
                        break;
                    case 81: {
                        return keywordCG(Symbol.SHORT);
                    }
                    // fall through
                    case 177:
                        break;
                    case 82: {
                        return keywordCG(Symbol.WHILE);
                    }
                    // fall through
                    case 178:
                        break;
                    case 83: {
                        return keywordCG(Symbol.RETURN);
                    }
                    // fall through
                    case 179:
                        break;
                    case 84: {
                        return keywordCG(Symbol.EXTERN);
                    }
                    // fall through
                    case 180:
                        break;
                    case 85: {
                        return keywordCG(Symbol.STRUCT);
                    }
                    // fall through
                    case 181:
                        break;
                    case 86: {
                        return keywordCG(Symbol.STATIC);
                    }
                    // fall through
                    case 182:
                        break;
                    case 87: {
                        return keywordCG(Symbol.SIGNED);
                    }
                    // fall through
                    case 183:
                        break;
                    case 88: {
                        return keywordCG(Symbol.SIZEOF);
                    }
                    // fall through
                    case 184:
                        break;
                    case 89: {
                        return keywordCG(Symbol.SWITCH);
                    }
                    // fall through
                    case 185:
                        break;
                    case 90: {
                        return keywordCG(Symbol.DOUBLE);
                    }
                    // fall through
                    case 186:
                        break;
                    case 91: {
                        return keywordCG(Symbol.TYPEDEF);
                    }
                    // fall through
                    case 187:
                        break;
                    case 92: {
                        return keywordCG(Symbol.DEFAULT);
                    }
                    // fall through
                    case 188:
                        break;
                    case 93: {
                        return keywordCG(Symbol.REGISTER);
                    }
                    // fall through
                    case 189:
                        break;
                    case 94: {
                        return keywordCG(Symbol.UNSIGNED);
                    }
                    // fall through
                    case 190:
                        break;
                    case 95: {
                        return keywordCG(Symbol.CONTINUE);
                    }
                    // fall through
                    case 191:
                        break;
                    case 96: {
                        return keywordCG(Symbol.VOLATILE);
                    }
                    // fall through
                    case 192:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
