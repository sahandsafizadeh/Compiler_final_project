
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.access.Access;
import ast.access.ArrayAccess;
import ast.access.VariableAccess;
import ast.block.Block;
import ast.block.BlockContent;
import ast.block.Blocks;
import ast.block.stmt.Break;
import ast.block.stmt.Continue;
import ast.block.stmt.Statement;
import ast.block.stmt.assignment.*;
import ast.block.stmt.conditional.casestmt.Cases;
import ast.block.stmt.conditional.casestmt.Switch;
import ast.block.stmt.conditional.ifstmt.If;
import ast.block.stmt.loop.For;
import ast.block.stmt.loop.Foreach;
import ast.block.stmt.loop.Repeat;
import ast.dcl.variable.*;
import ast.expr.Expression;
import ast.expr.binary.arithmatic.*;
import ast.expr.binary.logical.*;
import ast.expr.constant.*;
import ast.expr.other.Casting;
import ast.expr.other.SizeOf;
import ast.expr.other.Variable;
import ast.expr.unary.arithmatic.*;
import ast.expr.unary.logical.Not;
import ast.program.Program;
import ast.program.ProgramContent;
import ast.program.global.GlobalVarDCL;
import ast.type.CastingType;
import ast.type.StructureType;
import ast.type.Type;
import ast.type.VariableType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\062\002\000\002\004\006\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\006\000\002\006\011\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\006" +
    "\000\002\011\002\000\002\012\004\000\002\012\002\000" +
    "\002\013\005\000\002\013\002\000\002\014\012\000\002" +
    "\016\004\000\002\016\002\000\002\015\005\000\002\015" +
    "\004\000\002\063\002\000\002\017\006\000\002\020\004" +
    "\000\002\020\002\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\023\004\000\002" +
    "\023\004\000\002\023\002\000\002\024\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\002\000\002\064\002" +
    "\000\002\026\006\000\002\026\004\000\002\065\002\000" +
    "\002\066\002\000\002\027\007\000\002\030\004\000\002" +
    "\031\004\000\002\031\002\000\002\067\002\000\002\032" +
    "\006\000\002\032\002\000\002\070\002\000\002\033\005" +
    "\000\002\034\006\000\002\034\002\000\002\035\003\000" +
    "\002\035\003\000\002\035\004\000\002\035\004\000\002" +
    "\035\005\000\002\036\003\000\002\036\004\000\002\036" +
    "\004\000\002\037\010\000\002\071\002\000\002\037\017" +
    "\000\002\040\004\000\002\040\002\000\002\072\002\000" +
    "\002\073\002\000\002\041\011\000\002\041\002\000\002" +
    "\042\013\000\002\042\011\000\002\074\002\000\002\075" +
    "\002\000\002\042\013\000\002\043\003\000\002\043\002" +
    "\000\002\044\003\000\002\044\002\000\002\045\003\000" +
    "\002\045\002\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\047" +
    "\003\000\002\047\005\000\002\050\004\000\002\051\006" +
    "\000\002\051\002\000\002\052\003\000\002\052\005\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\006\000\002\052\006\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\006\000\002\060\004\000\002\060\002\000\002" +
    "\061\004\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\034\002\uffff\005\022\006\024\007\007\010" +
    "\006\011\005\012\020\013\027\014\017\020\004\021\021" +
    "\022\012\116\016\001\002\000\026\006\024\007\007\010" +
    "\006\011\005\012\020\013\027\014\017\015\070\021\021" +
    "\116\016\001\002\000\006\073\uffde\116\uffde\001\002\000" +
    "\006\073\uff8f\116\uff8f\001\002\000\006\073\uff90\116\uff90" +
    "\001\002\000\034\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\116\ufffc\001\002\000\034\002\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\116\ufffe\001\002\000\026\006" +
    "\024\007\007\010\006\011\005\012\020\013\027\014\017" +
    "\015\070\021\021\116\016\001\002\000\034\002\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\020\ufffd\021\ufffd\022\ufffd\116\ufffd\001\002\000" +
    "\006\073\uffe0\116\uffe0\001\002\000\004\002\066\001\002" +
    "\000\006\073\ufff6\116\ufff6\001\002\000\006\073\ufff8\116" +
    "\ufff8\001\002\000\006\073\uff8e\116\uff8e\001\002\000\006" +
    "\073\ufff7\116\ufff7\001\002\000\004\116\034\001\002\000" +
    "\004\116\031\001\002\000\006\073\uffdf\116\uffdf\001\002" +
    "\000\034\002\uffff\005\022\006\024\007\007\010\006\011" +
    "\005\012\020\013\027\014\017\020\004\021\021\022\012" +
    "\116\016\001\002\000\006\073\ufff9\116\ufff9\001\002\000" +
    "\006\073\uff8d\116\uff8d\001\002\000\004\002\000\001\002" +
    "\000\004\044\ufffb\001\002\000\004\044\033\001\002\000" +
    "\034\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\020\ufffa\021\ufffa\022\ufffa\116" +
    "\ufffa\001\002\000\004\023\035\001\002\000\020\004\041" +
    "\006\024\007\007\010\006\011\005\012\020\013\027\001" +
    "\002\000\022\004\041\006\024\007\007\010\006\011\005" +
    "\012\020\013\027\024\uffe7\001\002\000\004\116\045\001" +
    "\002\000\004\044\044\001\002\000\016\006\024\007\007" +
    "\010\006\011\005\012\020\013\027\001\002\000\004\044" +
    "\043\001\002\000\022\004\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\024\uffe6\001\002\000\022\004" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\024\uffe5\001\002\000\006\044\uffe4\057\uffe4\001\002\000" +
    "\006\044\uffe1\057\050\001\002\000\004\044\uffe3\001\002" +
    "\000\016\016\053\017\056\112\051\113\055\114\057\115" +
    "\054\001\002\000\052\044\uff7a\046\uff7a\051\uff7a\052\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\060\uff7a\061\uff7a\062\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\071\uff7a\073\uff7a\106\uff7a" +
    "\107\uff7a\110\uff7a\111\uff7a\001\002\000\004\044\uffe2\001" +
    "\002\000\052\044\uff7c\046\uff7c\051\uff7c\052\uff7c\054\uff7c" +
    "\055\uff7c\056\uff7c\060\uff7c\061\uff7c\062\uff7c\064\uff7c\065" +
    "\uff7c\066\uff7c\067\uff7c\071\uff7c\073\uff7c\106\uff7c\107\uff7c" +
    "\110\uff7c\111\uff7c\001\002\000\052\044\uff78\046\uff78\051" +
    "\uff78\052\uff78\054\uff78\055\uff78\056\uff78\060\uff78\061\uff78" +
    "\062\uff78\064\uff78\065\uff78\066\uff78\067\uff78\071\uff78\073" +
    "\uff78\106\uff78\107\uff78\110\uff78\111\uff78\001\002\000\052" +
    "\044\uff77\046\uff77\051\uff77\052\uff77\054\uff77\055\uff77\056" +
    "\uff77\060\uff77\061\uff77\062\uff77\064\uff77\065\uff77\066\uff77" +
    "\067\uff77\071\uff77\073\uff77\106\uff77\107\uff77\110\uff77\111" +
    "\uff77\001\002\000\052\044\uff7b\046\uff7b\051\uff7b\052\uff7b" +
    "\054\uff7b\055\uff7b\056\uff7b\060\uff7b\061\uff7b\062\uff7b\064" +
    "\uff7b\065\uff7b\066\uff7b\067\uff7b\071\uff7b\073\uff7b\106\uff7b" +
    "\107\uff7b\110\uff7b\111\uff7b\001\002\000\052\044\uff79\046" +
    "\uff79\051\uff79\052\uff79\054\uff79\055\uff79\056\uff79\060\uff79" +
    "\061\uff79\062\uff79\064\uff79\065\uff79\066\uff79\067\uff79\071" +
    "\uff79\073\uff79\106\uff79\107\uff79\110\uff79\111\uff79\001\002" +
    "\000\022\004\041\006\024\007\007\010\006\011\005\012" +
    "\020\013\027\024\uffe7\001\002\000\004\024\062\001\002" +
    "\000\004\005\063\001\002\000\004\044\064\001\002\000" +
    "\034\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9\116" +
    "\uffe9\001\002\000\004\024\uffe8\001\002\000\004\002\001" +
    "\001\002\000\004\116\072\001\002\000\004\116\ufff2\001" +
    "\002\000\004\116\ufff3\001\002\000\004\072\073\001\002" +
    "\000\026\006\024\007\007\010\006\011\005\012\020\013" +
    "\027\014\017\021\021\073\uffee\116\016\001\002\000\004" +
    "\073\106\001\002\000\004\116\076\001\002\000\010\046" +
    "\uffea\070\100\073\uffea\001\002\000\006\046\103\073\uffec" +
    "\001\002\000\004\071\101\001\002\000\010\046\uffea\070" +
    "\100\073\uffea\001\002\000\006\046\uffeb\073\uffeb\001\002" +
    "\000\026\006\024\007\007\010\006\011\005\012\020\013" +
    "\027\014\017\021\021\073\uffee\116\016\001\002\000\004" +
    "\073\uffef\001\002\000\004\073\uffed\001\002\000\006\023" +
    "\110\044\111\001\002\000\034\002\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\116\ufff4\001\002\000\044\004\125" +
    "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
    "\017\021\021\024\uffda\025\120\027\116\033\132\034\123" +
    "\036\134\042\114\116\121\001\002\000\034\002\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\020\ufff1\021\ufff1\022\ufff1\116\ufff1\001\002\000" +
    "\034\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\020\ufff0\021\ufff0\022\ufff0\116" +
    "\ufff0\001\002\000\044\004\125\006\024\007\007\010\006" +
    "\011\005\012\020\013\027\014\017\021\021\024\uffda\025" +
    "\120\027\116\033\132\034\123\036\134\042\114\116\121" +
    "\001\002\000\036\016\053\017\056\043\155\050\171\052" +
    "\164\063\157\072\163\076\166\077\167\112\051\113\055" +
    "\114\057\115\054\116\161\001\002\000\004\044\u010c\001" +
    "\002\000\004\072\371\001\002\000\004\024\370\001\002" +
    "\000\004\072\361\001\002\000\024\047\uffa0\057\uffa0\070" +
    "\241\072\262\102\uffa0\103\uffa0\104\uffa0\105\uffa0\116\ufff6" +
    "\001\002\000\050\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\021\uffc4\024\uffc4\025\uffc4" +
    "\027\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\116\uffc4\001\002\000\004\072\351\001\002\000\004" +
    "\044\350\001\002\000\024\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\021\uffd5\116\uffd5\001\002" +
    "\000\004\116\uffd2\001\002\000\016\047\236\057\320\102" +
    "\317\103\314\104\315\105\316\001\002\000\050\004\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\021\uffc5\024\uffc5\025\uffc5\027\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\042\uffc5\116\uffc5\001\002\000" +
    "\004\044\313\001\002\000\004\072\300\001\002\000\044" +
    "\004\125\006\024\007\007\010\006\011\005\012\020\013" +
    "\027\014\017\021\021\024\uffda\025\120\027\116\033\132" +
    "\034\123\036\134\042\114\116\121\001\002\000\004\023" +
    "\137\001\002\000\072\044\uffa4\046\uffa4\047\uffa4\051\uffa4" +
    "\052\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\071\uffa4" +
    "\073\uffa4\076\uffa4\077\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\001\002\000\004" +
    "\037\153\001\002\000\050\004\125\006\024\007\007\010" +
    "\006\011\005\012\020\013\027\014\017\021\021\024\uffd6" +
    "\025\120\027\116\033\132\034\123\036\134\040\144\041" +
    "\140\042\114\116\121\001\002\000\004\044\152\001\002" +
    "\000\050\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\021\uffc0\024\uffc0\025\uffc0\027\uffc0" +
    "\033\uffc0\034\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\116" +
    "\uffc0\001\002\000\050\004\125\006\024\007\007\010\006" +
    "\011\005\012\020\013\027\014\017\021\021\024\uffd6\025" +
    "\120\027\116\033\132\034\123\036\134\040\144\041\140" +
    "\042\114\116\121\001\002\000\004\024\150\001\002\000" +
    "\004\044\147\001\002\000\050\004\125\006\024\007\007" +
    "\010\006\011\005\012\020\013\027\014\017\021\021\024" +
    "\uffd6\025\120\027\116\033\132\034\123\036\134\040\144" +
    "\041\140\042\114\116\121\001\002\000\004\024\uffd8\001" +
    "\002\000\050\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\021\uffbf\024\uffbf\025\uffbf\027" +
    "\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\116\uffbf\001\002\000\052\004\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\116\uffd9\001\002\000\004\024\uffd7" +
    "\001\002\000\050\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\021\uffbe\024\uffbe\025\uffbe" +
    "\027\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\116\uffbe\001\002\000\004\072\154\001\002\000\036" +
    "\016\053\017\056\043\155\050\171\052\164\063\157\072" +
    "\163\076\166\077\167\112\051\113\055\114\057\115\054" +
    "\116\161\001\002\000\004\072\274\001\002\000\044\051" +
    "\205\052\174\054\203\055\177\056\202\060\201\061\206" +
    "\062\210\064\175\065\213\066\211\067\207\073\272\106" +
    "\204\107\176\110\212\111\200\001\002\000\036\016\053" +
    "\017\056\043\155\050\171\052\164\063\157\072\163\076" +
    "\166\077\167\112\051\113\055\114\057\115\054\116\161" +
    "\001\002\000\052\044\uff91\046\uff91\051\uff91\052\uff91\054" +
    "\uff91\055\uff91\056\uff91\060\uff91\061\uff91\062\uff91\064\uff91" +
    "\065\uff91\066\uff91\067\uff91\071\uff91\073\uff91\106\uff91\107" +
    "\uff91\110\uff91\111\uff91\001\002\000\064\044\uffa0\046\uffa0" +
    "\047\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\056\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0" +
    "\070\241\071\uffa0\072\262\073\uffa0\076\uffa0\077\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\001\002\000\052\044\uff94" +
    "\046\uff94\051\uff94\052\uff94\054\uff94\055\uff94\056\uff94\060" +
    "\uff94\061\uff94\062\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\071\uff94\073\uff94\106\uff94\107\uff94\110\uff94\111\uff94\001" +
    "\002\000\046\007\007\010\006\012\020\013\027\016\053" +
    "\017\056\043\155\050\171\052\164\063\157\072\163\076" +
    "\166\077\167\112\051\113\055\114\057\115\054\116\161" +
    "\001\002\000\036\016\053\017\056\043\155\050\171\052" +
    "\164\063\157\072\163\076\166\077\167\112\051\113\055" +
    "\114\057\115\054\116\161\001\002\000\060\044\uff92\046" +
    "\uff92\047\236\051\uff92\052\uff92\054\uff92\055\uff92\056\uff92" +
    "\060\uff92\061\uff92\062\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\071\uff92\073\uff92\076\252\077\253\106\uff92\107\uff92" +
    "\110\uff92\111\uff92\001\002\000\004\116\234\001\002\000" +
    "\004\116\234\001\002\000\052\044\uff9f\046\uff9f\051\uff9f" +
    "\052\uff9f\054\uff9f\055\uff9f\056\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\071\uff9f\073\uff9f" +
    "\106\uff9f\107\uff9f\110\uff9f\111\uff9f\001\002\000\036\016" +
    "\053\017\056\043\155\050\171\052\164\063\157\072\163" +
    "\076\166\077\167\112\051\113\055\114\057\115\054\116" +
    "\161\001\002\000\052\044\uff93\046\uff93\051\uff93\052\uff93" +
    "\054\uff93\055\uff93\056\uff93\060\uff93\061\uff93\062\uff93\064" +
    "\uff93\065\uff93\066\uff93\067\uff93\071\uff93\073\uff93\106\uff93" +
    "\107\uff93\110\uff93\111\uff93\001\002\000\052\044\uff9c\046" +
    "\uff9c\051\uff9c\052\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\071" +
    "\uff9c\073\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\001\002" +
    "\000\036\016\053\017\056\043\155\050\171\052\164\063" +
    "\157\072\163\076\166\077\167\112\051\113\055\114\057" +
    "\115\054\116\161\001\002\000\036\016\053\017\056\043" +
    "\155\050\171\052\164\063\157\072\163\076\166\077\167" +
    "\112\051\113\055\114\057\115\054\116\161\001\002\000" +
    "\036\016\053\017\056\043\155\050\171\052\164\063\157" +
    "\072\163\076\166\077\167\112\051\113\055\114\057\115" +
    "\054\116\161\001\002\000\036\016\053\017\056\043\155" +
    "\050\171\052\164\063\157\072\163\076\166\077\167\112" +
    "\051\113\055\114\057\115\054\116\161\001\002\000\036" +
    "\016\053\017\056\043\155\050\171\052\164\063\157\072" +
    "\163\076\166\077\167\112\051\113\055\114\057\115\054" +
    "\116\161\001\002\000\036\016\053\017\056\043\155\050" +
    "\171\052\164\063\157\072\163\076\166\077\167\112\051" +
    "\113\055\114\057\115\054\116\161\001\002\000\036\016" +
    "\053\017\056\043\155\050\171\052\164\063\157\072\163" +
    "\076\166\077\167\112\051\113\055\114\057\115\054\116" +
    "\161\001\002\000\036\016\053\017\056\043\155\050\171" +
    "\052\164\063\157\072\163\076\166\077\167\112\051\113" +
    "\055\114\057\115\054\116\161\001\002\000\036\016\053" +
    "\017\056\043\155\050\171\052\164\063\157\072\163\076" +
    "\166\077\167\112\051\113\055\114\057\115\054\116\161" +
    "\001\002\000\036\016\053\017\056\043\155\050\171\052" +
    "\164\063\157\072\163\076\166\077\167\112\051\113\055" +
    "\114\057\115\054\116\161\001\002\000\036\016\053\017" +
    "\056\043\155\050\171\052\164\063\157\072\163\076\166" +
    "\077\167\112\051\113\055\114\057\115\054\116\161\001" +
    "\002\000\036\016\053\017\056\043\155\050\171\052\164" +
    "\063\157\072\163\076\166\077\167\112\051\113\055\114" +
    "\057\115\054\116\161\001\002\000\036\016\053\017\056" +
    "\043\155\050\171\052\164\063\157\072\163\076\166\077" +
    "\167\112\051\113\055\114\057\115\054\116\161\001\002" +
    "\000\036\016\053\017\056\043\155\050\171\052\164\063" +
    "\157\072\163\076\166\077\167\112\051\113\055\114\057" +
    "\115\054\116\161\001\002\000\036\016\053\017\056\043" +
    "\155\050\171\052\164\063\157\072\163\076\166\077\167" +
    "\112\051\113\055\114\057\115\054\116\161\001\002\000" +
    "\036\016\053\017\056\043\155\050\171\052\164\063\157" +
    "\072\163\076\166\077\167\112\051\113\055\114\057\115" +
    "\054\116\161\001\002\000\052\044\uff7d\046\uff7d\051\205" +
    "\052\174\054\203\055\177\056\202\060\201\061\206\062" +
    "\210\064\175\065\uff7d\066\211\067\207\071\uff7d\073\uff7d" +
    "\106\204\107\176\110\212\111\200\001\002\000\052\044" +
    "\uff83\046\uff83\051\205\052\174\054\203\055\177\056\202" +
    "\060\uff83\061\uff83\062\uff83\064\uff83\065\uff83\066\uff83\067" +
    "\uff83\071\uff83\073\uff83\106\uff83\107\uff83\110\uff83\111\uff83" +
    "\001\002\000\052\044\uff84\046\uff84\051\205\052\174\054" +
    "\203\055\177\056\202\060\uff84\061\uff84\062\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\071\uff84\073\uff84\106\uff84\107" +
    "\uff84\110\uff84\111\uff84\001\002\000\052\044\uff85\046\uff85" +
    "\051\205\052\174\054\203\055\177\056\202\060\201\061" +
    "\uff85\062\uff85\064\uff85\065\uff85\066\211\067\207\071\uff85" +
    "\073\uff85\106\204\107\176\110\212\111\200\001\002\000" +
    "\052\044\uff82\046\uff82\051\205\052\174\054\203\055\177" +
    "\056\202\060\uff82\061\uff82\062\uff82\064\uff82\065\uff82\066" +
    "\211\067\uff82\071\uff82\073\uff82\106\uff82\107\uff82\110\212" +
    "\111\uff82\001\002\000\052\044\uff86\046\uff86\051\205\052" +
    "\174\054\203\055\177\056\202\060\201\061\uff86\062\210" +
    "\064\uff86\065\uff86\066\211\067\207\071\uff86\073\uff86\106" +
    "\204\107\176\110\212\111\200\001\002\000\052\044\uff89" +
    "\046\uff89\051\uff89\052\uff89\054\203\055\177\056\202\060" +
    "\uff89\061\uff89\062\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\071\uff89\073\uff89\106\uff89\107\uff89\110\uff89\111\uff89\001" +
    "\002\000\052\044\uff7f\046\uff7f\051\205\052\174\054\203" +
    "\055\177\056\202\060\uff7f\061\uff7f\062\uff7f\064\uff7f\065" +
    "\uff7f\066\211\067\207\071\uff7f\073\uff7f\106\uff7f\107\uff7f" +
    "\110\212\111\200\001\002\000\052\044\uff8c\046\uff8c\051" +
    "\uff8c\052\uff8c\054\uff8c\055\uff8c\056\uff8c\060\uff8c\061\uff8c" +
    "\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\071\uff8c\073" +
    "\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c\001\002\000\052" +
    "\044\uff8a\046\uff8a\051\uff8a\052\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\071\uff8a\073\uff8a\106\uff8a\107\uff8a\110\uff8a\111" +
    "\uff8a\001\002\000\052\044\uff87\046\uff87\051\205\052\174" +
    "\054\203\055\177\056\202\060\uff87\061\uff87\062\uff87\064" +
    "\uff87\065\uff87\066\211\067\207\071\uff87\073\uff87\106\204" +
    "\107\176\110\212\111\200\001\002\000\052\044\uff81\046" +
    "\uff81\051\205\052\174\054\203\055\177\056\202\060\uff81" +
    "\061\uff81\062\uff81\064\uff81\065\uff81\066\211\067\uff81\071" +
    "\uff81\073\uff81\106\uff81\107\uff81\110\212\111\uff81\001\002" +
    "\000\052\044\uff8b\046\uff8b\051\uff8b\052\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\071\uff8b\073\uff8b\106\uff8b\107\uff8b\110" +
    "\uff8b\111\uff8b\001\002\000\052\044\uff80\046\uff80\051\205" +
    "\052\174\054\203\055\177\056\202\060\uff80\061\uff80\062" +
    "\uff80\064\uff80\065\uff80\066\211\067\207\071\uff80\073\uff80" +
    "\106\uff80\107\uff80\110\212\111\200\001\002\000\052\044" +
    "\uff7e\046\uff7e\051\205\052\174\054\203\055\177\056\202" +
    "\060\201\061\206\062\210\064\uff7e\065\uff7e\066\211\067" +
    "\207\071\uff7e\073\uff7e\106\204\107\176\110\212\111\200" +
    "\001\002\000\052\044\uff88\046\uff88\051\uff88\052\uff88\054" +
    "\203\055\177\056\202\060\uff88\061\uff88\062\uff88\064\uff88" +
    "\065\uff88\066\uff88\067\uff88\071\uff88\073\uff88\106\uff88\107" +
    "\uff88\110\uff88\111\uff88\001\002\000\070\044\uffa0\046\uffa0" +
    "\047\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\067\uffa0\070\241\071\uffa0\073\uffa0\102\uffa0\103\uffa0\104" +
    "\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\001\002" +
    "\000\054\044\uff9a\046\uff9a\047\236\051\uff9a\052\uff9a\054" +
    "\uff9a\055\uff9a\056\uff9a\060\uff9a\061\uff9a\062\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\071\uff9a\073\uff9a\106\uff9a\107" +
    "\uff9a\110\uff9a\111\uff9a\001\002\000\004\116\237\001\002" +
    "\000\072\044\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\071\uffa3\073\uffa3\076" +
    "\uffa3\077\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\110\uffa3\111\uffa3\001\002\000\072\044\uffa2\046" +
    "\uffa2\047\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\071\uffa2\073\uffa2\076\uffa2\077\uffa2\102\uffa2" +
    "\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111" +
    "\uffa2\001\002\000\036\016\053\017\056\043\155\050\171" +
    "\052\164\063\157\072\163\076\166\077\167\112\051\113" +
    "\055\114\057\115\054\116\161\001\002\000\044\051\205" +
    "\052\174\054\203\055\177\056\202\060\201\061\206\062" +
    "\210\064\175\065\213\066\211\067\207\071\243\106\204" +
    "\107\176\110\212\111\200\001\002\000\074\044\uffc6\046" +
    "\uffc6\047\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\070\245\071\uffc6\073\uffc6\076\uffc6\077\uffc6" +
    "\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110" +
    "\uffc6\111\uffc6\001\002\000\072\044\uffa1\046\uffa1\047\uffa1" +
    "\051\uffa1\052\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\071\uffa1\073\uffa1\076\uffa1\077\uffa1\102\uffa1\103\uffa1\104" +
    "\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\001\002" +
    "\000\036\016\053\017\056\043\155\050\171\052\164\063" +
    "\157\072\163\076\166\077\167\112\051\113\055\114\057" +
    "\115\054\116\161\001\002\000\044\051\205\052\174\054" +
    "\203\055\177\056\202\060\201\061\206\062\210\064\175" +
    "\065\213\066\211\067\207\071\247\106\204\107\176\110" +
    "\212\111\200\001\002\000\074\044\uffc6\046\uffc6\047\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\245\071\uffc6\073\uffc6\076\uffc6\077\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6" +
    "\001\002\000\072\044\uffc7\046\uffc7\047\uffc7\051\uffc7\052" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\071\uffc7\073" +
    "\uffc7\076\uffc7\077\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7" +
    "\106\uffc7\107\uffc7\110\uffc7\111\uffc7\001\002\000\054\044" +
    "\uff99\046\uff99\047\236\051\uff99\052\uff99\054\uff99\055\uff99" +
    "\056\uff99\060\uff99\061\uff99\062\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\071\uff99\073\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\001\002\000\052\044\uff97\046\uff97\051\uff97\052" +
    "\uff97\054\uff97\055\uff97\056\uff97\060\uff97\061\uff97\062\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\071\uff97\073\uff97\106" +
    "\uff97\107\uff97\110\uff97\111\uff97\001\002\000\052\044\uff98" +
    "\046\uff98\051\uff98\052\uff98\054\uff98\055\uff98\056\uff98\060" +
    "\uff98\061\uff98\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\071\uff98\073\uff98\106\uff98\107\uff98\110\uff98\111\uff98\001" +
    "\002\000\052\044\uff9b\046\uff9b\051\uff9b\052\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\060\uff9b\061\uff9b\062\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\071\uff9b\073\uff9b\106\uff9b\107\uff9b" +
    "\110\uff9b\111\uff9b\001\002\000\044\051\205\052\174\054" +
    "\203\055\177\056\202\060\201\061\206\062\210\064\175" +
    "\065\213\066\211\067\207\073\261\106\204\107\176\110" +
    "\212\111\200\001\002\000\004\073\257\001\002\000\036" +
    "\016\053\017\056\043\155\050\171\052\164\063\157\072" +
    "\163\076\166\077\167\112\051\113\055\114\057\115\054" +
    "\116\161\001\002\000\052\044\uff96\046\uff96\051\uff96\052" +
    "\uff96\054\uff96\055\uff96\056\uff96\060\uff96\061\uff96\062\uff96" +
    "\064\uff96\065\uff96\066\uff96\067\uff96\071\uff96\073\uff96\106" +
    "\uff96\107\uff96\110\uff96\111\uff96\001\002\000\052\044\uff9e" +
    "\046\uff9e\051\uff9e\052\uff9e\054\uff9e\055\uff9e\056\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\071\uff9e\073\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\001" +
    "\002\000\040\016\053\017\056\043\155\050\171\052\164" +
    "\063\157\072\163\073\uff74\076\166\077\167\112\051\113" +
    "\055\114\057\115\054\116\161\001\002\000\046\046\266" +
    "\051\205\052\174\054\203\055\177\056\202\060\201\061" +
    "\206\062\210\064\175\065\213\066\211\067\207\073\uff72" +
    "\106\204\107\176\110\212\111\200\001\002\000\004\073" +
    "\265\001\002\000\052\044\uff76\046\uff76\051\uff76\052\uff76" +
    "\054\uff76\055\uff76\056\uff76\060\uff76\061\uff76\062\uff76\064" +
    "\uff76\065\uff76\066\uff76\067\uff76\071\uff76\073\uff76\106\uff76" +
    "\107\uff76\110\uff76\111\uff76\001\002\000\040\016\053\017" +
    "\056\043\155\050\171\052\164\063\157\072\163\073\uff74" +
    "\076\166\077\167\112\051\113\055\114\057\115\054\116" +
    "\161\001\002\000\004\073\uff75\001\002\000\004\073\uff73" +
    "\001\002\000\052\044\uff9d\046\uff9d\051\uff9d\052\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\071\uff9d\073\uff9d\106\uff9d\107" +
    "\uff9d\110\uff9d\111\uff9d\001\002\000\004\044\273\001\002" +
    "\000\050\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\021\uffb3\024\uffb3\025\uffb3\027\uffb3" +
    "\033\uffb3\034\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\116" +
    "\uffb3\001\002\000\024\006\024\007\007\010\006\011\005" +
    "\012\020\013\027\014\017\021\021\116\016\001\002\000" +
    "\004\073\276\001\002\000\052\044\uff95\046\uff95\051\uff95" +
    "\052\uff95\054\uff95\055\uff95\056\uff95\060\uff95\061\uff95\062" +
    "\uff95\064\uff95\065\uff95\066\uff95\067\uff95\071\uff95\073\uff95" +
    "\106\uff95\107\uff95\110\uff95\111\uff95\001\002\000\004\024" +
    "\uffdc\001\002\000\006\044\uffae\116\234\001\002\000\004" +
    "\044\303\001\002\000\004\044\uffaf\001\002\000\040\016" +
    "\053\017\056\043\155\044\uffac\050\171\052\164\063\157" +
    "\072\163\076\166\077\167\112\051\113\055\114\057\115" +
    "\054\116\161\001\002\000\044\044\uffad\051\205\052\174" +
    "\054\203\055\177\056\202\060\201\061\206\062\210\064" +
    "\175\065\213\066\211\067\207\106\204\107\176\110\212" +
    "\111\200\001\002\000\004\044\306\001\002\000\006\073" +
    "\uffaa\116\234\001\002\000\004\073\311\001\002\000\004" +
    "\073\uffab\001\002\000\004\023\137\001\002\000\050\004" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\021\uffb4\024\uffb4\025\uffb4\027\uffb4\033\uffb4\034" +
    "\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\116\uffb4\001\002" +
    "\000\050\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\021\uffd3\024\uffd3\025\uffd3\027\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\116" +
    "\uffd3\001\002\000\036\016\053\017\056\043\155\050\171" +
    "\052\164\063\157\072\163\076\166\077\167\112\051\113" +
    "\055\114\057\115\054\116\161\001\002\000\036\016\053" +
    "\017\056\043\155\050\171\052\164\063\157\072\163\076" +
    "\166\077\167\112\051\113\055\114\057\115\054\116\161" +
    "\001\002\000\036\016\053\017\056\043\155\050\171\052" +
    "\164\063\157\072\163\076\166\077\167\112\051\113\055" +
    "\114\057\115\054\116\161\001\002\000\036\016\053\017" +
    "\056\043\155\050\171\052\164\063\157\072\163\076\166" +
    "\077\167\112\051\113\055\114\057\115\054\116\161\001" +
    "\002\000\036\016\053\017\056\043\155\050\171\052\164" +
    "\063\157\072\163\076\166\077\167\112\051\113\055\114" +
    "\057\115\054\116\161\001\002\000\046\044\uffa9\051\205" +
    "\052\174\054\203\055\177\056\202\060\201\061\206\062" +
    "\210\064\175\065\213\066\211\067\207\073\uffa9\106\204" +
    "\107\176\110\212\111\200\001\002\000\046\044\uffa8\051" +
    "\205\052\174\054\203\055\177\056\202\060\201\061\206" +
    "\062\210\064\175\065\213\066\211\067\207\073\uffa8\106" +
    "\204\107\176\110\212\111\200\001\002\000\046\044\uffa5" +
    "\051\205\052\174\054\203\055\177\056\202\060\201\061" +
    "\206\062\210\064\175\065\213\066\211\067\207\073\uffa5" +
    "\106\204\107\176\110\212\111\200\001\002\000\046\044" +
    "\uffa6\051\205\052\174\054\203\055\177\056\202\060\201" +
    "\061\206\062\210\064\175\065\213\066\211\067\207\073" +
    "\uffa6\106\204\107\176\110\212\111\200\001\002\000\046" +
    "\044\uffa7\051\205\052\174\054\203\055\177\056\202\060" +
    "\201\061\206\062\210\064\175\065\213\066\211\067\207" +
    "\073\uffa7\106\204\107\176\110\212\111\200\001\002\000" +
    "\004\116\327\001\002\000\012\044\uffc9\046\uffc9\057\uffc9" +
    "\070\uffc9\001\002\000\010\044\uffcd\046\uffcd\057\341\001" +
    "\002\000\006\044\uffd1\046\uffd1\001\002\000\006\044\uffca" +
    "\046\333\001\002\000\004\116\327\001\002\000\004\044" +
    "\uffd0\001\002\000\006\044\uffcc\046\uffcc\001\002\000\006" +
    "\044\uffca\046\333\001\002\000\004\044\uffcb\001\002\000" +
    "\006\044\uffcf\046\uffcf\001\002\000\036\016\053\017\056" +
    "\043\155\050\171\052\164\063\157\072\163\076\166\077" +
    "\167\112\051\113\055\114\057\115\054\116\161\001\002" +
    "\000\046\044\uffce\046\uffce\051\205\052\174\054\203\055" +
    "\177\056\202\060\201\061\206\062\210\064\175\065\213" +
    "\066\211\067\207\106\204\107\176\110\212\111\200\001" +
    "\002\000\012\044\uffc6\046\uffc6\057\uffc6\070\245\001\002" +
    "\000\010\044\uffc8\046\uffc8\057\uffc8\001\002\000\024\006" +
    "\024\007\007\010\006\011\005\012\020\013\027\014\017" +
    "\021\021\116\016\001\002\000\004\044\347\001\002\000" +
    "\050\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\021\uffd4\024\uffd4\025\uffd4\027\uffd4\033" +
    "\uffd4\034\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\116\uffd4" +
    "\001\002\000\050\004\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\021\uffc3\024\uffc3\025\uffc3" +
    "\027\uffc3\033\uffc3\034\uffc3\036\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\116\uffc3\001\002\000\004\116\352\001\002\000\004" +
    "\035\uffb2\001\002\000\004\035\354\001\002\000\004\116" +
    "\355\001\002\000\004\073\uffb1\001\002\000\004\073\357" +
    "\001\002\000\004\023\137\001\002\000\050\004\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\021\uffb0\024\uffb0\025\uffb0\027\uffb0\033\uffb0\034\uffb0\036" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\116\uffb0\001\002\000\036" +
    "\016\053\017\056\043\155\050\171\052\164\063\157\072" +
    "\163\076\166\077\167\112\051\113\055\114\057\115\054" +
    "\116\161\001\002\000\044\051\205\052\174\054\203\055" +
    "\177\056\202\060\201\061\206\062\210\064\175\065\213" +
    "\066\211\067\207\073\363\106\204\107\176\110\212\111" +
    "\200\001\002\000\004\023\110\001\002\000\052\004\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\021\uffb9\024\uffb9\025\uffb9\026\365\027\uffb9\033\uffb9" +
    "\034\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\116\uffb9\001" +
    "\002\000\004\023\110\001\002\000\050\004\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\021" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\033\uffbd\034\uffbd\036\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\116\uffbd\001\002\000\050\004" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\021\uffba\024\uffba\025\uffba\027\uffba\033\uffba\034" +
    "\uffba\036\uffba\040\uffba\041\uffba\042\uffba\116\uffba\001\002" +
    "\000\066\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\116\uffdd\001\002\000\004\116\372\001\002\000\004\073" +
    "\uffbc\001\002\000\004\073\374\001\002\000\004\030\375" +
    "\001\002\000\004\045\376\001\002\000\004\023\377\001" +
    "\002\000\006\031\u0101\032\uffb5\001\002\000\004\032\u0108" +
    "\001\002\000\004\114\u0102\001\002\000\004\045\uffb8\001" +
    "\002\000\004\045\u0104\001\002\000\004\023\110\001\002" +
    "\000\006\031\uffb7\032\uffb7\001\002\000\006\031\u0101\032" +
    "\uffb5\001\002\000\004\032\uffb6\001\002\000\004\045\u0109" +
    "\001\002\000\004\023\110\001\002\000\004\024\u010b\001" +
    "\002\000\050\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\021\uffbb\024\uffbb\025\uffbb\027" +
    "\uffbb\033\uffbb\034\uffbb\036\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\116\uffbb\001\002\000\050\004\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\021\uffc2\024\uffc2" +
    "\025\uffc2\027\uffc2\033\uffc2\034\uffc2\036\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\116\uffc2\001\002\000\044\044\u010e\051\205" +
    "\052\174\054\203\055\177\056\202\060\201\061\206\062" +
    "\210\064\175\065\213\066\211\067\207\106\204\107\176" +
    "\110\212\111\200\001\002\000\050\004\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\021\uffc1" +
    "\024\uffc1\025\uffc1\027\uffc1\033\uffc1\034\uffc1\036\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\116\uffc1\001\002\000\004\024\uffdb" +
    "\001\002\000\004\116\u0111\001\002\000\004\044\u0112\001" +
    "\002\000\034\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\116\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\022\002\014\003\024\004\010\005\022\006" +
    "\012\014\007\021\025\053\013\001\001\000\012\005\070" +
    "\007\u010f\021\025\053\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\070\007\066\021\025\053\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\027\003\024\004\010\005\022\006" +
    "\012\014\007\021\025\053\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\035\017\037\021\036\053\013\001\001\000" +
    "\014\015\057\016\060\017\037\021\036\053\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\041\021" +
    "\036\053\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\045\001\001\000\004\020" +
    "\046\001\001\000\002\001\001\000\004\056\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\057\016\064\017\037\021\036\053" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\074\011\073\021\025\053" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\076\001\001\000\004\012\103\001\001\000\002\001" +
    "\001\000\004\013\101\001\001\000\002\001\001\000\012" +
    "\005\074\011\104\021\025\053\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\106\022\111\001\001" +
    "\000\002\001\001\000\034\005\125\021\025\023\116\026" +
    "\132\027\130\035\112\037\127\042\121\046\123\047\126" +
    "\050\134\053\013\057\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\125\021\025\023\u010e\026\132" +
    "\027\130\035\112\037\127\042\121\046\123\047\126\050" +
    "\134\053\013\057\114\001\001\000\020\047\164\050\134" +
    "\052\u010c\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\344\001\001" +
    "\000\004\065\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\125" +
    "\021\025\023\276\026\132\027\130\035\112\037\127\042" +
    "\121\046\123\047\126\050\134\053\013\057\114\001\001" +
    "\000\004\024\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\125\021\025\025\142\026\144\027\130" +
    "\035\140\036\141\037\127\042\121\046\123\047\126\050" +
    "\134\053\013\057\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\125\021\025\025\150\026\144\027" +
    "\130\035\140\036\141\037\127\042\121\046\123\047\126" +
    "\050\134\053\013\057\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\125\021\025\025\145\026\144" +
    "\027\130\035\140\036\141\037\127\042\121\046\123\047" +
    "\126\050\134\053\013\057\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\047\164\050\134" +
    "\052\155\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\047\164\050\134" +
    "\052\270\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\004\051\237\001\001\000\002\001\001" +
    "\000\022\047\164\050\134\052\254\053\255\054\161\055" +
    "\171\056\167\057\157\001\001\000\020\047\164\050\134" +
    "\052\253\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\006\047\250\050\134\001\001\000\006" +
    "\047\234\050\134\001\001\000\002\001\001\000\020\047" +
    "\164\050\134\052\172\054\161\055\171\056\167\057\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\047" +
    "\164\050\134\052\232\054\161\055\171\056\167\057\157" +
    "\001\001\000\020\047\164\050\134\052\231\054\161\055" +
    "\171\056\167\057\157\001\001\000\020\047\164\050\134" +
    "\052\230\054\161\055\171\056\167\057\157\001\001\000" +
    "\020\047\164\050\134\052\227\054\161\055\171\056\167" +
    "\057\157\001\001\000\020\047\164\050\134\052\226\054" +
    "\161\055\171\056\167\057\157\001\001\000\020\047\164" +
    "\050\134\052\225\054\161\055\171\056\167\057\157\001" +
    "\001\000\020\047\164\050\134\052\224\054\161\055\171" +
    "\056\167\057\157\001\001\000\020\047\164\050\134\052" +
    "\223\054\161\055\171\056\167\057\157\001\001\000\020" +
    "\047\164\050\134\052\222\054\161\055\171\056\167\057" +
    "\157\001\001\000\020\047\164\050\134\052\221\054\161" +
    "\055\171\056\167\057\157\001\001\000\020\047\164\050" +
    "\134\052\220\054\161\055\171\056\167\057\157\001\001" +
    "\000\020\047\164\050\134\052\217\054\161\055\171\056" +
    "\167\057\157\001\001\000\020\047\164\050\134\052\216" +
    "\054\161\055\171\056\167\057\157\001\001\000\020\047" +
    "\164\050\134\052\215\054\161\055\171\056\167\057\157" +
    "\001\001\000\020\047\164\050\134\052\214\054\161\055" +
    "\171\056\167\057\157\001\001\000\020\047\164\050\134" +
    "\052\213\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\047\164\050\134" +
    "\052\241\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\004\034\243\001\001\000\002\001\001" +
    "\000\020\047\164\050\134\052\245\054\161\055\171\056" +
    "\167\057\157\001\001\000\002\001\001\000\004\034\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\047\164\050\134\052\257\054" +
    "\161\055\171\056\167\057\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\047\164\050\134\052\262\054" +
    "\161\055\171\056\167\057\157\060\263\001\001\000\004" +
    "\061\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\047\164\050\134\052\262\054\161\055\171\056\167" +
    "\057\157\060\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\274\021\025\053\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\043\300" +
    "\046\301\047\126\050\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\044\304\047\164\050\134\052\303" +
    "\054\161\055\171\056\167\057\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\306\046\307\047\126" +
    "\050\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\047\164\050\134\052\324\054\161\055\171\056" +
    "\167\057\157\001\001\000\020\047\164\050\134\052\323" +
    "\054\161\055\171\056\167\057\157\001\001\000\020\047" +
    "\164\050\134\052\322\054\161\055\171\056\167\057\157" +
    "\001\001\000\020\047\164\050\134\052\321\054\161\055" +
    "\171\056\167\057\157\001\001\000\020\047\164\050\134" +
    "\052\320\054\161\055\171\056\167\057\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\330\033\327\001" +
    "\001\000\004\070\342\001\001\000\004\031\337\001\001" +
    "\000\004\066\331\001\001\000\004\032\333\001\001\000" +
    "\006\030\334\033\327\001\001\000\002\001\001\000\004" +
    "\067\335\001\001\000\004\032\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\047\164\050\134\052\341" +
    "\054\161\055\171\056\167\057\157\001\001\000\002\001" +
    "\001\000\004\034\343\001\001\000\002\001\001\000\012" +
    "\005\125\021\025\027\345\053\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\355\001\001\000\002\001\001\000\004" +
    "\024\357\001\001\000\002\001\001\000\020\047\164\050" +
    "\134\052\361\054\161\055\171\056\167\057\157\001\001" +
    "\000\002\001\001\000\004\022\363\001\001\000\004\040" +
    "\365\001\001\000\004\022\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u0102" +
    "\001\001\000\002\001\001\000\004\022\u0104\001\001\000" +
    "\004\073\u0105\001\001\000\004\041\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


        private Scanner scanner;
        public Parser(Scanner scanner) {
            this.scanner = scanner;
        }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_part program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_part ::= global_var_dcl 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProgramContent cont = (ProgramContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Program.getInstance().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_part ::= func_dcl 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProgramContent cont = (ProgramContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Program.getInstance().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_part ::= struct_dcl 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProgramContent cont = (ProgramContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Program.getInstance().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              ProgramContent RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
id = scanner.string.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_var_dcl ::= variable_type ID NT$0 SEMI 
            {
              ProgramContent RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		new GlobalVarDCL(t, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_type ::= struct_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = VariableType.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_type ::= AUTO 
            {
              Type RESULT =null;
		RESULT = VariableType.AUTO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_type ::= ID 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		new VariableType(type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_dcl ::= EXTERN function_type ID SEMI 
            {
              ProgramContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_dcl ::= FUNCTION function_type ID PRANTOP arguments PRANTCL func_dcl_part 
            {
              ProgramContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_type ::= variable_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_dcl_part ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_dcl_part ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments ::= variable_type ID function_array_dcl arguments_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arguments_part ::= COMA arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arguments_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_array_dcl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_dcl ::= RECORD ID BEGIN struct_var_dcl struct_more_var_dcl END RECORD SEMI 
            {
              ProgramContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_more_var_dcl ::= struct_var_dcl struct_more_var_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_more_var_dcl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct_var_dcl ::= struct_var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
id = scanner.string.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struct_var_dcl_part ::= struct_type ID NT$1 struct_var_dcl_cnt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructVarInitialization ini = (StructVarInitialization)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struct_var_dcl_cnt ::= ASSIGN const_val 
            {
              StructVarInitialization RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StructVarInitialization(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struct_var_dcl_cnt ::= 
            {
              StructVarInitialization RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struct_type ::= casting_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struct_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = StructureType.BOOL;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // struct_type ::= LONG 
            {
              Type RESULT =null;
		RESULT = StructureType.LONG;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= BEGIN block_content END 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block_content ::= var_dcl block_content 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block_content ::= statement block_content 
            {
              BlockContent RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Blocks.getInstance().getCurrent().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block_content ::= 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // loop_block ::= BEGIN loop_block_content END 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // loop_block_content ::= var_dcl loop_block_content 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loop_block_content ::= loop_statement loop_block_content 
            {
              BlockContent RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Blocks.getInstance().getCurrent().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // loop_block_content ::= 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$2 ::= 
            {
              Object RESULT =null;
Variables.getInstance().setConstant(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_dcl ::= CONST NT$2 var_dcl_part SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_dcl ::= var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Variables.getInstance().setType(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Blocks.getInstance().getCurrent().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_dcl_part ::= variable_type NT$3 var_dcl_cnt NT$4 var_dcl_cnt_extension 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Blocks.getInstance().setConstant(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_dcl_cnt ::= single_var var_dcl_cnt_part 
            {
              BlockContent RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDCL dcl = (VarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new CompleteDCL(dcl, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_dcl_cnt_part ::= ASSIGN expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_dcl_cnt_part ::= 
            {
              Expression RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$5 ::= 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Blocks.getInstance().getCurrent().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_dcl_cnt_extension ::= COMA var_dcl_cnt NT$5 var_dcl_cnt_extension 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_dcl_cnt_extension ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$6 ::= 
            {
              VarDCL RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
id = scanner.string.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // single_var ::= ID NT$6 array_part 
            {
              VarDCL RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (VarDCL) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDCL dcl = (VarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dcl.setId(id); RESULT = dcl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // array_part ::= BRACKOP expr BRACKCL array_part 
            {
              VarDCL RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayVarDCL(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // array_part ::= 
            {
              VarDCL RESULT =null;
		RESULT = new VariableDCL();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= cond_stmt 
            {
              BlockContent RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = stmt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= loop_stmt 
            {
              BlockContent RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = stmt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= assignment SEMI 
            {
              BlockContent RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assignment stmt = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = stmt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= function_call SEMI 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= RETURN expr SEMI 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // loop_statement ::= statement 
            {
              BlockContent RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockContent stmt = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = stmt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loop_statement ::= BREAK SEMI 
            {
              BlockContent RESULT =null;
		new Break();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loop_statement ::= CONTINUE SEMI 
            {
              BlockContent RESULT =null;
		new Continue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond_stmt ::= IF PRANTOP expr PRANTCL block else_part 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block ifb = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block eb = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(e, ifb, eb);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$7 ::= 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
id = scanner.string.toString(); Cases.getInstance().init();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond_stmt ::= SWITCH PRANTOP ID NT$7 PRANTCL OF COL BEGIN case_part DEFAULT COL block END 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block db = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(id, db);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_part ::= ELSE block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // else_part ::= 
            {
              Block RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
i = scanner.ICV;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Cases.getInstance().addCase(i, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_part ::= CASE INT_LIT NT$8 COL block NT$9 case_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL loop_block 
            {
              Statement RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Assignment in = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Assignment up = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(in, e, up, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // loop_stmt ::= REPEAT loop_block UNTIL PRANTOP expr PRANTCL SEMI 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Repeat(b, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$10 ::= 
            {
              Statement RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
i1 = scanner.string.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$11 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
i2 = scanner.string.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop_stmt ::= FOREACH PRANTOP ID NT$10 IN ID NT$11 PRANTCL loop_block 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Foreach(i1, i2, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop_init_part ::= assignment 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // loop_init_part ::= 
            {
              Assignment RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // loop_cond_part ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // loop_cond_part ::= 
            {
              Expression RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // loop_update_part ::= assignment 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // loop_update_part ::= 
            {
              Assignment RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignment ::= variable ASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DirectAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignment ::= variable PLUSASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PlusAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignment ::= variable MINUSASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MinusAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignment ::= variable MULTASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MultiplyAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment ::= variable DIVASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DivisionAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= var_access 
            {
              Access RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= variable DOT ID 
            {
              Access RESULT =null;
		;//todo
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // var_access ::= ID var_access_array_part 
            {
              Access RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		a.setDescriptor(id); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // var_access_array_part ::= BRACKOP expr BRACKCL array_part 
            {
              Access RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayAccess(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // var_access_array_part ::= 
            {
              Access RESULT =null;
		RESULT = new VariableAccess();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= const_val 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant e = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= PRANTOP expr PRANTCL 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Not(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= BINOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryNot(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Uminus(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= PREFMINUS2 variable 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PrefixMinus2(a.getDescriptor());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= PREFPLUS2 variable 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PrefixPlus2(a.getDescriptor());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= variable PREFMINUS2 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new PostfixMinus2(a.getDescriptor());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= variable PREFPLUS2 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new PostfixPlus2(a.getDescriptor());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= PRANTOP casting_type PRANTCL expr 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Casting(t, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= SIZEOF PRANTOP variable_type PRANTCL 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SizeOf(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= arithmatic_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= conditional_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= variable 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Variable(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= function_call 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // casting_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = CastingType.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // casting_type ::= INT 
            {
              Type RESULT =null;
		RESULT = CastingType.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // casting_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = CastingType.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // casting_type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = CastingType.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arithmatic_expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mult(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arithmatic_expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Div(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithmatic_expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mod(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithmatic_expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Add(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithmatic_expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Sub(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithmatic_expr ::= expr BIAND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryAnd(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithmatic_expr ::= expr BIOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithmatic_expr ::= expr BIEXOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryXor(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // conditional_expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LT(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // conditional_expr ::= expr LTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LE(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // conditional_expr ::= expr GT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GT(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // conditional_expr ::= expr GTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GE(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // conditional_expr ::= expr EQEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new EQ(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // conditional_expr ::= expr NOTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NE(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // conditional_expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryAnd(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // conditional_expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // const_val ::= TRUE 
            {
              Constant RESULT =null;
		RESULT = new BooleanConstant(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // const_val ::= FALSE 
            {
              Constant RESULT =null;
		RESULT = new BooleanConstant(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // const_val ::= CHAR_LIT 
            {
              Constant RESULT =null;
		RESULT = new CharConstant(scanner.string);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // const_val ::= INT_LIT 
            {
              Constant RESULT =null;
		RESULT = new IntegerConstant(scanner.ICV);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // const_val ::= FLOAT_LIT 
            {
              Constant RESULT =null;
		RESULT = new DoubleConstant(scanner.RCV);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // const_val ::= STR_LIT 
            {
              Constant RESULT =null;
		RESULT = new StringConstant(scanner.string);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // function_call ::= ID PRANTOP parameters PRANTCL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parameters ::= expr parameters_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parameters_part ::= COMA parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parameters_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
